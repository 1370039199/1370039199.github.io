[{"title":"CC1101芯片学习笔记","url":"//post/1/","content":"<h3 id=\"一、研发流程及注意事项\">一、研发流程及注意事项</h3>\n<p>开发人员可在TI官网下载CC1101芯片相关手册及配置软件：</p>\n<ul>\n<li><a href=\"https://www.ti.com.cn/cn/lit/ds/symlink/cc1101.pdf?ts=1644562100340&amp;ref_url=https%253A%252F%252Fwww.ti.com.cn%252Fproduct%252Fzh-cn%252FCC1101%253FkeyMatch%253DCC1101%2526tisearch%253Dsearch-everything%2526usecase%253DGPN\">CC1101芯片数据手册</a></li>\n<li><a href=\"https://www.ti.com/tool/download/SMARTRFTM-STUDIO?_ticdt=MTY0NDU2MTk3NHwwMTc5Nzk5OTE3OGYwMDFmOTc0N2E5ZjE5MjNiMDMwODMwMDI3MDdiMDA5Nzh8R0ExLjMuMjEyNjkwNTg5MS4xNjIxMjQyNzQ4\">芯片配置软件SmartRF Studio 7</a></li>\n</ul>\n<img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/img/20220216155945.png\"  style=\"zoom:80%;\" />\n<p>开发人员可以利用SmartRF Studio 7软件对各射频参数进行设定，软件右边会显示相关寄存器的值、各射频参数的具体设置如下：</p>\n<h4 id=\"1-频率设置\">1.频率设置</h4>\n<p><strong>起始频率</strong>由<strong>FREQ2,FREQ1,FREQ0寄存器</strong>来设置。<strong>信道间隔</strong>由<strong>MDMCFG0寄存器中的CHANSPC_M[7:0]</strong>：尾数以及<strong>MDMCFG1寄存器中的CHANSPC_E[1:0]</strong>：指数来设置。<strong>信道号</strong>由**CHANNR寄存器中的CHAN[7:0]**来设置。<strong>载波频率</strong>的公式如下：<br>\n$$<br>\nf_{carrier}=\\frac{ f_{XOSC} }{ 2^{16} }\\cdot(FREQ+CHAN\\cdot((256+CHANSPC_M)\\cdot2^{ {CHANSPC_E}-2 } ))<br>\n$$<br>\n<strong>中频频率</strong>由  <strong>FSCTRL1寄存器中的FREQ_IF[4:0]</strong>  设置。中频频率的公式如下：<br>\n$$<br>\nf_{IF}=\\frac{ f_{XOSC} }{ 2^{10} }\\cdot{FREQ_{IF} }<br>\n$$<br>\n<strong>注意事项：</strong></p>\n<ul>\n<li>使用26M晶振时，最大可设置信道间隔为405KHz。如果想得到1MHz的信道间隔，解决办法是设置333KHz的信道间隔，每隔三个间隔选择一个实际信道。</li>\n<li>频率方面的设置只能在芯片处于空闲状态时更改。</li>\n</ul>\n<h4 id=\"2-输出功率设置\">2.输出功率设置</h4>\n<p><strong>PATABLE</strong>寄存器可以存储8个用户选择的输出功率配置，<strong>FREND0寄存器中的PA_POWER[2:0]</strong>  设置了当前PATABLE中有效的功率值的个数。PA_POWER[2:0] = 0表示关闭了在数据包传输开始和结束时的功率斜坡变化，只使用PATABLE的索引0作为输出功率。</p>\n<ul>\n<li>\n<p>使用OOK调制时，逻辑0和逻辑1的功率电平分别由PATABLE的索引0和索引1来配置.</p>\n</li>\n<li>\n<p>使用ASK调制时，从<strong>索引0到FREND0.PA_POWER值</strong>的输出功率将被用于PA功率斜坡递增和递减整形。</p>\n</li>\n</ul>\n<p><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/img/image-20210602103723540.png\" alt=\"\"></p>\n<p>使用ASK调制时，调制器内部有一个计数器，其计数速率是发送信号速率的FREND0.PA_POWER倍，每递增或递减一次，则改变一次功率值，计数器计数到FREND0.PA_POWER又回复到0.</p>\n<p><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/img/image-20210602103755934.png\" alt=\"\"></p>\n<p><strong>注意事项：</strong></p>\n<ul>\n<li>如果想写入PATABLE[0]以外的条目，必须采用<strong>突发访问模式</strong>。</li>\n<li>进入SLEEP模式后，PATABLE除了索引0其余的信息都会丢失。</li>\n</ul>\n<h4 id=\"3-数据速率设置\">3.数据速率设置</h4>\n<p>数据速率通过  <strong>MDMCFG3寄存器中的DRATE_M[7:0]以及MDMCFG4寄存器的DRATE_E[3:0]</strong>  来配置.公式如下：</p>\n<p>$$<br>\nR_{DATA} = \\frac{(256+DRATE_M)\\cdot{2^{DRATE_E} } }{ 2 ^ {28} }\\cdot{ f_{ XOSC } }<br>\n$$</p>\n<p>对于给定的速率值可以通过以下公式来得到相应的寄存器值。（当DRATE_M接近256时，可置DRATE_M = 0,DRATE_E加一，可理解成  <strong>进位操作</strong>  ）</p>\n<p>$$<br>\nDRATE_E=log_{2}(\\frac{R_{DATA }\\cdot{2^{20 } } }{f_{ XOSC } })<br>\n$$</p>\n<p>$$<br>\nDRATE_M=\\frac{R_{DATA}\\cdot{2^{28} } }{f_{XOSC}\\cdot{2^{DRATE_E} } }-256<br>\n$$</p>\n<h4 id=\"4-接收滤波器带宽设置\">4.接收滤波器带宽设置</h4>\n<p>接收滤波带宽通过  <strong>MDMCFG4.CHANBW_E[7:6]和MDMCFG4.CHANBW_M[5:4]</strong>  来设置，以下为寄存器配置与滤波带宽的关系：<br>\n$$<br>\nBW_{channel}=\\frac{f_{XOSC}}{8\\cdot(4+CHANBW_M)\\cdot2^{CHANBW_E}}<br>\n$$<br>\n下图是CC1101支持的接收滤波器带宽：</p>\n<p><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/img/image-20210602131750821.png\" alt=\"\"></p>\n<h4 id=\"5-调制类型设置\">5.调制类型设置</h4>\n<p>调制类型由  <strong>MDMCFG2寄存器的MOD_FORMAT[6:4]</strong>  来设置，如下图不同的寄存器值对应不同的调制类型。</p>\n<p><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/img/image-20210602132924458.png\" alt=\"\"></p>\n<p><strong>注意事项：</strong></p>\n<ul>\n<li>MSK支持26Kbps以上的数据速率</li>\n<li>射频数据可选择曼彻斯特编码和解码来进行调制和解调。设置  <strong>MDMCFG2寄存器中的MANCHESTER[3]</strong>  值为1即可。</li>\n<li>曼彻斯特编码不支持与FEC前向纠错/Interleaver交织器或者MSK、4-FSK调制格式同时使用。</li>\n</ul>\n<h4 id=\"6-频偏设置\">6.频偏设置</h4>\n<p>CC1101支持2-FSK和4-FSK调制，2-FSK可以选择由BT=0.5的高斯滤波器整形、产生GFSK调制信号。这种频谱整形的调制方式改善了ACP（相邻信道功率）和占用带宽。</p>\n<p>当使用2-FSK/4-FSK/GFSK调制格式时，使用<strong>DEVIATN</strong>寄存器来设置<strong>频率偏移</strong>。要保证TX频偏与RX预期频偏一致，以便可以稳定解调。频率偏移由<strong>DEVIATN寄存器中的DEVIATION_M和DEVIATION_E</strong>来设置。公式如下：<br>\n$$<br>\nf_{dev}=\\frac{f_{ XOSC } }{2^{ 17 } }\\cdot{(8+DEVIATION_M)}\\cdot{2^{DEVIATION_E}}<br>\n$$<br>\n关于2-FSK/GFSK/4-FSK调制格式的符号编码如下图所示：</p>\n<p><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/img/image-20210602135909703.png\" alt=\"\"></p>\n<p>注意事项：</p>\n<ul>\n<li>\n<p>使用4-FSK调制时，前导码和同步字是使用2-FSK调制格式来发送的，如下图所示。</p>\n<p><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/img/image-20210602134312812.png\" alt=\"\"></p>\n</li>\n<li>\n<p>MSK最小频移键控，前导码、同步字、有效数据载荷均由MSK调制。相移以恒定的过渡时间执行，可以使用<strong>DEVIATN寄存器中的DEVIATION_M</strong>设置<strong>相位的符号周期</strong>。</p>\n</li>\n<li>\n<p>OOK开关键控使用PA功率的开关分别来调制逻辑1和逻辑0，<strong>DEVIATN</strong>寄存器在使用OOK/ASK时无作用。</p>\n</li>\n</ul>\n<h4 id=\"7-数据包格式\">7.数据包格式</h4>\n<p><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/img/image-20210602154628051.png\" alt=\"\"></p>\n<p><strong>数据包格式：前导码+同步字+长度+地址+数据段+CRC16</strong></p>\n<h5 id=\"①前导码\">①前导码</h5>\n<p>在时域下， 一般由 1010 或者 0101 二进制码构成。</p>\n<p><strong>MDMCFG寄存器中的NUM_PREABLE[2:0]</strong>  设置了传输时前导码的最小字节数。</p>\n<p><strong>PKTCTRL1寄存器中的PQT[7:5]</strong>  设置了前导质量阈值，只有RX接收了超过该前导质量阈值的前导码，这个数据才可被接收。</p>\n<h5 id=\"②同步字\">②同步字</h5>\n<p><strong>MDMCFG2寄存器中的SYNC_MODE[2:0]</strong>  设置了同步字传输和检测模式。例如：值3（011）和值7（111）启用了TX的重复同步字传输和RX的32位同步字检测，需要32位中的30位匹配上。</p>\n<p><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/img/image-20210602145108992.png\" alt=\"\"></p>\n<p><strong>SYNC1[7:0],SYNC0[7:0]<strong>设置了</strong>同步字的16位字段</strong>，该字段可以被重复调用为32位，解调器可以通过该字段来找到数据流的字节边界。</p>\n<h5 id=\"③CRC校验\">③CRC校验</h5>\n<p><strong>PKTCTRL0寄存器中的CRC_EN[2]</strong>  值设置为1代表CRC校验使能。</p>\n<p><strong>PKTCTRL1寄存器中的APPEND_STATUS[2]</strong>  值设置为1代表两个状态字节会添加到数据包的有效数据之后。</p>\n<p>第一个字节表示<strong>RSSI[7:0]</strong>.</p>\n<p>第二个字节包含<strong>CRC_OK[7]和LQI[6:0]</strong>,CRC_OK这个标志位在收到数据包CRC校验成功或者CRC校验未使能时为1；在收到数据包后CRC校验失败为0。LQI代表链路质量。</p>\n<p><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/img/image-20210602152334186.png\" alt=\"\"></p>\n<h5 id=\"④地址校验\">④地址校验</h5>\n<p>接收数据包的地址校验配置由  <strong>PKTCTRL1寄存器中的ADR_CHK[1:0]</strong>  来配置。</p>\n<p><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/img/image-20210602152906767.png\" alt=\"\"></p>\n<p>如果地址校验位配置为01/10/11,则在发送的数据包中需添加一个设备地址字节，并在接收时校验该设备地址。</p>\n<h5 id=\"⑤数据包长度校验\">⑤数据包长度校验</h5>\n<p><strong>PKTCTRL0寄存器中的LENGTH_CONFIG[1:0]</strong>  设置数据包长度。</p>\n<p><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/img/image-20210602153129320.png\" alt=\"\"></p>\n<p>00代表固定包长模式，数据包长度由PKTLEN寄存器来配置。（支持数据包长度到255字节）</p>\n<p>01代表可变包长模式，数据包长度配置在数据包中同步字之后的第一个字节。（支持数据包长度到255字节）。</p>\n<p>10代表无限包长模式，更长的数据包必须采用该模式。</p>\n<p><strong>对于大于255个字节数的数据发送：</strong> 因为在发送和接收时，PKTCTRL寄存器都是可编程的。所以允许芯片接收大于255个字节的数据。实现方式为，先将数据包发送接收模式设置为无限数据包格式，当剩余数据包个数小于256个字节时，将数据包格式切换为固定数据包长度格式.把剩余的字节数写入PKTLEN寄存器。</p>\n<p><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/img/image-20210602155207963.png\" alt=\"\"></p>\n<h5 id=\"⑥白化\">⑥白化</h5>\n<p>通过加白噪声来提高数据的抗干扰能力。通过<strong>PKTCTRL0寄存器的WHITE_DATA[6] 设置为1</strong>来使能<strong>数据白化</strong>功能，将数据包中从数据包长度部分到CRC校验部分的所有数据通过和一个9位的虚拟随机数相异或。在接收方通过相同的序列将数据异或恢复成原来数据。数据白化要在FEC或者交织编码前完成。</p>\n<p>PN9序列初始值均为1.（111111111）</p>\n<p>这一方法的提出起源于时钟同步，为了同步发射信号和接收信号的时钟，可以利用数据来对两者的时钟进行微调，而数据中0和1的交替出现频率越大，微调的效率就越高，如果出现长串的0或者1，微调就很困难，出现连续的0或者1，就可以通过白化算法生成0和1尽可能均匀出现的序列。</p>\n<p><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/img/image-20210602162005996.png\" alt=\"\"></p>\n<p>Data ：发送端的原始数据      Whitening Key：白化序列    Whiten Data：Whitening Key与Data 做XOR运算 异或：值相同输出为0，值不同输出为1.下图是数据白化和反白化的例子：</p>\n<p><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/img/image-20210602162715892.png\" alt=\"\"></p>\n<p><strong>Whitening的更新：</strong> 9位白化序列，最高位MSB不参与XOR运算。如上图生成多项式为：<br>\n$$<br>\ng(x) = x^9 + x^5 + 1<br>\n$$<br>\n更新算法如下：</p>\n<p>1.新的第9位由第0位和第五位XOR产生</p>\n<p>2.整体右移一位</p>\n<p>3.重复1，2步骤8次</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">MSB（X<sup>8</sup>）</th>\n<th style=\"text-align:center\">X<sup>7</sup></th>\n<th style=\"text-align:center\">X<sup>6</sup></th>\n<th style=\"text-align:center\"><strong>X<sup>5</sup></strong></th>\n<th style=\"text-align:center\">X<sup>4</sup></th>\n<th style=\"text-align:center\">X<sup>3</sup></th>\n<th style=\"text-align:center\">X<sup>2</sup></th>\n<th style=\"text-align:center\">X<sup>1</sup></th>\n<th style=\"text-align:center\">X<sup>0</sup></th>\n<th style=\"text-align:center\">Counter</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">---------</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">3</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">4</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">5</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">6</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">7</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">8</td>\n</tr>\n</tbody>\n</table>\n<p>如上图Whiten Key：11111111更新后得到11100001</p>\n<p>参考资料：<a href=\"https://www.silabs.com/documents/public/application-notes/AN592.pdf\">AN592.pdf (silabs.com)</a></p>\n<h5 id=\"⑦FEC-交织编码\">⑦FEC/交织编码</h5>\n<p><strong>MDMCFG1寄存器中的FEC_EN[7] 值置为1</strong>代表使能FEC并与交织搭配使用（仅支持固定包长模式）。</p>\n<p><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/img/20220217171230.png\" alt=\"\"></p>\n<p>交织编码的目的是把一个较长的突发差错离散成随机差错，再用纠正随机差错的编码（FEC）技术消除随机差错。交织深度越大，则离散度越大，抗突发差错能力也就越强。但交织深度越大，交织编码处理越长，从而造成数据传输时延增大，交织编码是以时间为代价的。</p>\n<p><strong>交织编码器工作原理：</strong></p>\n<p>信道编码采用交织技术，可打乱码、字、比特之间的相关性，将信道中传输过程中的成群突发错误转换为随机错误，从而提高整个通信系统的可靠性。交织器有两种结构类型：分组结构和卷积结构。分组结构是把待编码的m×n个数据位放入一个m行n列的矩阵，即每次对m×n个数据位进行交织，由下图可知，数据位按行填入，而在发送时按列读出，这样就产生了对原始数据位以m个比特为周期进行分隔的效果。在接受端的解交织操作则与此相反。</p>\n<p><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/img/image-20210603130124787.png\" alt=\"\"></p>\n<p>对于FEC算法是如何实现纠错的，有兴趣的可以看下这篇文章<a href=\"https://zhuanlan.zhihu.com/p/103888948\">理解FEC（Reed-Solomon）编码</a></p>\n<h4 id=\"8-Data-FIFO\">8.Data FIFO</h4>\n<p>CC1101包含两个64字节的FIFO，一个用于发送数据，一个用于接收数据。RX FIFO,TX FIFO内的字节数可通过读<strong>RXBYTES寄存器中的NUM_RXBYTES[6:0]值和TXBYTES寄存器中的NUM_TXBYTES[6:0]值</strong>来获取。</p>\n<p>当数据包长小于64字节时，推荐等待完整的数据包被接收到后再从RX FIFO读出来。</p>\n<p>当数据包长大于64字节时，MCU必须要判断可以从RX FIFO读多少个字节。</p>\n<p>可以使用下列软件流程参考：</p>\n<p>①以至少两倍的接收 RF 字节的速率重复读取 RXBYTES.NUM_RXBYTES，直到返回相同的值两次； 并且把值存储在n中。</p>\n<p>②如果n&lt;数据包剩余的字节数，则从RX FIFO读取n-1个字节。</p>\n<p>③重复①②过程，直到n=数据包剩余的字节数。</p>\n<p>④从RX FIFO读取剩余的字节数。</p>\n<p><strong>FIFOTHR寄存器中的FIFO_THR[3:0]</strong>  用于设置TX FIFO和RX FIFO的阈值。当达到阈值时，这为FIFO上溢和下溢留下了相同的余量。如下图所示。</p>\n<p><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/img/image-20210602183226222.png\" alt=\"\"></p>\n<p>可以选择GDOx_CFG[5:0]为RX FIFO 上溢，TX FIFO 下溢事件，触发相应的GDO引脚电平变化。</p>\n<h4 id=\"9-WOR-Wake-On-Radio-模式\">9.WOR(Wake On Radio)模式</h4>\n<p><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/img/image-20210602184952243.png\" alt=\"\"></p>\n<p>如上图所示，表示WOR的过程，Event0，Event1代表两个定时器，Event0控制WOR的周期长度，Event1表示芯片从唤醒到空闲状态的时间即等待晶振起振到稳定的时间。</p>\n<p>在休眠模式中（WOR使能），到达Event0将会开启数字稳压器和晶振。WOR周期由  <strong>WOREVT1寄存器中的EVENT0[7:0]和WOREVT2寄存器中的EVENT0[7:0]</strong>,<strong>WORCTRL寄存器中的WOR_RES[1:0]</strong>  来设置。公式如下：<br>\n$$<br>\nt_{Event0}=\\frac{750}{f_{XOSC}}\\cdot{EVENT_0}\\cdot{2^{5\\cdot{WOR_{RES}}}}<br>\n$$<br>\n对于26M晶振，芯片进入休眠模式到到达下一个Event0的时间应不小于11.08ms。计算公式如下：<br>\n$$<br>\nt_{SLEEP_{min}} = \\frac{750}{f_{xosc}}\\cdot384<br>\n$$<br>\nWOR周期的最小值应为：</p>\n<p><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/img/image-20210602190555165.png\" alt=\"\"></p>\n<p><strong>Event1的周期时间可由WORCTRL寄存器的EVENT1[6:4]</strong>  来设置。公式为：<br>\n$$<br>\nt_{Event1}=x\\cdot{\\frac{750}{f_{xosc}}}<br>\n$$<br>\n<strong>WOR设置步骤：</strong></p>\n<p><strong>1.首先要确定接收时间：</strong></p>\n<p>一般WOR设计中的接收方是由发送方决定的，若要成功唤醒或在其醒来过程中可靠地接收数据必须使接收时间&gt;=发送周期时间的两倍。例如：发射周期为7.5ms，则在一个WOR周期内唤醒设备，WOR接收时间需要&gt;=15ms，这里取15ms。</p>\n<p><strong>发射周期应该与空速相关，可配置MDMCFG4,MDMCFG3寄存器来验证。</strong></p>\n<p><strong>2.确定接收时间</strong></p>\n<p>占空比的大小决定了WOR过程的功耗，占空比越小对应的功耗就越小。</p>\n<p><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/img/image-20210602192337874.png\" alt=\"\"></p>\n<p><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/img/image-20210602192423301.png\" alt=\"\"></p>\n<p>接收时间为15ms，</p>\n<p><strong>3.根据占空比和接收时间确定Tevent0值</strong><br>\n$$<br>\nt_{RXtimeout}=t_{Event0}\\cdot{DutyCycle}<br>\n$$<br>\n所以假如选择默认的EVENT0 = 0x876B，WOR_RES = 0时，应选择1.563%的占空比，即MCSM2.RX_TIME = 3,此时$t_{Event0}=1s$,$t_{RXtimeout}=15.93ms$</p>\n<p><strong>4.确定Tevent1时间</strong></p>\n<p>t<sub>Event1</sub>时间取决于晶振起振并稳定的时间，其对寄存器设置公式如下图：</p>\n<p><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/img/image-20210603091927869.png\" alt=\"\"></p>\n<p><strong>5.确定与WOR周期有关寄存器的值</strong></p>\n<p>WOREVT1:0x87</p>\n<p>WOREVT0:0x6B</p>\n<p>WORCTRL:0x78</p>\n<p>MCSM0:0x38 （MCSM0.FS_AUTOCAL[5:4] = 11 见CC1101数据手册P82，可以降低功耗）</p>\n<p><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/img/20220218110518.png\" alt=\"\"></p>\n<p>MCSM2:0x13（MCSM2.RX_TIME_RSSI[4] = 1,见CC1101数据手册P9，可以降低功耗，见下图）<strong>重要！！！</strong></p>\n<p><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/img/image-20210603094247653.png\" alt=\"\"></p>\n<p>该WOR模式配置实现仅提供参考，基于CC1101来做WOR模式采用硬件实现还是软件实现还需实际调试来衡量优缺点！</p>\n<h4 id=\"10-RSSI模式\">10.RSSI模式</h4>\n<p>RSSI值是当前信道的信号强度的估计值。其以 dBm 为单位。<strong>RSSI 更新率 $f_{RSSI}$ 取决于接收器滤波器带宽$BW_{channel}$和 AGCCTRL0寄存器的FILTER_LENGTH值</strong>。公式如下：<br>\n$$<br>\nf_{RSSI} = \\frac{ 2\\cdot{ BW_{channel} } }{8\\cdot{ 2^{FILTER_{LENGTH} }}}<br>\n$$<br>\nPKTCTRL1寄存器中的APPEND_STATUS值使能后， RSSI 值自动添加到数据包后附加的第一个字节。</p>\n<p>从RSSI寄存器读取的RSSI值为二进制补码。需要经过以下程序转换为实际信号强度（$RSSI_{dBm}$）。</p>\n<p>①读取RSSI状态寄存器。</p>\n<p>②将读数从十六进制转换为十进制数（$RSSI_{dec}$）</p>\n<p>③如果$RSSI_{dec}$ &gt;= 128 则 $RSSI_{dBm} = (RSSI_{dec}- 256)/ 2 - RSSI_{offset}$。</p>\n<p>④如果$RSSI_{dec}$&lt; 128 则 $RSSI_{dBm}  = RSSI_{dec}/ 2 - RSSI_{offset}$。</p>\n<h3 id=\"二、代码实现\">二、代码实现</h3>\n<h4 id=\"1-SPI配置\">1.SPI配置</h4>\n<p>CC1101通过SPI进行配置。数据发送时先发<strong>高位</strong>，所有在SPI传输的数据包含<strong>读写位（R:1/W:0）+突发访问位+六位地址的头字节。</strong></p>\n<p><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/img/image-20210602110936806.png\" alt=\"\"></p>\n<p>对于单片机如何配置SPI，有两个重要参数：SPI的<strong>时钟极性CPOL</strong>表示时钟信号在空闲时是高电平还是低电平；<strong>时钟相位CPHA</strong>表示何时进行信号采样，在第一个跳变沿，还是第二个跳变沿。由上图可判断时钟信号在空闲时为低电平，并在第一个跳变沿进行采样。</p>\n<p><strong>注意事项：</strong></p>\n<p>当片选CSn拉低后，发送起始头字节前一定要判断<strong>SO引脚的电平是否为低电平</strong>，为低则说明CC1101晶振已经起振，为高则说明CC1101处于SLEEP模式或晶振关闭模式。</p>\n<h4 id=\"2-射频底层基本操作实现\">2.射频底层基本操作实现</h4>\n<p>SPI功能准备好了，接下来我们就可以实现射频芯片的基本操作：读写寄存器、读写状态/命令，由于SPI传输数据时的头字节格式为<strong>读写位（R:1/W:0）+突发访问位+六位地址</strong>的形式。所以读写寄存器时头字节可以写为如下形式：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><strong>写</strong>（W：0,突发访问位：0）</th>\n<th style=\"text-align:center\"><strong>0x00|六位地址</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><strong>连续写（W：0,突发访问位：1）</strong></td>\n<td style=\"text-align:center\"><strong>0x40|六位地址</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>读（R：1,突发访问位：1）</strong></td>\n<td style=\"text-align:center\"><strong>0x80|六位地址</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>连续读（R：1,突发访问位：1）</strong></td>\n<td style=\"text-align:center\"><strong>0xC0|六位地址</strong></td>\n</tr>\n</tbody>\n</table>\n<p>那么CC1101读写寄存器的操作便可实现为如下伪代码形式：</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/*!\n *  @brief   读寄存器\n *  @param   addr：寄存器地址\n *  @return  对应寄存器的值\n*/</span>\nINT8U <span class=\"token function\">CC1101_ReadRegister</span><span class=\"token punctuation\">(</span>INT8U addr<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    INT8U value<span class=\"token punctuation\">;</span>\n    CSN_LOW<span class=\"token punctuation\">;</span><span class=\"token comment\">//片选拉低</span>\n    value <span class=\"token operator\">=</span> <span class=\"token function\">SPI_ExchangeByte</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x80</span><span class=\"token operator\">|</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//SPI写入0x80|addr字节，把读取到的值存储在value中。</span>\n    CSN_HIGH<span class=\"token punctuation\">;</span><span class=\"token comment\">//片选拉高</span>\n    <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">/*!\n *  @brief   读多个寄存器\n *  @param   addr：寄存器地址;buffer:将读取到的值存储到该buffer中;\n*/</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">CC1101_ReadRegisters</span><span class=\"token punctuation\">(</span>INT8U addr<span class=\"token punctuation\">,</span>INT8U <span class=\"token operator\">*</span>buffer<span class=\"token punctuation\">,</span>INT8U size<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    INT8U i<span class=\"token punctuation\">;</span>\n    CSN_LOW<span class=\"token punctuation\">;</span><span class=\"token comment\">//片选拉低</span>\n    <span class=\"token function\">SPI_ExchangeByte</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xC0</span><span class=\"token operator\">|</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//SPI写入0xC0|addr字节->连续读取</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>size<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>buffer<span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">SPI_ExchangeByte</span><span class=\"token punctuation\">(</span>SPI_NOP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//写入无操作指令，将读取的值存储在buffer中。</span>\n\t<span class=\"token punctuation\">&#125;</span>\n    CSN_HIGH<span class=\"token punctuation\">;</span><span class=\"token comment\">//片选拉高</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">/*!\n *  @brief   写寄存器\n *  @param   addr：寄存器地址;value：将写入寄存器的值\n*/</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">CC1101_WriteRegister</span><span class=\"token punctuation\">(</span>INT8U addr<span class=\"token punctuation\">,</span>INT8U value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    CSN_LOW<span class=\"token punctuation\">;</span><span class=\"token comment\">//片选拉低</span>\n    <span class=\"token function\">SPI_ExchangeByte</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x00</span><span class=\"token operator\">|</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//SPI写入0x00|地址</span>\n    <span class=\"token function\">SPI_ExchangeByte</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//SPI写入寄存器的值</span>\n    CSN_HIGH<span class=\"token punctuation\">;</span><span class=\"token comment\">//片选拉高</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">/*!\n *  @brief   写多个寄存器\n *  @param   addr：寄存器地址;buffer：存储将要写入值的buffer;size：将要写入的大小\n*/</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">CC1101_WriteRegisters</span><span class=\"token punctuation\">(</span>INT8U addr<span class=\"token punctuation\">,</span>INT8U <span class=\"token operator\">*</span>buffer<span class=\"token punctuation\">,</span>INT8U size<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    CSN_LOW<span class=\"token punctuation\">;</span><span class=\"token comment\">//片选拉低</span>\n    <span class=\"token function\">SPI_ExchangeByte</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x40</span><span class=\"token operator\">|</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//SPI写入0x40|地址</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>size<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">SPI_ExchangeByte</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>buffer<span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//SPI写入寄存器的值</span>\n\t<span class=\"token punctuation\">&#125;</span>\n    CSN_HIGH<span class=\"token punctuation\">;</span><span class=\"token comment\">//片选拉高</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p><strong>写入命令</strong>：命令选通寄存器通过传输单个头字节来访问（没有数据正在传输）。即只有 R/W位、突发访问位（设置为 0）和六位地址(范围为0x30-0x3D)。</p>\n<p><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/img/20220218174423.png\" alt=\"\"></p>\n<p>CC1101写入命令的操作便可实现为如下伪代码形式：</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/*!\n *  @brief   写命令到命令选通寄存器\n *  @param   addr：寄存器地址\n*/</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">CC1101_WriteCommand</span><span class=\"token punctuation\">(</span>INT8U cmd<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    CSN_LOW<span class=\"token punctuation\">;</span><span class=\"token comment\">//片选拉低</span>\n    <span class=\"token function\">SPI_ExchangeByte</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x00</span><span class=\"token operator\">|</span>cmd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    CSN_HIGH<span class=\"token punctuation\">;</span><span class=\"token comment\">//片选拉高</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p><strong>读取状态</strong>：对于0x30-0x3D的寄存器地址，当突发位为1时，会访问状态寄存器。</p>\n<p><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/img/20220218174524.png\" alt=\"\"></p>\n<p>CC1101读取状态的操作便可实现为如下伪代码形式：</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/*!\n *  @brief   读状态寄存器\n *  @param   addr：状态寄存器地址\n *  @return  对应寄存器的值\n*/</span>\nINT8U <span class=\"token function\">CC1101_ReadStatus</span><span class=\"token punctuation\">(</span>INT8U addr<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    INT8U status<span class=\"token punctuation\">;</span>\n    CSN_LOW<span class=\"token punctuation\">;</span><span class=\"token comment\">//片选拉低</span>\n    <span class=\"token function\">SPI_ExchangeByte</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xC0</span><span class=\"token operator\">|</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    status <span class=\"token operator\">=</span> <span class=\"token function\">SPI_ExchangeByte</span><span class=\"token punctuation\">(</span>SPI_NOP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    CSN_HIGH<span class=\"token punctuation\">;</span><span class=\"token comment\">//片选拉高</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h4 id=\"3-根据基本操作实现简单收发功能\">3.根据基本操作实现简单收发功能</h4>\n<h5 id=\"①初始化部分\">①初始化部分</h5>\n<p>包括频率、空速、功率、数据包格式、及 中断触发事件等参数设置。下面以设置空速为例，其余参数设置与其相似，具体可参考CC1101底层函数库。设置空速的代码如下：</p>\n<pre class=\"language-C\" data-language=\"C\"><code class=\"language-C\">&#x2F;*!\n *  @brief   空速设置 \n *  @param   value:需要写入MDMCFG3、MDMCFG4寄存器的值,可封装为查表形式来传入索引值\n *&#x2F;\nvoid CC1101_SetDataRate(INT16U value)\n&#123;\n    INT8U mask;\n    mask &#x3D; CC1101_ReadRegister(CC1101_MDMCFG4);&#x2F;&#x2F;读取MDMCFG4寄存器的值\n    mask &amp;&#x3D; 0xF0;\n    mask |&#x3D; 0x0F &amp; (value &gt;&gt; 8);\n    CC1101_WriteRegister(CC1101_MDMCFG4,mask);\n    CC1101_WriteRegister(CC1101_MDMCFG3,value &amp; 0xFF);\n&#125;</code></pre>\n<p>如下图，这是将空速设置为1.2kbps，接收滤波器带宽设置为58KHz时，MDMCFG4、MDMCFG3寄存器的值的显示情况（红框部分）。</p>\n<p><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/img/20220221140556.png\" alt=\"\"></p>\n<h5 id=\"②发送部分\">②发送部分</h5>\n<p>实现射频发送功能的流程图如下：</p>\n<p><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/img/20220221141806.png\" alt=\"CC1101_Tx流程\"></p>\n<h5 id=\"③接收部分\">③接收部分</h5>\n<p>实现射频接收功能的流程图如下：</p>\n<p><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/img/20220221143645.png\" alt=\"CC1101_Rx流程\"></p>\n<p>开发人员可根据产品需求，对简单收发通信进行扩展，以及利用芯片的特性去实现一些复杂的应用，例如LBT，WOR等。</p>\n<h3 id=\"三、总结\">三、总结</h3>\n<p>以上就是我结合CC1101的数据手册以及使用CC1101开发的研发笔记，文中若有出错之处，望大家指正出来，一起共同交流！</p>\n","categories":["技术"],"tags":["射频开发"]},{"title":"Hexo-Fluid主题美化-添加网站运行时长","url":"//post/2/","content":"<p>Fluid 1.8.4版本以上支持自定义页脚内容。</p>\n<p>需要在主题配置中的<code>footer：content</code>添加：</p>\n<pre class=\"language-markup\" data-language=\"markup\"><code class=\"language-markup\">footer:\n  content: '\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://hexo.io<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">target</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>_blank<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>nofollow noopener<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>Hexo<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>iconfont icon-love<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>i</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://github.com/fluid-dev/hexo-theme-fluid<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">target</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>_blank<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>nofollow noopener<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>Fluid<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 0.85rem</span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>timeDate<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>载入天数...<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>times<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>载入时分秒...<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/js/duration.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  '</code></pre>\n<p><code>content</code> 前三行是fluid原有的页脚内容，建议不要删除，用于向更多的人推广主题。</p>\n<p>在博客目录下创建<code>source/js/duration.js</code></p>\n<pre class=\"language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">/** 计时起始时间，自行修改 **/</span>\n  <span class=\"token keyword\">var</span> start <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2020/01/01 00:00:00\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> now <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    now<span class=\"token punctuation\">.</span><span class=\"token function\">setTime</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">250</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    days <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>now <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000</span> <span class=\"token operator\">/</span> <span class=\"token number\">60</span> <span class=\"token operator\">/</span> <span class=\"token number\">60</span> <span class=\"token operator\">/</span> <span class=\"token number\">24</span><span class=\"token punctuation\">;</span>\n    dnum <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>days<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    hours <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>now <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000</span> <span class=\"token operator\">/</span> <span class=\"token number\">60</span> <span class=\"token operator\">/</span> <span class=\"token number\">60</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token number\">24</span> <span class=\"token operator\">*</span> dnum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    hnum <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>hours<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>hnum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      hnum <span class=\"token operator\">=</span> <span class=\"token string\">\"0\"</span> <span class=\"token operator\">+</span> hnum<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    minutes <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>now <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000</span> <span class=\"token operator\">/</span><span class=\"token number\">60</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token number\">24</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> dnum<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token number\">60</span> <span class=\"token operator\">*</span> hnum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mnum <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>minutes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>mnum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      mnum <span class=\"token operator\">=</span> <span class=\"token string\">\"0\"</span> <span class=\"token operator\">+</span> mnum<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    seconds <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>now <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token number\">24</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> dnum<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> hnum<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token number\">60</span> <span class=\"token operator\">*</span> mnum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    snum <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span>seconds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>snum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      snum <span class=\"token operator\">=</span> <span class=\"token string\">\"0\"</span> <span class=\"token operator\">+</span> snum<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"timeDate\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">\"本站安全运行&amp;nbsp\"</span><span class=\"token operator\">+</span>dnum<span class=\"token operator\">+</span><span class=\"token string\">\"&amp;nbsp天\"</span><span class=\"token punctuation\">;</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"times\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> hnum <span class=\"token operator\">+</span> <span class=\"token string\">\"&amp;nbsp小时&amp;nbsp\"</span> <span class=\"token operator\">+</span> mnum <span class=\"token operator\">+</span> <span class=\"token string\">\"&amp;nbsp分&amp;nbsp\"</span> <span class=\"token operator\">+</span> snum <span class=\"token operator\">+</span> <span class=\"token string\">\"&amp;nbsp秒\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span>update<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>**注意：**需要将计时起始时间改为自己的时间。</p>\n<h4 id=\"（从2022-8-15起）本网站现已从Fluid主题更换为Next主题。\">（从2022.8.15起）本网站现已从Fluid主题更换为Next主题。</h4>\n","categories":["技术"],"tags":["Hexo主题美化"]},{"title":"链表学习笔记----双指针技巧","url":"//post/4/","content":"<h3 id=\"双指针技巧\">双指针技巧</h3>\n<h4 id=\"一个经典问题\">一个经典问题</h4>\n<blockquote>\n<p>给定一个链表，判断链表中是否有环</p>\n</blockquote>\n<p>我们在链表中使用两个速度不同的指针时会遇到的情况：</p>\n<ol>\n<li>如果没有环，快指针将停在链表末尾。</li>\n<li>如果有环，快指针最终将与慢指针相遇。</li>\n</ol>\n<p>一个安全的选择是每次移动慢指针一步，而移动快指针两步，每一次迭代，快指针将额外移动一步，如果环的长度为M，经过M次迭代后，快指针会多绕环一周，并赶上慢指针。</p>\n<h4 id=\"环形链表\">环形链表</h4>\n<blockquote>\n<p>题目描述：</p>\n<p>给定一个链表的头节点<code>head</code>，返回链表开始入环的第一个节点，如果链表无环，则返回<code>null</code>。</p>\n<p>如果链表中有某个节点，可以通过连续跟踪<code>next</code>指针再次到达，则链表中存在环。为了表示给定链表中的环，使用整数<code>pos</code>来表示链表尾连接到链表中的位置（索引从0开始）。如果<code>pos</code>是<code>-1</code>，则在该链表中没有环。</p>\n<p>注意：pos不作为参数进行传递，仅仅是为了标识链表的实际情况。不允许修改链表。</p>\n</blockquote>\n<h5 id=\"方法一：哈希表\">方法一：哈希表</h5>\n<p><strong>思路与算法：</strong> 遍历链表中的每个节点，并将它记录下来；一旦遇到了此前遍历过的节点，就可以判定链表中存在环。借助哈希表可以实现。</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">hashTable</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> key<span class=\"token punctuation\">;</span>\n    UT_hash_handle hh<span class=\"token punctuation\">;</span> <span class=\"token comment\">/*makes this structure hashable*/</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">hashTable</span><span class=\"token operator\">*</span> hashTable<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">hashTable</span><span class=\"token operator\">*</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> pkey<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">hashTable</span><span class=\"token operator\">*</span> tmp<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">HASH_FIND_PTR</span><span class=\"token punctuation\">(</span>hashtable<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>pkey<span class=\"token punctuation\">,</span> tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//第一个参数：刚开始定义的空白哈希表;第二个参数：要查找的key值;第三个参数：新建的指针容器</span>\n    <span class=\"token keyword\">return</span> tmp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> pkey<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">hashTable</span><span class=\"token operator\">*</span> tmp <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">hashTable</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    tmp<span class=\"token operator\">-></span>key <span class=\"token operator\">=</span> pkey<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">HASH_ADD_PTR</span><span class=\"token punctuation\">(</span>hashtable<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//向哈希表中添加新的key值</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> <span class=\"token function\">detectCycle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> head<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    hashTable <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>head <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//遍历链表中的节点</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//记录节点到哈希表中</span>\n        head <span class=\"token operator\">=</span> head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h6 id=\"复杂度分析\">复杂度分析</h6>\n<ul>\n<li>时间复杂度：$O(N)$,其中$N$为链表中节点的数目。我们需要访问链表中的每一个节点。</li>\n<li>空间复杂度：$O(N)$,其中$N$为链表中节点的数目。我们需要将链表中的每个节点都保存在哈希表中。</li>\n</ul>\n<h5 id=\"方法二：快慢指针\">方法二：快慢指针</h5>\n<p>思路与算法：我们使用两个指针，$fast$与$slow$。它们起始都位于链表的头部。随后，$slow$指针每次向后移动一个位置，而$fast$指针向后移动两个位置。如果链表中存在环，则$fast$指针最终将再次与$slow$指针在环中相遇。</p>\n<p>如下图所示，设链表中环外部分的长度为$a$。$slow$指针进入环后，又走了$b$的距离与$fast$相遇。此时$fast$指针已经走完了环的$n$圈，因此它走过的总距离为$a+n(b+c)+b=a+(n+1)b+nc$.</p>\n<p><img data-src=\"https://hyh1370039199-1313349927.cos.ap-chengdu.myqcloud.com/img/202208291822183.png\" alt=\"\"></p>\n<p>根据题意，任意时刻，$fast$指针走过的距离都为$slow$指针的$2$倍。因此，可得：<br>\n$$<br>\na+(n+1)b+nc = 2(a+b)<br>\n$$<br>\n即为：<br>\n$$<br>\na=c+(n-1)(b+c)<br>\n$$<br>\n可以发现：从相遇点到入环点的距离加上$n-1$圈的环长，恰好等于从链表头部到入环点的距离。</p>\n<p>即当发现$slow$与$fast$相遇时，在额外使用一个指针$ptr$。起始，它指向链表头部；随后它与$slow$每次向后移动一个位置。最终，它们会在入环点相遇。</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> <span class=\"token function\">detectCycle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> head<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span> <span class=\"token operator\">*</span>slow <span class=\"token operator\">=</span> head<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>fast <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>fast <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tslow <span class=\"token operator\">=</span> slow<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fast<span class=\"token operator\">-></span>next <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n        fast <span class=\"token operator\">=</span> fast<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fast <span class=\"token operator\">==</span> slow<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span> <span class=\"token operator\">*</span>ptr <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>ptr <span class=\"token operator\">!=</span> slow<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#123;</span>\n                ptr <span class=\"token operator\">=</span> ptr<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n                slow <span class=\"token operator\">=</span> slow<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">return</span> ptr<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h6 id=\"复杂度分析-2\">复杂度分析</h6>\n<ul>\n<li>时间复杂度：$O(N)$,其中$N$为链表中节点的数目。在最初判断快慢指针是否相遇时，$slow$指针走过的距离不会超过链表的总长度；随后寻找入环点时，走过的距离也不会超过链表的总长度。因此总的执行时间为$O(N)+O(N)=O(N)$.</li>\n<li>空间复杂度：$O(1)$。我们只使用了$slow、fast、ptr$三个指针。</li>\n</ul>\n","categories":["技术"],"tags":["LeetCode","链表"]},{"title":"链表学习笔记----单链表","url":"//post/3/","content":"<h3 id=\"一、单链表\">一、单链表</h3>\n<p>单链表中的每个节点不仅包含<strong>值</strong>，还包含链接到下一个节点的<strong>引用字段</strong>。通过这种方式，单链表将所有节点按顺序组织起来。</p>\n<img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/202208051436235.png\" alt=\"image-20220805143649613\" style=\"zoom: 25%;\" />\n<h4 id=\"节点结构\">节点结构</h4>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// Definition for singly-linked list.</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">List</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">List</span> <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>List<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>pList<span class=\"token punctuation\">;</span></code></pre>\n<h4 id=\"操作\">操作</h4>\n<ol>\n<li>\n<p><strong>访问操作</strong></p>\n<p>与数组不同，我们无法在常量时间内访问单链表中的随机元素。如果我们想要获得第$i$个元素，我们必须从头节点逐个遍历。我们按<strong>索引</strong>来访问元素平均要花费$O(N)$时间，其中N为链表长度。</p>\n</li>\n<li>\n<p><strong>添加操作</strong></p>\n<p>如果我们想在<strong>给定</strong>的节点$prev$之后添加新值：</p>\n<p>① 使用给定值初始化新节点$cur$。</p>\n<img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/202208051439971.png\" alt=\"image-20220805143816062\" style=\"zoom: 25%;\" />\n<p>② 将$cur$的$next$字段链接到$prev$的下一个节点$next$。</p>\n<img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/202208051439936.png\" alt=\"image-20220805143917288\" style=\"zoom: 25%;\" />\n<p>③ 将$prev$中的$next$字段链接到$cur$。</p>\n<img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/202208051440808.png\" alt=\"image-20220805144017321\" style=\"zoom: 25%;\" />\n<p>$与数组不同$，我们不需要将所有元素移动到插入元素之后。因此可以在$O(1)$时间复杂度中将新节点插入到链表中。</p>\n</li>\n<li>\n<p><strong>删除操作</strong></p>\n<p>从单链表中删除现有节点$cur$：</p>\n<p>①找到$cur$的上一个节点$prev$及其下一个节点$next$。</p>\n<img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/202208081705065.png\" alt=\"image-20220808170543320\" style=\"zoom:25%;\" />\n<p>②接下来链接$prev$到$cur$的下一个节点$next$。</p>\n<img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/202208081707953.png\" alt=\"image-20220808170734707\" style=\"zoom:25%;\" />\n<p>第一步中，需要找出$prev$和$next$。使用$cur$的引用字段很容易找出$next$，但是我们必须从头节点遍历链表，以找出$prev$，它的平均时间是$O(N)$,其中N是链表的长度。因此，删除节点的时间复杂度是$O(N)$。空间复杂度为$O(1)$，只需常量空间来存储指针。</p>\n</li>\n</ol>\n<h4 id=\"设计链表\">设计链表</h4>\n<p>单链表中的节点应该具有两个属性：$val$ 和 $next$。$val$ 是当前节点的值，$next$ 是指向下一个节点的指针/引用。如果要使用双向链表，则还需要一个属性 $prev$ 以指示链表中的上一个节点。假设链表中的所有节点都是 $0-index$ 的。</p>\n<p>在链表类中实现这些功能：</p>\n<p>$get(index)$：获取链表中第 $index$ 个节点的值。如果索引无效，则返回$-1$。<br>\n$addAtHead(val)$：在链表的第一个元素之前添加一个值为 $val$ 的节点。插入后，新节点将成为链表的第一个节点。<br>\n$addAtTail(val)$：将值为 $val$ 的节点追加到链表的最后一个元素。<br>\n$addAtIndex(index,val)$：在链表中的第 $index$ 个节点之前添加值为 $val$  的节点。如果 $index$ 等于链表的长度，则该节点将附加到链表的末尾。如果 $index$ 大于链表长度，则不会插入节点。如果$index$小于$0$，则在头部插入节点。<br>\n$deleteAtIndex(index)$：如果索引 $index$ 有效，则删除链表中的第 $index$ 个节点。</p>\n<h5 id=\"定义链表结构体\">定义链表结构体</h5>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">//定义链表结构体</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">MyLinkedList_t</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> val<span class=\"token punctuation\">;</span><span class=\"token comment\">//值</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">MyLinkedList_t</span> <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span><span class=\"token comment\">//指向下一个节点的指针</span>\n<span class=\"token punctuation\">&#125;</span>MyLinkedList<span class=\"token punctuation\">;</span></code></pre>\n<p><strong>注意：如果在这个struct定义里，直接把next指针定义为<code>MyLinkedList *next</code>就会报错，因为别名<code>MyLinkedList</code>是在结构体定义结束后才可以识别的一个别名；</strong></p>\n<h5 id=\"创建链表\">创建链表</h5>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">//创建链表</span>\nMyLinkedList<span class=\"token operator\">*</span> <span class=\"token function\">myLinkedListCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//使用虚拟头节点作为访问、管理链表的入口</span>\n    MyLinkedList <span class=\"token operator\">*</span>obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>MyLinkedList <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>MyLinkedList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//对虚拟链表头进行初始化，此时真实的链表为空</span>\n    obj<span class=\"token operator\">-></span>val <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    obj<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//返回链表入口</span>\n    <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h5 id=\"在链表头部增加节点\">在链表头部增加节点</h5>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">//在链表头部增加节点</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">myLinkedListAddAtHead</span><span class=\"token punctuation\">(</span>MyLinkedList <span class=\"token operator\">*</span>obj<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    MyLinkedList <span class=\"token operator\">*</span>node <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>MyLinkedList <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>MyLinkedList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    node<span class=\"token operator\">-></span>val <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//将新节点插入至虚拟头节点和原来虚拟头节点下一个节点之间的位置，亦考虑了真实链表为空的情况</span>\n    node<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> obj<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    obj<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h5 id=\"在链表尾部增加节点\">在链表尾部增加节点</h5>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">//在链表尾部增加节点</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">myLinkedListAddAtTail</span><span class=\"token punctuation\">(</span>MyLinkedList <span class=\"token operator\">*</span>obj<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    MyLinkedList <span class=\"token operator\">*</span>node <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>MyLinkedList <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>MyLinkedList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//由于真实链表可能为空，所以标记位置从obj开始</span>\n    MyLinkedList <span class=\"token operator\">*</span>nowList <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">;</span>\n    node<span class=\"token operator\">-></span>val <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n    node<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//一直遍历，直到当前节点的下一个节点为空，当前节点即为尾部节点</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>nowList<span class=\"token operator\">-></span>next <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        nowList <span class=\"token operator\">=</span> nowList<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//将原来的尾部节点的下一个节点指向新节点</span>\n    nowList<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h5 id=\"获取链表中第-index-个节点的值，从0开始\">获取链表中第 $index$ 个节点的值，从0开始</h5>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">myLinkedListGet</span><span class=\"token punctuation\">(</span>MyLinkedList <span class=\"token operator\">*</span>obj<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    MyLinkedList <span class=\"token operator\">*</span>nowList <span class=\"token operator\">=</span> obj<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//处理异常情况，index小于0，真实链表为空</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> nowList <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//进行链表遍历，循环终止条件：cnt位置达到index位置</span>\n    <span class=\"token comment\">//break条件:当前位置节点为空，返回-1</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cnt <span class=\"token operator\">&lt;</span> index<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nowList <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n        nowList <span class=\"token operator\">=</span> nowList<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n        cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//循环结束后，取到了当前位置为index的节点，需判断该点为不为空</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nowList <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> nowList<span class=\"token operator\">-></span>val<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h5 id=\"在链表中的第-index-个节点之前添加值为-val-的节点\">在链表中的第 $index$ 个节点之前添加值为 $val$  的节点</h5>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">myLinkedListAddAtIndex</span><span class=\"token punctuation\">(</span>MyLinkedList <span class=\"token operator\">*</span>obj<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    MyLinkedList <span class=\"token operator\">*</span>nowList <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//如果为负索引或者0，直接头插</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">myLinkedListAddAtHead</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//遍历链表，break条件：cnt位置到达index位置,此时nowList节点位置到达index-1位置</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>nowList<span class=\"token operator\">-></span>next <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cnt <span class=\"token operator\">==</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n\t\tnowList <span class=\"token operator\">=</span> nowList<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\t\tcnt<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//如果不满足该条件，一定是通过nowList->next == NULL跳出循环的，index无效</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cnt <span class=\"token operator\">!=</span> index<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//初始化新节点，将新结点的next节点指向index节点，将index-1位置节点的next节点指向新节点</span>\n\tMyLinkedList <span class=\"token operator\">*</span>node <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>MyLinkedList <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>MyLinkedList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tnode<span class=\"token operator\">-></span>val <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n\tnode<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> nowList<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\tnowList<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h5 id=\"删除链表中的第-index-个节点\">删除链表中的第 $index$ 个节点</h5>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">myLinkedListDeleteAtIndex</span><span class=\"token punctuation\">(</span>MyLinkedList <span class=\"token operator\">*</span>obj<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    MyLinkedList <span class=\"token operator\">*</span>nowList <span class=\"token operator\">=</span> obj<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//处理异常情况 负索引或者真实链表为空，直接退出</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> obj<span class=\"token operator\">-></span>next <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//此时真实链表至少有一个节点，所以可以直接删除第一个</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        obj<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> obj<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//遍历链表，循环终止条件：当前节点为最后一个节点；break条件:当前节点为index位置的前一个节点</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>nowList<span class=\"token operator\">-></span>next <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cnt <span class=\"token operator\">==</span> index <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n        nowList <span class=\"token operator\">=</span> nowList<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n        cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//需满足index位置有节点，且当前节点为index-1位置上的节点，才能进行删除操作</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cnt <span class=\"token operator\">==</span> index <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> nowList<span class=\"token operator\">-></span>next <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        nowList<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> nowList<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h5 id=\"实现free接口，释放已经申请的内存\">实现free接口，释放已经申请的内存</h5>\n<p>一个链表，每一个节点都需要释放。但是如果我们直接从第一个节点释放，那么后面的next就无法取到了，链断掉以后，剩下的内存就再也无法访问。所以链表释放内存必须从最后一个开始释放，在释放倒数第二个…依次释放。但是我们遍历链表，从最后一个节点释放，但是链表是单向的，我们无法通过链表取到它上一个节点。所以需要<strong>递归</strong>。</p>\n<p>每次只要检查到当前节点还有下一个节点，就先去释放下一个节点，直至找到最后一个节点，然后逐层往回走，最后释放整个链表。</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">//递归函数</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">myNodeFree</span><span class=\"token punctuation\">(</span>MyLinkedList <span class=\"token operator\">*</span>node<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-></span>next <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">myNodeFree</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-></span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        node<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">myLinkedListFree</span><span class=\"token punctuation\">(</span>MyLinkedList <span class=\"token operator\">*</span>obj<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">myNodeFree</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n","categories":["技术"],"tags":["LeetCode","链表"]},{"title":"硬件设计学习笔记（记录平时学习到的知识点）","url":"//post/6/","content":"<h2 id=\"（记录平时学习到的知识点，一直更新-）\">（记录平时学习到的知识点，一直更新~）</h2>\n<h3 id=\"系统框图\">系统框图</h3>\n<p>系统框图是展示硬件设计思路的一张图，复杂的系统必须有系统框图。</p>\n<p>其包含以下几个方面：</p>\n<ol>\n<li>**整机接口：**接口名称、数量、接口信号</li>\n<li>**芯片方案：**CPU、各外设芯片。应绘制出各模块最小系统框图。</li>\n<li><strong>电源树</strong>：各级电源转换关系，电流流向及路径。</li>\n</ol>\n<h3 id=\"datasheet阅读\">datasheet阅读</h3>\n<p>阅读数据手册更应该是搜索，是带着目的去读。<strong>需求—位置—提取目标内容</strong></p>\n<p>技巧：</p>\n<ol>\n<li>尽量知道datasheet的内容排布，大多数手册都是有目录的，可以从目录跳转，提高搜索效率。</li>\n<li>搜索，CTRL+F</li>\n<li>要注意一些note的标注，有可能有特殊的设计用法，要格外注意。</li>\n<li>选用最新的手册，避免漏掉一些勘误。</li>\n</ol>\n<h3 id=\"SOC最小系统\">SOC最小系统</h3>\n<p>单片机最小系统是指单片机可以正常执行程序的最简工作环境。</p>\n<p><strong>最小系统的组成：</strong></p>\n<ul>\n<li>\n<p>电源：注意去耦电容的选择、电压供电范围、电流大小、时序</p>\n</li>\n<li>\n<p>复位：<img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/202208072219451.png\" alt=\"image-20220807213434574\" style=\"zoom:33%;\" /></p>\n<p>在上电瞬间，电容充电，RESET会出现短暂的低电平，该低电平持续时间由电阻和电容共同决定，计算方式：$t = 1.1RC$</p>\n</li>\n<li>\n<p>时钟：$32.768KHz$，$32768 = 2^{15}$  芯片分频设置寄存器通常为2的次幂形式。</p>\n</li>\n<li>\n<p>调试接口</p>\n</li>\n<li>\n<p>启动</p>\n</li>\n</ul>\n<h3 id=\"逻辑电平\">逻辑电平</h3>\n<p><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/202208072114711.png\" alt=\"\"></p>\n<h3 id=\"建立时间和保持时间\">建立时间和保持时间</h3>\n<img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/202208072121091.png\" alt=\"image-20220807212121640\" style=\"zoom: 50%;\" />\n<ul>\n<li>建立时间：在时钟沿到来之前，输入数据需要提前准备好的时间。</li>\n<li>保持时间：在时钟沿触发之后，输入数据需要保持不变的时间。</li>\n</ul>\n","categories":["技术"],"tags":["硬件设计"]},{"title":"硬件设计学习笔记 ----（元器件系列）","url":"//post/5/","content":"<h3 id=\"元器件选型通则\">元器件选型通则</h3>\n<p>选型原则：</p>\n<ul>\n<li>复用性：尽量复用以前验证过的项目物料，减少风险，同时不用管理额外零件，还可以处理库存。</li>\n<li>成熟性：要是被广泛使用验证过的成熟方案，且生命周期良好，无EOL(停产)。最好有丰富的参考设计资料。</li>\n<li>适配性：在设计中电气参数/环境参数满足设计需求，降额等，性能满足，空间无干涉。</li>\n<li>替代性：价格成本，交付周期，无EOL，合适的供应商。成本很重要，料也得能买到，买到还能用的久~</li>\n<li>归一性：在出货量大的产品中，尽量减少物料种类。</li>\n</ul>\n<h3 id=\"替代料评估\">替代料评估</h3>\n<ol>\n<li>通过采购、元件工程师或是自己找到相关的替代厂商。</li>\n<li>了解此物料涉及到的参数</li>\n<li>此料导入系统后涉及到的验证范围（信号、功能？）</li>\n<li>时间精力上能否让原厂进行验证，给出报告，EE负责评审。</li>\n</ol>\n<h3 id=\"电阻\">电阻</h3>\n<h4 id=\"基本原理及分类\">基本原理及分类</h4>\n<ol>\n<li>定义式：欧姆定律$R = U/I$。（$U$表示电压，$I$表示电流）。</li>\n<li>$R=ρL/S$（$ρ$表示电阻的电阻率，是由其本身性质决定，$L$代表电阻的长度，$S$表示电阻的横截面积）</li>\n<li>电阻串联：$R=R1+R2+R3+…+Rn$。($R1…Rn$表示$n$个电阻，电阻值是由其本身性质决定)。</li>\n<li>电阻并联：$1/R = 1/R1+1/R2+1/R3+…+1/Rn$。($R1…Rn$表示$n$个电阻，电阻值是由其本身性质决定)。</li>\n<li>与电功率相关公式：$R=U<sup>2/P$;$R=P/I</sup>2$。（$U$表示电压，$I$表示电流，$P$表示电功率）。</li>\n<li>与电能（电热）相关公式：$R=U<sup>2t/W$;$R=W/I</sup>2t$。（$U$表示电压，$I$表示电流，$t$表示时间，$W$表示电热）。</li>\n</ol>\n<p>特点：</p>\n<div align=center><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/202208082145821.png\"  style=\"zoom: 50%;\" /></div>\n<h4 id=\"参数\">参数</h4>\n<p>阻值：</p>\n<div align=center><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/202208082137615.png\"  style=\"zoom: 50%;\" /></div>\n<p>封装：</p>\n<p>inch notation : 0402 、0603、0805、0201</p>\n<p>功率：</p>\n<div align=center><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/202208082139764.png\"  style=\"zoom:50%;\" /></div>\n<div align=center><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/202208082143472.png\"  style=\"zoom:33%;\" /></div>\n<p>精度：</p>\n<div align=center><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/202208082147011.png\"  style=\"zoom:50%;\" /></div>\n<p>温漂：</p>\n<p>$1PPM/°C$是指电阻温度每变化一摄氏度，电阻阻值变化一百万之一。</p>\n<div align=center><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/202208082158501.png\"  style=\"zoom:50%;\" /></div>\n<h4 id=\"应用与选型\">应用与选型</h4>\n<p>应用：分压、限流、上拉、下拉电阻、匹配电阻、0欧电阻</p>\n<p><strong>上拉（Pull Up）或下拉（Pull Down）电阻的作用：</strong></p>\n<p>将状态不确定的信号线通过一个电阻将其箝位至高电平（上拉）或低电平（下拉）</p>\n<p>高有效的使能控制信号（EN），希望电路系统在上电后应处于无效状态，则会使用下拉电阻。</p>\n<p>低有效的复位控制信号（RST），希望上电复位后处于无效状态，则应使用上拉电阻。</p>\n<h5 id=\"上下拉电阻之补充：开漏、开集、推挽\">上下拉电阻之补充：开漏、开集、推挽</h5>\n<p><a href=\"https://www.zhihu.com/question/28512432/answer/41217074\">如何正确的理解漏极开路输出跟推挽输出？ - 知乎 (zhihu.com)</a></p>\n<h4 id=\"0欧电阻\">0欧电阻</h4>\n<p>零欧姆电阻又称为跨接电阻器，是一种特殊用途的电阻（JUMPER）。零欧电阻并非真的阻值为0，<strong>特指阻值&lt;50mΩ的贴片电阻</strong>，其在电路中的作用等同于阻值小于50mΩ的一截导线，代替跨接线英文全称为THICK FILM CHIP JUMPER RESISTOR.</p>\n<p>0欧电阻作用：跳线 （COLAY用法）、预留，视回板后测试情况调整、增加测试点、PCB的跨接、不同GND的区分</p>\n<h3 id=\"电容\">电容</h3>\n<h4 id=\"基本原理及公式\">基本原理及公式</h4>\n<div align=center><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/202208182010085.png\" style=\"zoom:50%;\" /></div>\n<ol>\n<li>定义式：$C=Q/U$。（一个电容器，如果带1库伦的电量时，两级间的电势差为1V,那么这个电容器的电容为1F。）</li>\n<li>决定式：$C=\\epsilon S/d$ (对平行板电容器，$\\epsilon$为极板间介质的介电常数，S为极板面积，d为极板间的距离)</li>\n<li>电容串联：$1/C = 1/C1+1/C2+…+1/C_n$</li>\n<li>电容并联：$C = C1+C2+C3+…+C_n$</li>\n</ol>\n<p><strong>基本特性：</strong></p>\n<ol>\n<li>\n<p>储能</p>\n</li>\n<li>\n<p>隔直通交：直流电，<strong>当直流电源的电势与电容电势相等才起到隔直的作用</strong>，在充电过程中并不起到隔直作用。</p>\n</li>\n<li>\n<p>频率特性：</p>\n</li>\n</ol>\n<div align=center><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/202208182036289.png\" /></div>\n<h4 id=\"分类及特点\">分类及特点</h4>\n<div align=center><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/202208182042978.png\"  /></div>\n<h4 id=\"参数-2\">参数</h4>\n<ul>\n<li>\n<p><strong>容量：</strong> 贴片电容规格一般常见封装尺寸为0201、0402、0603、0805、1206.容量范围一般在0.5pF~1uF。</p>\n<p>1210、1812、1825、2225、3012、3035为大规格贴片电容，容量范围在1uF~100uF。</p>\n<p>电容的基本单位是$F$, $1F=10^{-6}uF= 10^{-9}nF =10^{-12}pF$</p>\n</li>\n<li>\n<p><strong>封装：</strong> 与贴片电阻封装一致。</p>\n</li>\n<li>\n<p><strong>额定电压：</strong> 考虑降额：一般至少留出30%余量。钽电容至少留50%。（GJB/Z 35-93 元器件降额准则）</p>\n</li>\n<li>\n<p><strong>ESR：</strong> 影响纹波大小</p>\n</li>\n</ul>\n<div align=center><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/202208182102616.png\"  /></div>\n<div align=center><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/202208182107125.png\"  /></div>\n<ul>\n<li><strong>精度与温度特性：</strong></li>\n</ul>\n  <div align=center><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/202208182059537.png\"  /></div>\n<h4 id=\"应用与选型-2\">应用与选型</h4>\n<ul>\n<li>去耦：去耦电容用于将频率高的噪声等交流成分接地释放（旁路作用），还能起到向IC瞬间供应电流，抑制电源电压变动的作用。<strong>去耦电容应靠近管脚摆放。</strong> 不同电容的搭配可以延伸到电源完整性PI和电源分配网络PDN的概念。</li>\n<li>耦合：阻断直流电流仅让信号成分（交流电流）通过。例如AC耦合电容（改善噪声容限作用）。</li>\n</ul>\n<blockquote>\n<p>​\t\tTYPE-C协议要求在SSTXP/N线上增加100nF交流耦合电容，AC耦合电容建议使用0201封装，更低的ESR和ESL，也可减少线路上的阻抗变化。</p>\n<p>​\t\tSATA接口的TXP/N,RXP/N差分信号上串接的10nF交流耦合电容，AC耦合电容建议使用0201封装，更低的ESR和ESL，也可减少线路上的阻抗变化。</p>\n<p>​\t\tPCIe2.0接口的TXP/N差分信号上串接的100nF交流耦合电容，AC耦合电容建议使用0201封装，更低的ESR和ESL，也可减少线路上的阻抗变化。</p>\n<p>​        对于AC耦合电容的放置位置建议遵循design guideline（规范）</p>\n<p>​\t\t没有参照规范，如IC到IC，请靠近接收端放置；如IC到连接器，请靠近连接器放置</p>\n<p>​\t\t尽可能选择小的封装尺寸，减小阻抗不连续。</p>\n<p>​        核心：AC耦合电容一般是高速信号阻抗不连续的点。</p>\n<p>​        可以用ADS等高速信号设计仿真软件来仿真</p>\n</blockquote>\n<ul>\n<li>平滑：使电压变化变得平滑</li>\n<li>储能：蓄电，利用储存的电荷。例如一次性照相机的闪光灯电路。</li>\n<li>滤波：RC无源一阶、二阶滤波；运放有源滤波</li>\n</ul>\n<h3 id=\"电感\">电感</h3>\n<p><strong>两个现象、一个定律</strong>：电生磁、动磁生电、楞次定律（来拒去留，增反减同）：感应电流的磁场总要阻碍引起感应电流的磁通量的变化。</p>\n<p><strong>电感对电流的作用可以看成一种惯性。</strong></p>\n<h4 id=\"基本原理及分类-2\">基本原理及分类</h4>\n<p>电感是线圈的别名。电感性即线圈内流过的电流产生磁场，穿过线圈的磁场产生电流的性质。</p>\n<p>定义式：$\\varphi = Li$   根据法拉第电磁感应定律，当通过线圈的磁通发生变化，在线圈两端就要产生感应电动势，感应电动势的大小正比于磁通的变化率，即有下面公式：<br>\n$$<br>\n\\epsilon = -L\\frac{di}{dt}<br>\n$$<br>\n公式中负号表示感应电动势是要阻止电流变化。并且能得出两个结论：</p>\n<ol>\n<li>电感上的电流不能突变。</li>\n<li>对于直流电，电感两端相当于短路。</li>\n</ol>\n<p>电感的单位为H（亨利），符号是L。L=1H的定义是：电流以1A/s的速率变化，如果在电感上产生的感应的电动势的电压是1V，这种电感就是1H。</p>\n<blockquote>\n<p>在无线电和通信设备中，常见的电感单位是nH,应对MHz级别的电流变化；</p>\n<p>在电源和供电设备中，常见的电感单位是uH，应对KHz级别的电流变化；</p>\n<p>在音频设备中，常见的电感单位是mH，应对数百Hz~2KHz的电流变化。</p>\n</blockquote>\n<p>电感与电阻的串并联公式一致。</p>\n<h5 id=\"电感的等效模型\">电感的等效模型</h5>\n<div align=center><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/202208191822014.png\" style=\"zoom:50%;\" /></div>\n<h5 id=\"电感VS电容\">电感VS电容</h5>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\">电感（L）</th>\n<th style=\"text-align:center\">电容（C）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">电压电流关系</td>\n<td style=\"text-align:center\">$V_L(t) = -L\\frac{di}{dt}$</td>\n<td style=\"text-align:center\">$i(t)=C\\frac{dv}{dt}$</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">不能突变</td>\n<td style=\"text-align:center\">电流不能突变</td>\n<td style=\"text-align:center\">电压不能突变</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">时间常数</td>\n<td style=\"text-align:center\">$\\tau  = L/R$</td>\n<td style=\"text-align:center\">$\\tau  = RC$</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">电压电流延迟</td>\n<td style=\"text-align:center\">电流落后电压90°相位</td>\n<td style=\"text-align:center\">电压落后电流90°相位</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">阻抗</td>\n<td style=\"text-align:center\">$X_L = 2\\pi fL$</td>\n<td style=\"text-align:center\">$X_L = \\frac{1}{2 \\pi fC}$</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">直流电流</td>\n<td style=\"text-align:center\">通过</td>\n<td style=\"text-align:center\">不让通过</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">交流电流</td>\n<td style=\"text-align:center\">越是高频越不易通过</td>\n<td style=\"text-align:center\">越是高频越易于通过</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"电感的分类\">电感的分类</h5>\n<img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/202208191835081.png\"  style=\"zoom: 67%;\" />\n<h4 id=\"参数-3\">参数</h4>\n<ul>\n<li>\n<p><strong>电感值及精度：</strong> 电感的标称值通常是在没有外加直流偏置的条件下，以一定频率测得的。一般DC用电感标称值精度在±20%或±30%。</p>\n</li>\n<li>\n<p><strong>额定电流：</strong> 电感额定电流，是饱和电流和温升电流的小者。选择时留出20%裕量。</p>\n</li>\n<li>\n<p><strong>直流电阻（DCR）：</strong> 电感的直流电阻值，由<strong>绕线圈数</strong>和<strong>线的直径</strong>决定。导线的匝数越多，线长越长，因此DCR越大。<strong>同等电感量，额定电流越大，导线会越粗，DCR越小</strong>。</p>\n</li>\n<li>\n<p><strong>品质因数：</strong> Q是Quality Factor（品质因数）的简称。线圈会顺利流过直流电流，但会对交流电流产生电阻。这称为感抗，交流频率越高则感抗越大。绕组虽是导体，但有一定的电阻成分R。这个电阻成分与对应频率的电感之比称为损耗系数。其倒数就是Q值。<br>\n$$<br>\nQ = \\frac{2\\pi fL}R<br>\n$$<br>\nQ值越高，损耗越低，对于高频电感器而言，其具有十分优异的特性。</p>\n</li>\n<li>\n<p><strong>自谐振频率（SRF）：</strong> 由于电感中的寄生电容，电感和自身的寄生电容有谐振频率，这个频率处电感阻抗最大，超过谐振频点阻抗开始下降。</p>\n</li>\n</ul>\n<div align = \"center\"><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/202208191857723.png\" style=\"zoom:50%;\" /></div>\n<p>​\t\t如上图，在5MHz之前的电感值的曲线较为平坦，电感值几乎可视为常数。在高频段因寄生电容与电感所产生的谐振，电感值会上升，此谐振频率称为自我谐振频率(self-resonant \t\t\t     frequency)，通常需远高于工作频率。</p>\n<h4 id=\"应用\">应用</h4>\n<ul>\n<li>储能：线圈积蓄能量，稳定电压。计算机或嵌入式产品设计中，对于功率较大的电源，通常会采用降压的开关电源设计方案。</li>\n<li>滤波：线圈整理信号，除去干扰信号，只让需要的信号通过。<strong>滤波器就是特定频率范围呈现低阻抗，在该范围以外呈现高阻。</strong></li>\n</ul>\n<blockquote>\n<p>滤波分有源、无源，其设计计算需要结合传递函数。这里推荐滤波器设计网页以及书籍。</p>\n<p>《新概念模拟电路》、《基于运算放大器和模拟集成电路的电路设计》</p>\n<p>http:/sim.okawa-denshi.jp/en/Fkeisan.htm<br>\nhttps:/webench.ti.com/filter-design-tool/filter-type</p>\n</blockquote>\n<p>注意电感有DCR，注意其直流电阻引起的压降，需要利用IR drop analysis on a PCB仿真确认电压。</p>\n","categories":["技术"],"tags":["硬件设计"]},{"title":"To do List","url":"//post/7/","content":"<h3 id=\"To-Do-List（10-3-10-9）\">To Do List（10.3~10.9）</h3>\n<h4 id=\"个人提升\">个人提升</h4>\n<ul>\n<li></li>\n</ul>\n<h4 id=\"工作\">工作</h4>\n<ul>\n<li></li>\n</ul>\n","categories":["技术"],"tags":["TODO"]},{"title":"《别让坏情绪，赶走好运气》读书笔记","url":"//post/8/","content":"<h3 id=\"（前言）控制情绪的秘诀\">（前言）控制情绪的秘诀</h3>\n<ul>\n<li>\n<p>认识到“自己比别人性子急”，承认自己性格的不足，就可以制怒。</p>\n</li>\n<li>\n<p>不认为自己的想法就是绝对真理，承认其他的可能性，不过分执拗于对错就不会有精神压力。</p>\n</li>\n<li>\n<p>重视结果，只要最后对自己有益即可。这样考虑的话，就不会抗拒偶尔向人低头服输。</p>\n</li>\n</ul>\n<h3 id=\"（一）心理和大脑的机能\">（一）心理和大脑的机能</h3>\n<p>人有情绪再正常不过。但如果不会控制，那就只能沦为情绪动物。</p>\n<ol>\n<li><strong>控制情绪，克制自己</strong>：任怒气冲昏头脑、出口伤人，会使人际关系恶化。</li>\n<li><strong>不要受情绪左右</strong>：有负面情绪时，考虑是否可以把引发负面情绪的起因变为机会。</li>\n<li><strong>有没有面露不悦</strong>：容易怒形于色的人要养成察觉自己情绪的习惯。</li>\n<li><strong>知足</strong>：知足会让我们内心安宁。</li>\n<li><strong>不介意“别人会怎么想”</strong>：如果总想着“不想被别人讨厌”，就会受别人左右。</li>\n<li><strong>明白“过去无法改变”</strong>：不要再为过去的事烦恼，以后多注意即可。</li>\n<li><strong>“你担心的事不会发生”</strong>：你担心的事大部分都不会发生，对于实在想不出办法的问题无需纠结。</li>\n<li><strong>不要对他人抱有负面情绪</strong>：情绪有反弹的规律，负面情绪只会得到负面响应。</li>\n<li><strong>任何工作都要积极面对</strong>：被安排费力不讨好的工作时，情绪化很明显，就仿佛一直和这些工作有不解之缘。</li>\n<li><strong>凡事预设“多个答案”</strong>：世上有各种各样的真理。心胸开阔，让自己的价值观多元化。</li>\n</ol>\n<h4 id=\"不能掌控情绪的人也无法掌控自己的人生\">不能掌控情绪的人也无法掌控自己的人生</h4>\n<ul>\n<li>感情外露的人更招人喜欢。</li>\n<li>喜怒哀乐会让人充满朝气。</li>\n<li>不能控制自己的情绪会使人际关系恶化。（<font color=#FF000>表达情绪本身并无不妥，重要的是不要做出不当行为</font>）</li>\n</ul>\n<h4 id=\"不要被情绪左右，而要让它为己所用\">不要被情绪左右，而要让它为己所用</h4>\n<ul>\n<li>有负面情绪也没有关系，情绪可以赋予行动以动机。</li>\n<li>可以把负面情绪变成机会，<strong><font color=#FF000>负面情绪是进步的原动力</font></strong>。</li>\n<li>如果被情绪支配，事情就会不顺利。</li>\n</ul>\n<h4 id=\"控制不了情绪的人满脸写着“不高兴”\">控制不了情绪的人满脸写着“不高兴”</h4>\n<ul>\n<li>控制不了自己情绪的人会怒形于色，会形成恶性循环。</li>\n<li>怒形于色只会让自己吃亏。</li>\n<li>养成先弄清楚自己情绪的习惯很重要。（<font color=#FF000>每天独处时反省回顾一下</font>）</li>\n</ul>\n<h4 id=\"情感需求得不到满足的人容易生气\">情感需求得不到满足的人容易生气</h4>\n<ul>\n<li>被周围人忽视的人容易生气。</li>\n<li>精神富足、经济宽裕的人很少会生气。</li>\n<li><font color=#FF000><strong>重要的是置身于任何环境都能知足</strong></font>。</li>\n</ul>\n<h4 id=\"委屈自己讨好别人的人快乐不起来\">委屈自己讨好别人的人快乐不起来</h4>\n<ul>\n<li>人越想着“不想被人讨厌”，越会迁就别人。</li>\n<li>迁就别人就会违背自己的意愿。</li>\n<li>违背自己的意愿就会给自己添堵。</li>\n</ul>\n<h4 id=\"如果你一直情绪低落，要警惕是否陷入了自责的泥潭\">如果你一直情绪低落，要警惕是否陷入了自责的泥潭</h4>\n<ul>\n<li>想起过去发生的事，情绪低落难以释怀。(<font color=#FF000>人的情绪变化是有规律的，就像箭射出后的运动轨迹，先骤然上升，到一定程度后会慢慢下降，最终消失。</font>)</li>\n<li>情绪久久不能释怀，可能会生病。</li>\n<li>明白“过去无法改变”很重要。（过去无法改变，但对待过去的做法、态度可以改变。）</li>\n</ul>\n<h4 id=\"担心也许只是因为你想多了\">担心也许只是因为你想多了</h4>\n<ul>\n<li>担心的事越想越担心。</li>\n<li>对于想不出办法的事不要过多纠结。</li>\n<li>就算有一些风险也可以尝试放手去做。</li>\n</ul>\n<p><strong>战胜担心的要点：</strong></p>\n<p>1.先担心发生概率高的事情。</p>\n<p>2.相信发生概率低的事“几乎不会发生”。</p>\n<p>3.如果有些许风险，不要害怕，尽管去做。</p>\n<h4 id=\"负面情绪会反弹回自己身上\">负面情绪会反弹回自己身上</h4>\n<ul>\n<li>“无缘无故看着就不喜欢的人”增加，是自己的问题。</li>\n<li>人的情绪有互相反弹的规律。（正面情绪会得到正面响应，负面情绪则会得到负面响应。投射出的情绪越强，接受到的反弹也会越强。）</li>\n<li>控制自己的负面情绪很重要。</li>\n</ul>\n<h4 id=\"为什么费力不讨好的工作总是落到自己的头上\">为什么费力不讨好的工作总是落到自己的头上</h4>\n<ul>\n<li>悲观的人容易被安排做费力不讨好的工作。</li>\n<li>乐观的人做费力不讨好的工作不会表现出不快。</li>\n<li>乐观的人容易得到大好机会。</li>\n</ul>\n<h4 id=\"悲观的人会认为“答案只有一个”\">悲观的人会认为“答案只有一个”</h4>\n<ul>\n<li>\n<p>将自己的想法强加于人会让人不快。</p>\n</li>\n<li>\n<p>正常答案绝对不止一个。</p>\n</li>\n<li>\n<p>认同多元化的思维方式和价值观很重要。</p>\n</li>\n</ul>\n<h3 id=\"（二）摆脱感情用事的思考术\">（二）摆脱感情用事的思考术</h3>\n<p>杜绝感情用事，回归理性思考。</p>\n<ol>\n<li>**找到会让自己不高兴的因素：**任何人都会有容易让自己不高兴的因素，要找到这些因素。</li>\n<li>**认为完成80%就合格：**如果非要苛求100%完成，会很痛苦。若是能退一步，觉得完成80%就可以的话，人就会轻松。</li>\n<li>**不愿意的时候说“NO”：**不愿意的时候尝试鼓起勇气说“NO”</li>\n<li>**每周给自己准备三次奖励：**给自己准备奖励会让自己心情很好，很小的奖励也OK。</li>\n<li>**认为“这样的自己就挺好”：**爱自己的人会产生安心感，情绪也会积极。</li>\n<li>**任何时候都要表扬自己：**无论结果如何，都要表扬自己。心情会由此好起来。</li>\n<li>**相信自己会进步：**无论年龄多大都可以进步。要坚信“自己会进步”！</li>\n<li>**建立支撑自己的支柱：**如果多建立几根支柱，即使其中一根支柱倒塌，也能保持从容淡定。</li>\n</ol>\n<h4 id=\"首先要意识到自己的性格有不足之处\">首先要意识到自己的性格有不足之处</h4>\n<ul>\n<li>不高兴的人容易对别人的行为感到烦躁。</li>\n<li>任何人都会有反应过激的时候。</li>\n<li>承认自己的性格有不足之处可以让自己冷静。</li>\n</ul>\n<h4 id=\"抛开完美主义，门槛设定在“合适的高度”\">抛开完美主义，门槛设定在“合适的高度”</h4>\n<ul>\n<li>不可能一切都完美</li>\n<li>如果过分要求完美容易不快乐。</li>\n<li>完成80%就很好。</li>\n</ul>\n<h4 id=\"要有勇气说“NO”\">要有勇气说“NO”</h4>\n<ul>\n<li>很多人生活中都习惯勉强自己。</li>\n<li>难以开口说“NO”，所以会不高兴。</li>\n<li>尝试鼓起勇气说“NO”很重要。</li>\n</ul>\n<h4 id=\"给自己设定奖励\">给自己设定奖励</h4>\n<ul>\n<li>每周准备三个奖励给自己。</li>\n<li>想到有让人开心的奖励等着自己，会心情大好。</li>\n<li>在日常生活的细微之处重新发现乐趣。</li>\n</ul>\n<h4 id=\"想要开开心心过生活，最重要的就是爱自己\">想要开开心心过生活，最重要的就是爱自己</h4>\n<ul>\n<li>爱自己会让人产生安心感。</li>\n<li>在日常生活中感到幸福就能够爱自己。</li>\n<li>建立良好的人际关系，得到周围的爱很重要。</li>\n</ul>\n<h4 id=\"给自己施魔法，养成每天表扬自己的习惯\">给自己施魔法，养成每天表扬自己的习惯</h4>\n<ul>\n<li>人在得到正面肯定时容易相信这就是事实。</li>\n<li>表扬自己会让自己高兴。</li>\n<li>无论结果如何，表扬自己很重要，这样情绪会变得积极。</li>\n</ul>\n<h4 id=\"永远相信“明天的自己会更进一步”\">永远相信“明天的自己会更进一步”</h4>\n<ul>\n<li>一切事物都是发展变化的。</li>\n<li>相信自己的人能朝着梦想和目标的方向努力</li>\n<li>尝试单纯地相信自己的进步意愿，简单地相信自己还有无限可能。</li>\n</ul>\n<h4 id=\"多建立几根支撑自己的支柱\">多建立几根支撑自己的支柱</h4>\n<ul>\n<li>如果支撑自己的支柱只有一根，你会很不稳定。</li>\n<li>什么样的支柱都OK</li>\n<li>发现自己擅长的领域很重要。我认为有过成功经历的人做其他事情也能成功。</li>\n</ul>\n<h3 id=\"（三）绝不能这么做！\">（三）绝不能这么做！</h3>\n<p>没经大脑顺手就做了–这种习惯会带来负面情绪。</p>\n<ol>\n<li><strong>“说了也无济于事”的话不要说</strong>：说出嫉妒、仇恨的言论只会让自己吃亏，冷静下来谨慎处理很重要。</li>\n<li><strong>不要参与毁谤、传谣</strong>：不参与毁谤、传谣是保护自己免受别人负面情绪影响的明智之举。</li>\n<li><strong>在社交网络上不要应对所有人</strong>：制定“到此为止”的基准，就无须担心受其摆布。</li>\n<li><strong>不要一个人承受</strong>：坦率地接受周围人的帮助吧！这样更容易把事情做好！</li>\n<li>不<strong>要任性地“希望别人懂你”</strong>：如果不说出来，自己的情绪不会得到别人理解。“希望别人懂你”这种任性的想法赶紧丢掉吧。</li>\n<li><strong>不要过分在意胜负</strong>：过分在意“胜负”会很辛苦。不要为胜负而忽喜忽悲。</li>\n<li><strong>不要和别人靠得太近</strong>：与人交往保持合适的距离，既不太远也不太近，会使人际关系良好。</li>\n</ol>\n<h4 id=\"即使有负面情绪，也不要马上说出来\">即使有负面情绪，也不要马上说出来</h4>\n<ul>\n<li>喜怒哀乐的情绪表达出来是很好的。</li>\n<li>说出负面情绪，只会让人觉得“这个人真可怜”。</li>\n<li>想象一下说出负面情绪会有什么后果。</li>\n</ul>\n<h4 id=\"负面情绪容易传染，尤其要远离毁谤、造谣\">负面情绪容易传染，尤其要远离毁谤、造谣</h4>\n<ul>\n<li>情绪会传染给别人。</li>\n<li>特别是负面情绪更容易传染。</li>\n<li>从毁谤、造谣的场合静静离开。</li>\n</ul>\n<h4 id=\"简化朋友圈，别被社交网络工具绑架\">简化朋友圈，别被社交网络工具绑架</h4>\n<ul>\n<li>社交网络工具容易成为让人不快的根源。</li>\n<li>指定应对程度的基准。</li>\n<li>简化人际关系可以避免焦虑烦躁。</li>\n</ul>\n<h4 id=\"养成向周围人求助的习惯，心情好了，事也成了\">养成向周围人求助的习惯，心情好了，事也成了</h4>\n<ul>\n<li>凡事一个人承担容易陷入沮丧。</li>\n<li>一个人能承担的范围是有限的。</li>\n<li>向身边的人求助就不会有精神压力。</li>\n</ul>\n<h4 id=\"font-color-FF000-抛开“希望对方懂你”的一厢情愿-font\"><font color=#FF000>抛开“希望对方懂你”的一厢情愿</font></h4>\n<ul>\n<li>人不可能100%理解别人的心情。</li>\n<li>任性的希望对方理解自己，会让自己闷闷不乐。</li>\n<li>如果明白对方不理解是正常的，自己就会轻松。</li>\n</ul>\n<h4 id=\"不要把“胜负”看作唯一的判断标准\">不要把“胜负”看作唯一的判断标准</h4>\n<ul>\n<li>总有人以“胜负”的标准看待问题。</li>\n<li>人如果被胜负左右会越来越不满。</li>\n<li>不看重“胜负”，人就会轻松。</li>\n</ul>\n<p>人之所以不快乐，原因在于将根本与胜负无关的事以胜负的框框来衡量。是否幸福要以自己的标准来衡量。</p>\n<h4 id=\"距离感会让你的人际关系保持良好\">距离感会让你的人际关系保持良好</h4>\n<ul>\n<li>能和不常见面的人保持良好关系的原因是距离感。</li>\n<li>即使关系很好也不要靠得太近。</li>\n<li>尝试偶尔联系很久没见的人。</li>\n</ul>\n","categories":["阅读"],"tags":["读书笔记"]},{"title":"Hexo-Next主题-搭建二级分类相册","url":"//post/9/","content":"<p>本文搭建环境基于hexo 6.2.0、Next主题8.2.0版本。相册的图床是在腾讯云上。</p>\n<h3 id=\"新增文件结构\">新增文件结构</h3>\n<p>首先要创建的文件有:</p>\n<pre class=\"language-txt\" data-language=\"txt\"><code class=\"language-txt\">- /blog/source/_data/galleries.yaml  存放所有图片数据json格式的\n- /blog/source/photos/index.md        相册一级目录对应的index.md\n- /blog/source/photos/九寨沟之旅        相册二级目录的文件夹\n- /blog/source/photos/重庆之行          相册二级目录的文件夹\n- /blog/themes/next/layout/photos.njk    一级相册模板\n- /blog/themes/next/layout/photo.njk    二级相册模板\n- /blog/source/_data/styles.styl        末尾添加相册CSS风格</code></pre>\n<blockquote>\n<p>腾讯云图床的相册存储结构为两级结构，一级文件夹名为galleries，二级文件夹名为相册分类命名的文件夹：九寨沟之旅，重庆之行。</p>\n</blockquote>\n<p><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/202208171447201.png\" alt=\"\"></p>\n<p>galleries.yaml文件内请参照以下格式：</p>\n<pre class=\"language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">[</span>\n <span class=\"token punctuation\">&#123;</span><span class=\"token key atrule\">'photos'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'1.jpg'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2.jpg'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'3.jpg'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'4.jpg'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token key atrule\">'cover'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'1.jpg'</span><span class=\"token punctuation\">,</span> <span class=\"token key atrule\">'description'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token key atrule\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'九寨沟之旅'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">&#123;</span><span class=\"token key atrule\">'photos'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'x.jpg'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'x.jpg'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'x.jpg'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token key atrule\">'cover'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'x.jpg'</span><span class=\"token punctuation\">,</span> <span class=\"token key atrule\">'description'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token key atrule\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'xxxxxxxx'</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">]</span></code></pre>\n<h3 id=\"相册风格\">相册风格</h3>\n<details>\n  <summary>相册风格源码</summary>\n<pre class=\"language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">//相册风格\n.gallery-wrapper</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">padding-top</span><span class=\"token punctuation\">:</span> 20px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding-left</span><span class=\"token punctuation\">:</span> 5%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> 20px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.gallery-wrapper .gallery-box</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 5px <span class=\"token important\">!important</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin-bottom</span><span class=\"token punctuation\">:</span> 20px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.gallery-box</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 30%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span> auto<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> auto<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">right</span><span class=\"token punctuation\">:</span> auto<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">float</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token selector\">.gallery-wrapper .gallery-item</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> block<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #fff<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 5px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding-bottom</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">-moz-box-shadow</span><span class=\"token punctuation\">:</span> 0 1px 3px 0 <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>0<span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">,</span> 0.22<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">-webkit-box-shadow</span><span class=\"token punctuation\">:</span> 0 1px 3px 0 <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>0<span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">,</span> 0.22<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">box-shadow</span><span class=\"token punctuation\">:</span> 0 1px 3px 0 <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>0<span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">,</span> 0.22<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token selector\">.gallery-cover-box</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding-top</span><span class=\"token punctuation\">:</span> 60%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> center center no-repeat<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">-webkit-background-size</span><span class=\"token punctuation\">:</span> cover<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-size</span><span class=\"token punctuation\">:</span> cover<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token selector\">.gallery-cover-box .gallery-cover-img</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> inline-block<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translate</span><span class=\"token punctuation\">(</span>-50%<span class=\"token punctuation\">,</span>-50%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.gallery-item .gallery-name</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 14px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">line-height</span><span class=\"token punctuation\">:</span> 24px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #666<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 5px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token selector\">.waterfall</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">column-count</span><span class=\"token punctuation\">:</span> 4<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">column-gap</span><span class=\"token punctuation\">:</span> 1em<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.photo-wrapper</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">padding-top</span><span class=\"token punctuation\">:</span> 20px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.photo-item</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> block<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding-bottom</span><span class=\"token punctuation\">:</span> 0px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin-bottom</span><span class=\"token punctuation\">:</span> 14px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">-moz-page-break-inside</span><span class=\"token punctuation\">:</span> avoid<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">-webkit-column-break-inside</span><span class=\"token punctuation\">:</span> avoid<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">break-inside</span><span class=\"token punctuation\">:</span> avoid<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> white<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">-moz-box-shadow</span><span class=\"token punctuation\">:</span> 0 1px 3px 0 <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>0<span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">,</span> 0.22<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">-webkit-box-shadow</span><span class=\"token punctuation\">:</span> 0 1px 3px 0 <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>0<span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">,</span> 0.22<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">box-shadow</span><span class=\"token punctuation\">:</span> 0 1px 3px 0 <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>0<span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">,</span> 0.22<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.photo-item img</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.photo-item .photo-name</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 14px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">line-height</span><span class=\"token punctuation\">:</span> 30px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin-bottom</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-top</span><span class=\"token punctuation\">:</span> 1px solid #dddddd<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token selector\">.gallery-header</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 25px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin-bottom</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding-top</span><span class=\"token punctuation\">:</span> 35px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #fff<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding-bottom</span><span class=\"token punctuation\">:</span> 20px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 0.95<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">&#125;</span>\n</code></pre>\n</details>\n<h3 id=\"建立相册目录及模板\">建立相册目录及模板</h3>\n<p>创建相册目录<code>/blog/source/photos</code></p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo new page photos</code></pre>\n<p>photos文件夹内的index.md参照下面</p>\n<pre class=\"language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\"><span class=\"token front-matter-block\"><span class=\"token punctuation\">---</span>\n<span class=\"token front-matter yaml language-yaml\"><span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> 相册\n<span class=\"token key atrule\">date</span><span class=\"token punctuation\">:</span> xxxx<span class=\"token punctuation\">-</span>xx<span class=\"token punctuation\">-</span>xx xx<span class=\"token punctuation\">:</span>xx<span class=\"token punctuation\">:</span>xx\n<span class=\"token key atrule\">layout</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"photos\"</span>\n<span class=\"token key atrule\">comments</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></span>\n<span class=\"token punctuation\">---</span></span></code></pre>\n<p>相册二级目录<code>/blog/source/photos/九寨沟之旅</code> 文件夹内的index.md参照下面：</p>\n<pre class=\"language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\"><span class=\"token front-matter-block\"><span class=\"token punctuation\">---</span>\n<span class=\"token front-matter yaml language-yaml\"><span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> 九寨沟之旅\n<span class=\"token key atrule\">date</span><span class=\"token punctuation\">:</span> xxxx<span class=\"token punctuation\">-</span>xx<span class=\"token punctuation\">-</span>xx xx<span class=\"token punctuation\">:</span>xx<span class=\"token punctuation\">:</span>xx\n<span class=\"token key atrule\">layout</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"photo\"</span>\n<span class=\"token key atrule\">comments</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></span>\n<span class=\"token punctuation\">---</span></span></code></pre>\n<p>创建一级相册模板  <code>/blog/themes/next/layout/photos.njk</code></p>\n<details>\n  <summary>一级相册模板源码</summary>\n<pre class=\"language-njk\" data-language=\"njk\"><code class=\"language-njk\">&#123;% extends &#39;_layout.njk&#39; %&#125;\n&#123;% import &#39;_macro&#x2F;post-collapse.njk&#39; as post_template with context %&#125;\n&#123;% import &#39;_macro&#x2F;sidebar.njk&#39; as sidebar_template with context %&#125;\n\n&#123;% block content %&#125;\n    &lt;div class&#x3D;&quot;posts-expand&quot;&gt;\n        &lt;div class&#x3D;&quot;gallery-header&quot; lang&#x3D;&quot;&#123;&#123; page.lang or page.language or config.language &#125;&#125;&quot;&gt;\n            &#123;% include &#39;_partials&#x2F;page&#x2F;page-header.njk&#39; %&#125;\n\t\t&lt;&#x2F;div&gt;\t\t \n\t\t&lt;div class&#x3D;&quot;gallery-wrapper&quot;&gt;\n\t\t\t&#123;% for galleries in site.data.galleries %&#125;\n\t\t\t&lt;div class&#x3D;&quot;gallery-box&quot;&gt;\t\t\n\t\t\t\t&lt;a href&#x3D;&quot;.&#x2F;&#123;&#123; galleries.name &#125;&#125;&quot; class&#x3D;&quot;gallery-item&quot; data-aos&#x3D;&quot;zoom-in-up&quot;&gt;\n\t\t\t\t\t&lt;div class&#x3D;&quot;gallery-cover-box&quot; style&#x3D;&quot;background-image: url(&#123;&#123;theme.photos_info.cos_url&#125;&#125;&#x2F;&#123;&#123; galleries.name &#125;&#125;&#x2F;&#123;&#123; galleries.cover &#125;&#125;)&quot;&gt;\n\t\t\t\t\t&lt;&#x2F;div&gt;\n\t\t\t\t\t&lt;p class&#x3D;&quot;gallery-name&quot;&gt;\n\t\t\t\t\t\t&#123;&#123; galleries.name &#125;&#125;\n\t\t\t\t\t&lt;&#x2F;p&gt;\n\t\t\t\t&lt;&#x2F;a&gt;\n\t\t\t&lt;&#x2F;div&gt;\n\t\t\t&#123;% endfor %&#125;\n\t\t&lt;&#x2F;div&gt;\n\t&lt;&#x2F;div&gt;\n&#123;% endblock %&#125;\n\n&#123;% block sidebar %&#125;\n  &#123;&#123; sidebar_template.render(true) &#125;&#125;\n&#123;% endblock %&#125;\n</code></pre>\n</details>\n<p>创建二级相册模板  <code>/blog/themes/next/layout/photo.njk</code></p>\n<details>\n  <summary>二级相册模板源码</summary>\n<pre class=\"language-njk\" data-language=\"njk\"><code class=\"language-njk\">&lt;meta charset&#x3D;&#39;utf-8&#39;&gt;\n&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;&#x2F;css&#x2F;gallery.css&quot;&gt;\n&lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;fancybox@3.0.1&#x2F;dist&#x2F;css&#x2F;jquery.fancybox.css&quot;&gt;\n&lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;justifiedGallery@3.7.0&#x2F;dist&#x2F;css&#x2F;justifiedGallery.min.css&quot;&gt;\n\n&#123;% extends &#39;_layout.njk&#39; %&#125;\n&#123;% import &#39;_macro&#x2F;post-collapse.njk&#39; as post_template with context %&#125;\n&#123;% import &#39;_macro&#x2F;sidebar.njk&#39; as sidebar_template with context %&#125;\n\n&#123;% block content %&#125;\n    &lt;div class&#x3D;&quot;posts-expand&quot;&gt;\n        &lt;div class&#x3D;&quot;post-block&quot; lang&#x3D;&quot;&#123;&#123; page.lang or page.language or config.language &#125;&#125;&quot;&gt;\n            &#123;% include &#39;_partials&#x2F;page&#x2F;page-header.njk&#39; %&#125;\n\t\t\t&lt;div class&#x3D;&quot;container&quot;&gt;\n\t\t\t\t&lt;div class&#x3D;&quot;photo-wrapper&quot;&gt;\n\t\t\t\t\t&lt;div class&#x3D;&quot;waterfall&quot; id&#x3D;&quot;mygallery&quot;&gt;\n\t\t\t\t\t\t&#123;% for i in range(site.data.galleries.length) %&#125;\t\n\t\t\t\t\t\t\t&#123;% if site.data.galleries[i].name &#x3D;&#x3D; page.title %&#125;\n\t\t\t\t\t\t\t\t&#123;% for photo in site.data.galleries[i].photos  %&#125;\n\t\t\t\t\t\t\t\t\t&lt;a class&#x3D;&quot;photo-item&quot; rel&#x3D;&quot;example_group&quot; data-fancybox&#x3D;&quot;images&quot; href&#x3D;&quot;&#123;&#123;theme.photos_info.cos_url&#125;&#125;&#x2F;&#123;&#123;page.title&#125;&#125;&#x2F;&#123;&#123;photo&#125;&#125;&quot; &gt;&lt;img alt&#x3D;&quot;&#123;&#123;photo&#125;&#125;&quot; src&#x3D;&quot;&#123;&#123;theme.photos_info.cos_url&#125;&#125;&#x2F;&#123;&#123;page.title&#125;&#125;&#x2F;&#123;&#123;photo&#125;&#125;&quot; &#x2F;&gt; &lt;&#x2F;a&gt;\t\t\n\t\t\t\t\t\t\t\t&#123;%- endfor %&#125;\t\t\n\t\t\t\t\t\t\t&#123;% endif %&#125;\n\t\t\t\t\t\t&#123;%- endfor %&#125;\n\n\t\t\t\t\t&lt;&#x2F;div&gt;\t\n\t\t\t\t&lt;&#x2F;div&gt;\n\t\t\t&lt;&#x2F;div&gt;\n\t\t&lt;&#x2F;div&gt;\t\n\t&lt;&#x2F;div&gt;\n&#123;% endblock %&#125;\n\n&#123;% block sidebar %&#125;\n  &#123;&#123; sidebar_template.render(true) &#125;&#125;\n&#123;% endblock %&#125;\n\n\n&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;fancybox@3.0.1&#x2F;dist&#x2F;js&#x2F;jquery.fancybox.js&quot;&gt;&lt;&#x2F;script&gt;\n&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;justifiedGallery@3.7.0&#x2F;dist&#x2F;js&#x2F;jquery.justifiedGallery.min.js&quot;&gt;&lt;&#x2F;script&gt;\n&lt;script&gt;\n\n  $(&quot;a[rel&#x3D;example_group]&quot;).fancybox();\n  $(&quot;#mygallery&quot;).justifiedGallery(&#123;margins: 5, rowHeight: 100&#125;);\n\n&lt;&#x2F;script&gt;</code></pre>\n</details>\n<p>最后在主题配置文件 <code>/blog/themes/next/config.yaml</code>添加相册链接</p>\n<pre class=\"language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># 腾讯COS相册链接</span>\n<span class=\"token key atrule\">photos_info</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">cos_url</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//hyh1370039199<span class=\"token punctuation\">-</span>1313349927.cos.ap<span class=\"token punctuation\">-</span>chengdu.myqcloud.com/galleries</code></pre>\n<h3 id=\"腾讯云跨域访问以及访问权限设置\">腾讯云跨域访问以及访问权限设置</h3>\n<div class=\"tabs\" id=\"\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#-1\">1.打开cors设置</a></li><li class=\"tab\"><a href=\"#-2\">2.修改cors规则</a></li><li class=\"tab\"><a href=\"#-3\">3.设置访问权限</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"-1\"><p><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/202208171548272.png\" alt=\"\"></p></div><div class=\"tab-pane\" id=\"-2\"><p>*<em>操作选择与下图一致，其他默认都填成 <em>，如下图：</em></em></p>\n<p><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/202208171625301.png\" alt=\"\"></p></div><div class=\"tab-pane\" id=\"-3\"><p><strong>进入权限管理界面，将存储桶的访问权限设置为公有读私有写</strong></p>\n<p><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/202208171627879.png\" alt=\"\"></p></div></div></div>\n","categories":["技术"],"tags":["Hexo主题美化"]},{"title":"硬件设计学习笔记 - MOS管","url":"//post/10/","content":"<h3 id=\"三极管和MOS管\">三极管和MOS管</h3>\n<img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/202208201305529.jpeg\"  style=\"zoom:67%;\" />\n","categories":["技术"],"tags":["硬件设计"]},{"title":"计算机网络学习-TCP/IP网络模型","url":"//post/11/","content":"<p>TCP/IP网络通常由上到下分为4层：<strong>应用层、传输层、网络层和网络接口层</strong>。</p>\n<div align=center><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/202208281452488.png\"  /></div>\n<p>每一层的封装格式：</p>\n<div align=center><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/202208281507543.png\"/></div>\n<h3 id=\"应用层\">应用层</h3>\n<p>我们能直接接触到的就是应用层（Application Layer），我们电脑或手机使用的应用软件都市在应用层实现的。当两个不同设备的应用需要通信的时候，应用将应用数据传输给下一层，即传输层。<strong>应用层只需要专注于为用户提供应用功能</strong>，例如HTTP、HTTPS、FTP、DNS、Telnet等。</p>\n<h3 id=\"传输层\">传输层</h3>\n<p>传输层（Transport Layer）有两个传输协议，分别为TCP和UDP。</p>\n<p>TCP全称为传输控制协议（Transmission Control Protocol）,大部分应用使用的是TCP传输协议。TCP相比UDP多了一些特性：流量控制、超时重传、拥塞控制等，这些都是为了保证数据包能够可靠、稳定地传输给对方。</p>\n<p>UDP比较简单，只负责发送数据包，不保证数据包是否能抵达对方，但它实时性相对更好、传输效率更高。UDP也可以实现可靠传输，将TCP特性在应用层上实现（QUIC协议）。</p>\n<p>应用需要传输的数据可能会比较大，如果直接传输就不好控制。因此当传输层的数据包大小超过MSS（TCP最大报文段长度）。就要将数据包分块，这样即使中途有一个分块丢失或损坏了，只需重新发送这个分块，而不是重新发送整个数据包。在TCP协议中将每个分段称为一个TCP段（TCP Segment）。</p>\n<p>当设备作为接收方时，传输层则要负责把数据包传给应用，但是一台设备上可能会有很多应用在接收或者传输数据，因此需要用一个编号将应用区分开来，这是编号就是<strong>端口</strong>。例如80端口通常是Web服务器用的，22端口通常是远程登录服务器用的，而对浏览器（客户端）中的每个标签栏都是一个独立的进程，操作系统会为这些进程分配临时的端口号。<strong>由于传输层的报文中会携带端口号，因此接收方可以识别出该报文是发送给哪个应用</strong>。</p>\n<h3 id=\"网络层\">网络层</h3>\n<p>实际场景中的网络环节是错综复杂的，中间有各种各样的线路和分叉路口，如果一个设备的数据要传输给另一个设备，就需要在各种各样的路径和节点进行选择。</p>\n<p>网络层（Internet Layer）最常使用的是IP协议(Internet Protocol),IP协议会将传输层的报文作为数据部分，再加上IP包头组装成IP报文，如果IP报文大小超过MTU（以太网中一般为1500字节）就会再次进行分片，得到一个即将发送到网络的IP报文。</p>\n<div align=center><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/202208281653751.png\"/></div>\n<p>网络层负责将数据从一个设备传输到另一个设备。网络层使用IP地址区别设备，对于IPv4协议，IP地址共32位，分成了四段（例如192.168.100.1）,每段8位。</p>\n<p>IP地址分为两种意义：</p>\n<ul>\n<li>网络号，负责标识该IP地址是属于哪个子网的。</li>\n<li>主机号，负责标识同一子网下的不同主机。</li>\n</ul>\n<p><strong>将IP地址和子网掩码进行按位与运算，就可以得到网络号。</strong></p>\n<p><strong>将子网掩码取反后与IP地址进行按位与运算，就可以得到主机号。</strong></p>\n<p>寻址（Addressing）就是通过地址找设备。类似于现实中根据地址找到一个公寓，而路由（Routing）本质是路径的选择，就类似于知道地址，但是到每一个十字路口，还需要选择具体路径。</p>\n<h3 id=\"网络接口层\">网络接口层</h3>\n<p>IP头部中的接收方IP地址表示网络包的目的地，通过这个地址我们可以判断要将包发到哪里，但是在以太网的世界中，这个思路是行不通的，电脑上的以太网接口、WIFI接口、以太网交换机、路由器的千兆、万兆以太网口还有网线，这些都是以太网的组成部分。以太网是一种在局域网内，把附近的设备连接起来，使它们之间可以进行通讯的技术。</p>\n<p>以太网在判断网络包目的地时和IP的方式不同，因此必须采用相匹配的方式才能在以太网中将包发往目的地，而在以太网进行通讯要用到MAC地址。MAC头部是以太网的头部，包含接收方和发送方的MAC地址等信息，可以通过ARP协议获取对方的MAC地址。</p>\n","categories":["技术"],"tags":["计算机网络","TCP/IP"]},{"title":"基于Keil MDK移植 RT-Thread Nano（一）","url":"//post/12/","content":"<h3 id=\"基于Keil-MDK-移植-RT-Thread-Nano\">基于Keil MDK 移植 RT-Thread Nano</h3>\n<h4 id=\"准备工作\"><strong>准备工作:</strong></h4>\n<ul>\n<li>准备一份STM32L475VET6的裸机工程</li>\n<li>在KEIL上安装<a href=\"https://www.rt-thread.org/download/mdk/RealThread.RT-Thread.3.1.5.pack\">RT-Thread Nano Pack</a></li>\n</ul>\n<h4 id=\"添加RT-Thread-Nano到工程：\"><strong>添加RT-Thread Nano到工程：</strong></h4>\n<p>如下图，点击Manage Run-Time Environment，在页面RTOS选择RT-Thread，然后勾选kernel</p>\n<p><img data-src=\"https://hyh1370039199-1313349927.cos.ap-chengdu.myqcloud.com/img/202208311016280.png\" alt=\"\"></p>\n<h4 id=\"适配RT-Thread-Nano：\">适配RT-Thread Nano：</h4>\n<h5 id=\"中断与异常处理\">中断与异常处理</h5>\n<p>RT-Thread 会接管异常处理函数 <code>HardFault_Handler()</code> 、 悬挂处理函数 <code>PendSV_Handler()</code>和 系统滴答函数 <code>SysTick_Handler()</code>,所以将<code>stm32l4xx_it.c</code>文件的这三个函数定义注释掉。然后向 board.c中添加<code>SysTick_Handler()</code>,在中断服务函数中调用<code>rt_os_tick_callback()</code>,为操作系统提供心跳/节拍。</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">rt_os_tick_callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">rt_interrupt_enter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//进入中断时必须调用</span>\n    \n    <span class=\"token function\">rt_tick_increase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//RT-Thread系统时钟计数</span>\n\n    <span class=\"token function\">rt_interrupt_leave</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//退出中断时必须调用</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">SysTick_Handler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">rt_os_tick_callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h5 id=\"系统时钟配置\">系统时钟配置</h5>\n<p>在系统启动之后，程序会执行<code>startup_stm32l475xx.s</code>文件的SystemInit函数，SystemInit主要做了如下三个方面工作:</p>\n<ol>\n<li>FPU设置</li>\n<li>复位RCC时钟配置为默认复位值(默认开启MSI)</li>\n<li>中断向量表地址配置</li>\n</ol>\n<p><code>stm32l4xx_hal.c</code> 文件中的<code>HAL_Init()</code>初始化函数，作用：对中断优先级分组，Flash以及硬件初始化。</p>\n<p><strong>①NVIC 中断优先级管理</strong></p>\n<p>STM32L475xx总共有100个中断，包括10个内核中断和90个可屏蔽中断，具有16级可编程的中断优先级。STM32L475中断在如下寄存器控制下有序执行：</p>\n<p><strong>ISER[8]:(Interrupt Set Enable Registers) 中断使能寄存器组</strong>。ISER[0]的bit0-31分别对应中断0-31；ISER[1]的bit0-31分别对应中断32-63；以此类推。</p>\n<p>使能某个中断，必须设置相应的ISER位为1.(<strong>这里仅仅是使能，还要配合中断分组、屏蔽、IO口映射等设置才算是一个完整的中断设置</strong>)。</p>\n<p><strong>ICER[8]:(Interrupt Clear Enable Registers) 中断除能寄存器组</strong>。清除某个中断使能。写1有效。</p>\n<p><strong>ISPR[8]:(Interrupt Set Pending Registers) 中断挂起控制寄存器组。</strong> 通过置1，可以将正在进行的中断挂起，而执行同级或更高级别的中断。</p>\n<p><strong>ICPR[8]:(Interrupt Clear Pending Registers) 中断解挂控制寄存器组</strong>。通过置1，可以将挂起的中断解挂。</p>\n<p><strong>IABR[8]:(Interrupt Active Bit Registers) 中断激活标志位寄存器组</strong>。如果为1，则表示该位所对应的中断正在被执行。这是只读寄存器，通过它可以知道当前执行的中断是哪个，在中断执行完了由硬件自动清零。</p>\n<p><strong>IP[240]:(Interrupt Priority Registers) 中断优先级控制寄存器组</strong>。IP 寄存器组由 240 个 8bit 的寄存器组成，每个可屏蔽中断占用 8bit，这样总共可以表示 240 个可屏蔽中断，而STM32L475只用到其中的90个。IP[90]-IP[0]分别对应中断90-0.<strong>每个可屏蔽中断占用的8bit只用了高4位</strong>。这4位，又分为<strong>抢占优先级和子优先级</strong>。抢占优先级在前，子优先级在后。<strong>这两个优先级各占几个位要根据SCB-&gt;AIRCR中中断分组设置来决定</strong>。</p>\n<p>STM32L475中断分组：将中断分为5个组，组0-4.该分组设置是由SCB-&gt;AIRCR寄存器的bit10-8来定义。具体分配关系如下表所示。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">组</th>\n<th style=\"text-align:center\">AIRCR[10:8]</th>\n<th style=\"text-align:center\">bit[7:4]分配情况</th>\n<th style=\"text-align:center\">分配结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">111</td>\n<td style=\"text-align:center\">0：4</td>\n<td style=\"text-align:center\">0 位抢占优先级，4 位响应优先级</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">110</td>\n<td style=\"text-align:center\">1：3</td>\n<td style=\"text-align:center\">1 位抢占优先级，3 位响应优先级</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">101</td>\n<td style=\"text-align:center\">2：2</td>\n<td style=\"text-align:center\">2 位抢占优先级，2 位响应优先级</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">100</td>\n<td style=\"text-align:center\">3：1</td>\n<td style=\"text-align:center\">3 位抢占优先级，1 位响应优先级</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">011</td>\n<td style=\"text-align:center\">4：0</td>\n<td style=\"text-align:center\">4 位抢占优先级，0 位响应优先级</td>\n</tr>\n</tbody>\n</table>\n<p>抢占优先级的级别高于响应优先级。而数值越小所代表的优先级就越高。</p>\n<p><strong>注意两点：</strong></p>\n<ul>\n<li>如果两个中断的抢占优先级和响应优先级都是一样的，则看哪个中断先发生就先执行。</li>\n<li>高优先级的抢占优先级是可以打断正在进行的低抢占优先级中断的。而抢占优先级相同的中断，高优先级的响应优先级不可以打断低响应优先级的中断。</li>\n</ul>\n<p>HAL库实现中断分组设置以及中断优先级管理：NVIC中断管理相关函数主要在<code>stm32l4xx_hal_cortex.c</code>定义</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">//中断优先级分组函数 HAL_NVIC_SetPriorityGrouping</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">HAL_NVIC_SetPriorityGrouping</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> PriorityGroup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p><code>stm32l4xx_hal.c</code>  文件中  <code>HAL_Init()</code> 函数内部会调用</p>\n<p><code>HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);</code> 进行系统中断优先级分组设置。</p>\n<p>设置好系统中断分组，对于每个中断怎么确定它的抢占优先级和响应优先级? <code>stm32l4xx_hal_cortex.c</code>定义了三个单个中断优先级设置函数。</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">//设置单个优先级的抢占优先级和响应优先级的值</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">HAL_NVIC_SetPriority</span><span class=\"token punctuation\">(</span>IRQn_Type IRQn<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> PreemptPriority<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> SubPriority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//使能某个中断通道</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">HAL_NVIC_EnableIRQ</span><span class=\"token punctuation\">(</span>IRQn_Type IRQn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//清除某个中断使能</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">HAL_NVIC_DisableIRQ</span><span class=\"token punctuation\">(</span>IRQn_Type IRQn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p><strong>中断优先级设置的步骤：</strong></p>\n<p>①系统运行开始的时候设置中断分组。确定抢占优先级和响应优先级的分配位数.只需要修改 HAL_Init 内部<code>HAL_NVIC_PriorityGroupConfig</code>函数对中断优先级分组设置即可.</p>\n<p>②设置单个中断的中断优先级别和使能相应中断通道，使用到的函数函数主要为函数 <code>HAL_NVIC_SetPriority()</code> 和函数 <code>HAL_NVIC_EnableIRQ()</code></p>\n<p><strong>在<code>board.c</code>文件中<code>rt_hw_board_init()</code>函数添加：</strong></p>\n<p>系统节拍配置，启用硬件定时器并以<code>RT_TICK_PER_SECOND</code>频率定期调用<code>rt_os_tick_callback()</code>函数</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">rt_hw_board_init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">/* \n     * TODO 1: OS Tick Configuration\n     * Enable the hardware timer and call the rt_os_tick_callback function\n     * periodically with the frequency RT_TICK_PER_SECOND. \n     */</span>\n    <span class=\"token function\">HAL_Init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">SystemClock_Config</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//HAL_Init()函数中将HAL_NVIC_SetPriorityGrouping()传入的参数NVIC_PRIORITYGROUP_2改为NVIC_PRIORITYGROUP_4</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//SystemClock_Config()函数实现：</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">SystemClock_Config</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    RCC_OscInitTypeDef RCC_OscInitStruct <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    RCC_ClkInitTypeDef RCC_ClkInitStruct <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    HAL_StatusTypeDef status<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token function\">__HAL_RCC_PWR_CLK_ENABLE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//使能PWR时钟</span>\n    <span class=\"token comment\">/*选择时钟源*/</span>\n    RCC_OscInitStruct<span class=\"token punctuation\">.</span>OscillatorType <span class=\"token operator\">=</span> RCC_OSCILLATORTYPE_HSE<span class=\"token punctuation\">;</span><span class=\"token comment\">//时钟源为HSE</span>\n    RCC_OscInitStruct<span class=\"token punctuation\">.</span>HSEState <span class=\"token operator\">=</span> RCC_HSE_ON<span class=\"token punctuation\">;</span><span class=\"token comment\">//打开HSE</span>\n    RCC_OscInitStruct<span class=\"token punctuation\">.</span>PLL<span class=\"token punctuation\">.</span>PLLState <span class=\"token operator\">=</span> RCC_PLL_ON<span class=\"token punctuation\">;</span><span class=\"token comment\">//打开PLL</span>\n    RCC_OscInitStruct<span class=\"token punctuation\">.</span>PLL<span class=\"token punctuation\">.</span>PLLSource <span class=\"token operator\">=</span> RCC_PLLSOURCE_HSE<span class=\"token punctuation\">;</span><span class=\"token comment\">//PLL时钟源为HSE</span>\n    RCC_OscInitStruct<span class=\"token punctuation\">.</span>PLL<span class=\"token punctuation\">.</span>PLLM <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    RCC_OscInitStruct<span class=\"token punctuation\">.</span>PLL<span class=\"token punctuation\">.</span>PLLN <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n    RCC_OscInitStruct<span class=\"token punctuation\">.</span>PLL<span class=\"token punctuation\">.</span>PLLP <span class=\"token operator\">=</span> RCC_PLLP_DIV7<span class=\"token punctuation\">;</span>\n    RCC_OscInitStruct<span class=\"token punctuation\">.</span>PLL<span class=\"token punctuation\">.</span>PLLQ <span class=\"token operator\">=</span> RCC_PLLQ_DIV2<span class=\"token punctuation\">;</span>\n    RCC_OscInitStruct<span class=\"token punctuation\">.</span>PLL<span class=\"token punctuation\">.</span>PLLR <span class=\"token operator\">=</span> RCC_PLLR_DIV2<span class=\"token punctuation\">;</span>\n    \n    status <span class=\"token operator\">=</span> <span class=\"token function\">HAL_RCC_OscConfig</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>RCC_OscInitStruct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>status <span class=\"token operator\">!=</span> HAL_OK<span class=\"token punctuation\">)</span>   \n    <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token function\">Error_Handler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">/*配置AHB、APB1、APB2*/</span>\n    RCC_ClkInitStruct<span class=\"token punctuation\">.</span>ClockType <span class=\"token operator\">=</span> RCC_CLOCKTYPE_HCLK <span class=\"token operator\">|</span> RCC_CLOCKTYPE_SYSCLK <span class=\"token operator\">|</span>\n                                    RCC_CLOCKTYPE_PCLK1 <span class=\"token operator\">|</span> RCC_CLOCKTYPE_PCLK2<span class=\"token punctuation\">;</span>\n    RCC_ClkInitStruct<span class=\"token punctuation\">.</span>AHBCLKDivider <span class=\"token operator\">=</span> RCC_SYSCLK_DIV1<span class=\"token punctuation\">;</span>\n    RCC_ClkInitStruct<span class=\"token punctuation\">.</span>APB1CLKDivider <span class=\"token operator\">=</span> RCC_HCLK_DIV1<span class=\"token punctuation\">;</span>\n    RCC_ClkInitStruct<span class=\"token punctuation\">.</span>APB2CLKDivider <span class=\"token operator\">=</span> RCC_HCLK_DIV1<span class=\"token punctuation\">;</span>\n    \n    status <span class=\"token operator\">=</span> <span class=\"token function\">HAL_RCC_ClockConfig</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>RCC_ClkInitStruct<span class=\"token punctuation\">,</span>FLASH_LATENCY_4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>status <span class=\"token operator\">!=</span> HAL_OK<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">Error_Handler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">/*配置主内部调压器输出电压级别*/</span>\n    status <span class=\"token operator\">=</span> <span class=\"token function\">HAL_PWREx_ControlVoltageScaling</span><span class=\"token punctuation\">(</span>PWR_REGULATOR_VOLTAGE_SCALE1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>status <span class=\"token operator\">!=</span> HAL_OK<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">Error_Handler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">/* Configure the Systick interrupt time */</span>\n    <span class=\"token function\">HAL_SYSTICK_Config</span><span class=\"token punctuation\">(</span><span class=\"token function\">HAL_RCC_GetHCLKFreq</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> RT_TICK_PER_SECOND<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/* Configure the Systick */</span>\n    <span class=\"token function\">HAL_SYSTICK_CLKSourceConfig</span><span class=\"token punctuation\">(</span>SYSTICK_CLKSOURCE_HCLK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/* SysTick_IRQn interrupt configuration */</span>\n    <span class=\"token function\">HAL_NVIC_SetPriority</span><span class=\"token punctuation\">(</span>SysTick_IRQn<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h4 id=\"编写第一个应用-流水灯\">编写第一个应用:流水灯</h4>\n<p>移植好RT-Thread Nano后，此时<code>main()</code>函数就转变为RT-Thread操作系统的一个线程。</p>\n<p>在main()函数中(也就是在main线程中)实现LED闪烁代码:初始化LED引脚、在循环中点亮/熄灭LED。</p>\n<p>将延时函数替换为RT-Thread提供的延时函数<code>rt_thread_mdelay()</code>函数，该函数会引起系统调度，切换到其他线程运行。该延时函数不占用CPU，而裸机的延时函数是一直占用CPU运行的。</p>\n","categories":["技术"],"tags":["操作系统","RT-Thread"]},{"title":"基于Keil MDK移植 RT-Thread Nano（二）","url":"//post/13/","content":"<h3 id=\"在RT-Thread-Nano上添加控制台与FinSH\">在RT-Thread Nano上添加控制台与FinSH</h3>\n<h4 id=\"第一部分：添加UART控制台\">第一部分：添加UART控制台</h4>\n<p>用来向控制台对接的终端输出打印信息；该部分需要实现两个函数:串口初始化、系统输出，即可实现UART控制台打印功能。</p>\n<p>添加UART控制台打印功能后，可以使用RT-Thread提供的打印函数<code>rt_kprintf()</code>进行信息打印。从而获取自定义的打印信息，方便定位代码bug或者获取系统当前运行状态等。<strong>需要确认rtconfig.h中已使能RT_USING_CONSOLE宏定义</strong>。</p>\n<p><strong>向board.c添加串口初始化：</strong></p>\n<p>初始化的串口函数<code>uart_init()</code>有以下两种调用方式:</p>\n<ul>\n<li>\n<p>默认使用宏<code>INIT_BOARD_EXPORT()</code>进行自动初始化，不需要显式调用。</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/* board.c*/</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">uart_init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    UART_HandleStruct<span class=\"token punctuation\">.</span>Instance <span class=\"token operator\">=</span> USART1<span class=\"token punctuation\">;</span>\n    UART_HandleStruct<span class=\"token punctuation\">.</span>Init<span class=\"token punctuation\">.</span>BaudRate <span class=\"token operator\">=</span> <span class=\"token number\">115200</span><span class=\"token punctuation\">;</span>\n    UART_HandleStruct<span class=\"token punctuation\">.</span>Init<span class=\"token punctuation\">.</span>WordLength <span class=\"token operator\">=</span> UART_WORDLENGTH_8B<span class=\"token punctuation\">;</span>\n    UART_HandleStruct<span class=\"token punctuation\">.</span>Init<span class=\"token punctuation\">.</span>StopBits <span class=\"token operator\">=</span> UART_PARITY_NONE<span class=\"token punctuation\">;</span>\n    UART_HandleStruct<span class=\"token punctuation\">.</span>Init<span class=\"token punctuation\">.</span>Parity <span class=\"token operator\">=</span> UART_PARITY_NONE<span class=\"token punctuation\">;</span>\n    UART_HandleStruct<span class=\"token punctuation\">.</span>Init<span class=\"token punctuation\">.</span>HwFlowCtl <span class=\"token operator\">=</span> UART_HWCONTROL_NONE<span class=\"token punctuation\">;</span>\n    UART_HandleStruct<span class=\"token punctuation\">.</span>Init<span class=\"token punctuation\">.</span>Mode <span class=\"token operator\">=</span> UART_MODE_TX_RX<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">HAL_UART_Init</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>UART_HandleStruct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">INIT_BOARD_EXPORT</span><span class=\"token punctuation\">(</span>uart_init<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n</li>\n<li>\n<p>可以使用显式调用：<code>uart_init()</code>需要在board.c中的<code>rt_hw_board_init()</code>函数中调用。</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/* board.c */</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">rt_hw_board_init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token function\">uart_init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">/* 可以选择在 rt_hw_board_init 函数中直接调用串口初始化函数 */</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n</li>\n</ul>\n<p><strong>实现<code>rt_hw_console_output()</code>:</strong></p>\n<p>实现Finsh组件输出一个字符，即在该函数中实现uart输出字符：</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">rt_hw_console_output</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">rt_size_t</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> a <span class=\"token operator\">=</span> <span class=\"token char\">'\\r'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">__HAL_UNLOCK</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>UART_HandleStruct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    size <span class=\"token operator\">=</span> <span class=\"token function\">rt_strlen</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>size<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>str <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">HAL_UART_Transmit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>UART_HandleStruct<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">HAL_UART_Transmit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>UART_HandleStruct<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>str <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<blockquote>\n<p>注意：RT_Thread系统中已有的打印均以\\n结尾，而不是\\r\\n,所以在字符输出时，需要在输出\\n之前输出\\r，完成回车与换行，否则系统打印出来的信息将只有换行。</p>\n</blockquote>\n<p>将main函数中的实现LED点亮、熄灭的函数随后添加<code>rt_kprintf()</code>函数，表示当前LED的状态，利用串口调试助手，观察现象如图所示。</p>\n<p><img data-src=\"https://hyh1370039199-1313349927.cos.ap-chengdu.myqcloud.com/img/202208311017717.png\" alt=\"\"></p>\n<h4 id=\"第二部分：移植FinSH组件\">第二部分：移植FinSH组件</h4>\n<p>用以在控制台输入命令调试系统；该部分实现基于第一部分，需要添加FinSH组件源码并对接一个系统输入函数即可实现。</p>\n<p><a href=\"https://www.rt-thread.org/document/site/#/rt-thread-version/rt-thread-standard/programming-manual/finsh/finsh.md\">RT-THread FinsH</a>是RT-Thread的命令行组件(shell),提供一套用户在命令行调用的操作接口，主要用于调试或查看系统信息。它可以使用串口、以太网、USB等与PC机进行通信。</p>\n<p><strong>添加FinSH源码到工程:</strong></p>\n<p><img data-src=\"https://hyh1370039199-1313349927.cos.ap-chengdu.myqcloud.com/img/202208311017457.png\" alt=\"\"></p>\n<p>勾选shell选项，然后在<code>rtconfig.h</code>中打开finish相关选项</p>\n<p><img data-src=\"https://hyh1370039199-1313349927.cos.ap-chengdu.myqcloud.com/img/202208311017470.png\" alt=\"\"></p>\n<p><strong>实现<code>rt_hw_console_getchar()</code>:</strong></p>\n<p>在<code>finsh_port.c</code>的<code>rt_hw_console_getchar()</code>函数实现控制台命令输入功能：控制台获取一个字符，即在该函数内实现串口获取字符，<strong>可以使用查询方式获取(注意不要死等，在未获取到字符时，需要让出CPU)，推荐使用中断方式获取。</strong></p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\">RT_WEAK <span class=\"token keyword\">char</span> <span class=\"token function\">rt_hw_console_getchar</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">/* Note: the initial value of ch must &lt; 0 */</span>\n    <span class=\"token keyword\">int</span> ch <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">__HAL_UART_GET_FLAG</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>UART_HandleStruct<span class=\"token punctuation\">,</span>UART_FLAG_RXNE<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> RESET<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        ch <span class=\"token operator\">=</span> UART_HandleStruct<span class=\"token punctuation\">.</span>Instance<span class=\"token operator\">-></span>RDR <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">else</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">__HAL_UART_GET_FLAG</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>UART_HandleStruct<span class=\"token punctuation\">,</span>UART_FLAG_ORE<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> RESET<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">__HAL_UART_CLEAR_OREFLAG</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>UART_HandleStruct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">rt_thread_mdelay</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> ch<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>打开Xshell软件，输入 help 命令，回车查看系统支持的命令：</p>\n<p><img data-src=\"https://hyh1370039199-1313349927.cos.ap-chengdu.myqcloud.com/img/202208311017502.png\" alt=\"\"></p>\n","categories":["技术"],"tags":["操作系统","RT-Thread"]},{"title":"C语言中的位域、字节序、比特序、大小端","url":"//post/14/","content":"<h4 id=\"一、比特序-位序\">一、比特序/位序</h4>\n<p>比特序表示一个字节中8个比特位（bit）之间的顺序问题。分为<strong>LSB 0 位序</strong>和<strong>MSB 0 位序</strong>。</p>\n<p><strong>LSB:最低有效位  MSB:最高有效位</strong></p>\n<p><strong>LSB(least significant bit) 0位序</strong>：数据的<strong>最低位</strong>存放在字节的<strong>第0位</strong>。</p>\n<p><strong>MSB (most significant bit) 0位序</strong>：数据的<strong>最高位</strong>存放在字节的<strong>第0位</strong>。</p>\n<p>例如有一个十进制的数为174，对应的二进制数为<strong>1010 1110</strong>.</p>\n<p>1.在<strong>LSB 0 位序</strong>下，其存储形式如下图：</p>\n<img data-src=\"https://hyh1370039199-1313349927.cos.ap-chengdu.myqcloud.com/img/202209211724308.png\"  style=\"zoom: 50%;\" />\n<blockquote>\n<p>数据流的顺序为0-1-1-1-0-1-0-1</p>\n</blockquote>\n<p>2.在<strong>MSB 0 位序</strong>下，其存储形式如下图：</p>\n<img data-src=\"https://hyh1370039199-1313349927.cos.ap-chengdu.myqcloud.com/img/202209211725722.png\" style=\"zoom:50%;\" />\n<blockquote>\n<p>数据流的顺序为1-0-1-0-1-1-1-0</p>\n</blockquote>\n<p>CPU存储数据操作的最小单位是一个字节（Byte），其内部的比特序对程序员并不可见。</p>\n<h4 id=\"二、字节序和大小端\">二、字节序和大小端</h4>\n<p>只有多字节数据存储时才会考虑大小端。</p>\n<p>数据的<strong>高字节</strong>保存在内存的<strong>低地址</strong>，称为<strong>大端模式（大端序）</strong>。</p>\n<p>数据的<strong>高字节</strong>保存在内存的<strong>高地址</strong>，称为<strong>小端模式（小端序）</strong>。</p>\n<p>对于<strong>大端模式</strong>，一个占有4个字节类型的数据0x00112233在内存中如下分布：</p>\n<p><img data-src=\"https://hyh1370039199-1313349927.cos.ap-chengdu.myqcloud.com/img/202209211726941.png\" alt=\"\"></p>\n<p>对于<strong>小端模式</strong>，数据0x00112233在内存中如下分布：</p>\n<p><img data-src=\"https://hyh1370039199-1313349927.cos.ap-chengdu.myqcloud.com/img/202209211726034.png\" alt=\"\"></p>\n<p>常见CPU的字节序：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">类别</th>\n<th style=\"text-align:center\">举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">大端模式</td>\n<td style=\"text-align:center\">51单片机，STM8</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">小端模式</td>\n<td style=\"text-align:center\">X86,STM32</td>\n</tr>\n</tbody>\n</table>\n<p>大小端各有优势：小端模式强制转换类型时不需要调整字节内容，直接截取低字节即可；大端模式由于符号位为第一个字节，很方便判断正负。如果判断不出当前系统的大小端模式，可用以下2种方法进行判断：</p>\n<p><strong>1.通过强制类型转换截断</strong></p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\">bool <span class=\"token function\">IsBigEndian</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">uint16_t</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0x1234</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">uint8_t</span> b <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x12</span> <span class=\"token operator\">==</span> b<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p><strong>2.利用联合共享内存的特性，截取低地址部分</strong></p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">union</span> NUM\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">uint16_t</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">uint8_t</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>num<span class=\"token punctuation\">;</span>\n\nbool <span class=\"token function\">IsBigEndian</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    num<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">0x1234</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x12</span> <span class=\"token operator\">==</span> num<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>计算机在内存中存放数据的顺序都是从低地址到高地址，大小端的差异只是体现在首先取低字节的数据存放在低地址还是取高字节的数据存放在低地址；此外大小端只是数据在存储时的表现，而非在寄存器中参与运算的表现。</p>\n<p>字节序为小端序的CPU通常位序为LSB，而字节序为大端序的CPU采用的位序既有MSB，也有LSB。</p>\n<h4 id=\"三、位域\">三、位域</h4>\n<p><strong>位域的写入顺序和当前系统字节序有关：先定义的位域在大端环境从MSB开始分配。如果为小端环境则先定义的位域从LSB开始分配。</strong></p>\n<p>对于下述代码的结构体：</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">bitfield</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">uint8_t</span> a<span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">uint8_t</span> b<span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">uint8_t</span> c<span class=\"token operator\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">uint8_t</span> d<span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>bf<span class=\"token punctuation\">;</span>\nbf<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\nbf<span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\nbf<span class=\"token punctuation\">.</span>c <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\nbf<span class=\"token punctuation\">.</span>d <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></code></pre>\n<p><strong>对于大端，位域的写入顺序为：</strong></p>\n<img data-src=\"https://hyh1370039199-1313349927.cos.ap-chengdu.myqcloud.com/img/202209211727329.png\"  style=\"zoom:50%;\" />\n<p><strong>对于小端，位域的写入顺序为：</strong></p>\n<img data-src=\"https://hyh1370039199-1313349927.cos.ap-chengdu.myqcloud.com/img/202209211713541.png\"  style=\"zoom:50%;\" />\n","categories":["技术"],"tags":["C语言"]},{"title":"LoRa OTA 升级固件","url":"//post/15/","content":"<p>该项目正在紧急筹备中，敬请期待…</p>\n","categories":["项目"],"tags":["射频开发"]},{"title":"《能力陷阱》读书笔记","url":"//post/16/","content":"<h3 id=\"1-领导者的能力陷阱\">[1]领导者的能力陷阱</h3>\n<h4 id=\"1）改变思想从行动开始；\">1）改变思想从行动开始；</h4>\n<p>改变做事方式，然后才能改变自己的思考方式；</p>\n<h4 id=\"2）要先在行为上表现得像领导者，之后才能像领导者那样去思考；\">2）要先在行为上表现得像领导者，之后才能像领导者那样去思考；</h4>\n<h4 id=\"3）做领导者的工作会引起两个转变：\">3）做领导者的工作会引起两个转变：</h4>\n<ol>\n<li>外在转变；</li>\n<li>内在转变；</li>\n</ol>\n<p><strong><font color=#FF000>是外在转变引起内在转变；即先产生行动，而后引起思想转变；</font></strong></p>\n<h4 id=\"4）领导者转变的-font-color-FF000-3个-font-增强外在表现力的方法：\">4）领导者转变的<font color=#FF000>3个</font>增强外在表现力的方法：</h4>\n<ol>\n<li>思考你所做的工作类型；（第2章）</li>\n<li>转换新角色或新活动能让你接触到不同的人；（第3章）</li>\n<li>重新审视自己；（第4章）</li>\n</ol>\n<p><strong>总结的步骤为：</strong> 先重新定义工作-&gt;重建人际关系网络-&gt;再改变做事方法</p>\n<ol>\n<li><strong>重新定义工作（新工作）：</strong> 把工作重心从细节琐事转移到了解公司大局上（如资本投资，销售情况），并与同事沟通，格局变大了；</li>\n<li><strong>重建人际关系网络（新关系）：</strong> 领导扮演的角色是枢纽，是桥梁，连接各个部门，合理组合资源；所以需要与各行各业的人建立人际关系，才会得到新的idea，并将其同步给其他部门；</li>\n<li><strong>试着朝着不同方向发展自己（重新审视自己）（新自我）：</strong> 这就伴随着做事风格改变，从领导下属一起做事转变到给下属委派任务；</li>\n</ol>\n<h3 id=\"2-重新定义你的工作\">[2]重新定义你的工作</h3>\n<h4 id=\"1）能力陷阱：\">1）能力陷阱：</h4>\n<p>花很多时间去做自己擅长的事；把工作定义在一个较窄的范围内，限制在过去能给他们带来价值的领域；随着时间的推移，他们在其他方面的能力就会停滞不前；更别说环境改变了；（其实很多同事都是这种情况，只喜欢做自己擅长的事情，不愿做一些改变，这俗称老油条，比如一直习惯用eclipse,而不改变去用idea；只做后端，不去了解前端，这都是很典型的例子）</p>\n<p>这个陷阱还有一个坏处是：<strong><font color=#FF000>这些看似日常工作，你做的顺风顺水的工作，占据了你大量的时间，你没有腾出时间去做其他有价值的事情</font></strong>，比如研究新技术，能力没有得到提升；</p>\n<p><strong><font color=#FF000>有一个老油条迷之自信的地方在于：他们认为过去让他们获得成功的东西将来也会继续发挥作用；最后他们会陷入一个困境或陷阱，因为之前那些日常工作根本无法满足新环境的需求了</font></strong></p>\n<h4 id=\"2-避免能力陷阱：\">2)避免能力陷阱：</h4>\n<ol>\n<li>不要局限在自己擅长的时间，要跨出舒适圈，去做自己不擅长的事情，把不擅长变为擅长；</li>\n<li>不要过多关注下属的工作，不要让自己在团队过于有价值；应该抽出时间涉猎其他事情，如需求计划，下一季度排期，绩效目标来指导团队发展。</li>\n<li><strong><font color=#FF000>我们应该通过团队工作，而不是为团队工作</font></strong>；</li>\n<li>可能职场上的大部分同学都感觉到，每一次从熟悉的领域转到不熟悉的领域时，都会惊慌失措；要从关注日常琐事转变到指导团队是一件很难的事情，因为很多事情都不在我们的控制范围内，如外部团队系统对接等，当然这是一个过程，不能一蹴而就；</li>\n</ol>\n<h4 id=\"3）像领导者一样行事，需要把时间花在以下事情上，而不是琐事：\">3）像领导者一样行事，需要把时间花在以下事情上，而不是琐事：</h4>\n<ol>\n<li>像桥梁一样连接不同的人或组织；</li>\n<li>做一些有远见的事情；</li>\n<li>提升影响力；</li>\n<li>将想法与个人结合；</li>\n</ol>\n<h4 id=\"4）什么才算有远见？有远见是领导者的定义性特征之一。\">4）什么才算有远见？有远见是领导者的定义性特征之一。</h4>\n<ul>\n<li>感知环境中的机遇与威胁；</li>\n<li>提供战略性指导；</li>\n<li>鼓励其他人展望未来；</li>\n</ul>\n<h4 id=\"5）有魅力的领导者都有以下三个共同点：\">5）有魅力的领导者都有以下三个共同点：</h4>\n<ul>\n<li>人生阅历方法，从而产生了坚定信念；</li>\n<li>能通过讲述个人故事来与他人进行良好的交流；</li>\n<li>他们的想法，实际所做的事情以及他们自己之间有很强的一致性；</li>\n</ul>\n<h4 id=\"6）对于想要进步的领导者：\">6）对于想要进步的领导者：</h4>\n<p>最佳的起点是扩展你的工作范围，提升你工作范围外的表现力，从而你对於你将做什么会产生一些新的想法；以下5件事情能增强你的领导力；</p>\n<ul>\n<li>增强你对形势的定位感；在广阔的信息海洋中感知最重要的事；或形势定位能力；</li>\n<li>接触你专业领域之外的项目；接触日常职责范围外的项目；解决新问题，或者可以接触到与你有着不同世界观的人；</li>\n<li>参与外部活动；如果觉得自己停滞不前，那就参加行业会议；学会看一些你了解的或是你想去了解的教学视频，演讲视频或博客；</li>\n<li>结合个人经历谈谈为什么；TED就是把自身经历分享的平台，构建个人IP；因为会受到他人赞赏，如领导，行内外朋友等；</li>\n<li>放松你的日程安排；空出时间提升自己（而不是把计划安排的过满）。</li>\n</ul>\n","categories":["阅读"],"tags":["读书笔记"]},{"title":"《拖延心理学》读书笔记","url":"//post/17/","content":"<blockquote>\n<p>时间一点一点从手中溜走，是什么让自己变得平庸、差劲？希望读完这本书留下点东西，告诫自己，在往后的日子里出现恐惧、迷茫、逃避时，指引自己继续前行。</p>\n</blockquote>\n<p><font color=#FF000><strong>拖延就像蒲公英。你把它拔掉，以为它不会再长出来了，但是实际上它的根埋藏得很深，很快又长出来了</strong></font>。</p>\n<h3 id=\"一、拖延VS行为\">一、拖延VS行为</h3>\n<h4 id=\"了解你自己\">了解你自己</h4>\n<p>引发拖延的四个根源：</p>\n<ol>\n<li><strong>情绪：</strong> 其涉及内心感受、恐惧、希望、记忆、梦想、怀疑以及压力。但是很多拖延者并不能识别所有这些活跃于表面现象之下的情绪波动，因为他们利用拖延来逃避不舒服的感受。在杂乱无章和拖拖拉拉背后，大多数拖延者其实是在害怕他们自己无法在根本上被人接受。虽然为了拖延而批判自己是相当痛苦的，但是相比费劲挣扎但仍然陷于恐惧之境的脆弱以及被暴露在众目睽睽之下的痛苦感受而言，自我批判的煎熬或许更容易被接受。</li>\n<li><strong>时间：</strong> 拖延者常常以一种“期望式思维”来看待时间，或者他们常常将时间看作一个需要制服和取胜的对手。这种对待时间的态度激发了更多的拖延。如果的你的主观时间跟钟表时间处于冲突之中，你就很难对最后期限有一个合理的预期，你也无法向着一个目标稳定地迈进，或者，对自己可以用多少时间将事情做完没有一个概念。</li>\n<li><strong>生物：</strong> 拖延的生物根源包括你的身体、大脑以及你的遗传基因。在你大脑中发生的事情会影响到你会回避什么样的感受，而你所回避的（或者你所没有回避的）会影响到你大脑的结构和功能。</li>\n<li><strong>人际关系</strong>：拖延的人际关系根源主要指你的家庭背景和社会关系，以及你在当今社会的地位。</li>\n</ol>\n<blockquote>\n<p>本书的一个主要观念就是：从你自己的经验中学习是一件令人兴奋而有趣的事情–不否认，不遗忘，不判断，而是如实接受，好好利用。</p>\n</blockquote>\n<h4 id=\"我怎么知道我是在拖延呢\">我怎么知道我是在拖延呢</h4>\n<p>人们经常不知道怎样辨识出真正的拖延，有时候我们只是将事情延后处理，因为我们没有时间去做每一件事，或者因为我们做事有所节制，需要一定的放松和休息。这两者的区别非常重要。<strong>要弄清拖延有没有成为你的一个问题，有一个办法就是看它是不是让你烦恼不已。</strong></p>\n<h4 id=\"拖延者的信条\">拖延者的信条</h4>\n<p>拖延除了作为一种自我保护的心理策略，也是源于你对生活的一些<strong>顽固</strong>信念。</p>\n<ul>\n<li>我必须要做到完美。</li>\n<li>我做每件事都应该轻而易举，不费力气。</li>\n<li>什么也不做要比冒失败的风险更为安全。</li>\n<li>没有什么是我无法做到的。</li>\n<li>如果不能把事情做好，那么它就根本不值得去做。</li>\n<li>我必须避开挑战。</li>\n<li>如果我成功，有人就会受到伤害。</li>\n<li>如果这一次我做得很好，那么我每次都应该做得很好。</li>\n<li>按照别人的规定做事意味着屈服和失去掌控。</li>\n<li>我不能承受失去任何人或任何事物。</li>\n<li>如果我展现真实的自己，人们不会喜欢我的。</li>\n<li>总有一个正确答案，我将一直等待直到发现它。</li>\n</ul>\n<p>这些信念反映了拖延者的一种阻止自己取得进展的思维方式。自责、害怕以及灾难性的想法让他们不可能越过日常生活中不可避免的困难。<font color=#FF000>意识到你的思维是不现实的，这是克服拖延的第一步</font>。</p>\n<p><font color=#FF000><strong>人们之所以会产生拖延的不良习性，是因为他们害怕。他们害怕如果他们行动了，他们的行为会让他们陷入麻烦。他们担心如果展示了自己真实的一面，会有危险的结果等着他们。在所有无序和拖拉的背后，他们其实在害怕他们不被接受，以至于他们不仅躲开这个世界，甚至还躲开自己。虽然要忍受自责、自轻和对自己的反感是相当痛苦的，但是比起去看清真实的自我所带来的脆弱和无地自容，这样的感受或者更能够被承受，拖延是保护他们的盾牌</strong></font>。</p>\n<h4 id=\"恐惧失败：追求完美\">恐惧失败：追求完美</h4>\n<p>害怕失败的人可能有一套他们自己的假设：①我做的事情直接反映了我的能力；②我的能力水平决定了我作为一个人所具有的价值，即我的能力越强，我的自我价值感越高；③我做的事情反映了我的个人价值。这些假设将为成就而奋斗变成了一件令人恐惧的冒险的事情。</p>\n<p>这个假设可以看作下列等式：<br>\n$$<br>\n自我价值感 = 能力 = 表现<br>\n$$<br>\n而拖延恰恰打断了能力与表现之间的等号。<br>\n$$<br>\n自我价值感 = 能力 \\neq 表现<br>\n$$<br>\n这使表现不再等同于能力，因为其间缺少完整的努力。<font color=#FF000>这意味着不管最终表现如何，自我价值感与能力之间的关系还能得以维系。人们通过拖延来安慰自己，让自己相信他们的能力要大于其表现，他们甚至还维护着这样一种信念：他们的潜在能力是出色的、不可限量的。通过拖延，你永远不会逼着自己去面对自己的能力限制在哪里。</font></p>\n<p><strong><font color=#FF000>有些人宁愿承受拖延所带来的痛苦后果，也不愿意承受努力之后却没有如愿以偿所带来的羞辱。对他们来说，责备自己邋遢、懒惰和不协作比把自己看成无能和无价值（而这就是他们深为恐惧的“失败”）要容易忍受得多。</font></strong></p>\n<h4 id=\"完美主义者的世界\">完美主义者的世界</h4>\n<p>那些拖延的人往往没有意识到他们是完美主义者。为了证明他们足够优秀，他们力求做到不可能做到的事情，认为要达成他们的远大目标应该没有任何问题。他们常常对自己有不现实的要求，当无法实现这样的要求时，就会变得不知所措。失望之余，他们通过拖延让自己从中退却。</p>\n<p>那些喜欢拖延的完美主义者有一些他们所钟爱的信念。这些信念甚至在你都没有意识到的情况下操纵着你，而且它们看上去冠冕堂皇，不但没有对你的进步起到作用，还为你的拖延鸣锣开道。</p>\n<p><strong>①平庸招致轻蔑：</strong> 如果你期望自己的日常表现都能达到理想的境地，那么不论你做什么，跟你的理想相比都是平庸的。你贬低平常和常规的表现，以轻蔑的眼光来看待它。因为在人类生活中错误和差池在所难免，所以那些不能忍受平常表现的人往往通过拖延来安慰自己。</p>\n<p><strong>②优秀不用努力：</strong> 如果一个人认为不管他面对的材料多复杂，他都应该能够马上理解它，一旦不能做到这一点时，他们的努力就会戛然而止。长此以往，<font color=#FF000><strong>他们对聪明的渴望却使他们变得无知。毕竟，如果你无法接受你不了解某些事情，你就不会学习它们</strong></font>。</p>\n<p><strong>③一切都自己来：</strong> 他们相信任何求助都是软弱的标志。</p>\n<p><strong>④总有一个正确的解决办法：</strong> 在发现正确的解决办法之前，他们不愿意采取任何行动，也不承担任何任务。因此，与其冒着做出错误决定的风险，不如什么也不做。</p>\n<p><strong>⑤我无法忍受失去：</strong> 很多完美主义者憎恨在竞争中失败，所以他们尽量避免参与到跟别人直接竞争的活动中。</p>\n<p><strong>⑥要么全部要么没有：</strong> 一个事事亲力亲为的人通常不会感知到事情正在离目标越来越近.只要项目还没有完成，对他们来说就相当于一事无成。</p>\n<p>要放弃完美的理想是一个非常缓慢的过程，即便你在理智中认同完美主义的标准是不现实的，这也是事与愿违，你还是会发现自己很难接受这个事实：<strong><font color=#FF000>你现在不是，从来也不是，将来也不可能是完美的</font></strong>。</p>\n<h4 id=\"心态\">心态</h4>\n<p><strong>固有心态认为</strong>：智力和才能是与生俱来的，是固定不变的。成功不过就是要证明你的能力，证明你是聪明的、有才干的。并且，在生活中面对每一个挑战的时候，你必须一再地证实这一点。</p>\n<p><strong>成长心态认为</strong>：能力是可以发展的；通过努力工作，你可以随着时间推移而变得更聪明、更优秀。在成长心态看来，努力可以让你更聪明或者更擅长于某件事情；努力可以激发你的能力并成就自己。在这样的心态看来，你没有必要立刻擅长某件事情。事实上，做一些你不擅长的事情反而更为有趣，因为通过做这样的事情，你可以拓展你自己，并从中学习</p>\n<blockquote>\n<p>这里提出值得深思的问题：“<font color=#FF000><strong>成功是为了学习和进步，还是为了证明你聪明？</strong></font>”</p>\n</blockquote>\n<h4 id=\"不完美的命运：真实的和想象的后果\">不完美的命运：真实的和想象的后果</h4>\n<p>完美主义者在思考他们所做事情的时候容易绝对化，也经常以灾难性的方式思考问题。一件小事的后果（比如说一个小错误）往往被他们夸大到无以复加的程序。一件小事就足以让他们感到大祸临头，可以看出是他们的固定心态在作祟。</p>\n<blockquote>\n<p>把成功定义为“及时追随目标”。从这个定义来看，无论什么时候，只要我们在做自己想做的事情，就会感到自己是成功的。</p>\n</blockquote>\n<h4 id=\"恐惧、逃避成功的一般心理原因\">恐惧、逃避成功的一般心理原因</h4>\n<p><strong>成功需要太多付出：这令我望而却步</strong></p>\n<ul>\n<li><strong>竞争</strong>:害怕成功的人不愿意加入到竞争中是因为他们害怕自己胜出，从而通过拖延来掩藏自己的野心，因为他们认为竞争本身就有问题。</li>\n<li><strong>进步的危险</strong>：通过拖延，可以降低自己成功的机会，给自己一个缓冲，好让自己不被众人注目或者陷入忙乱的生活。那么害怕成功的人担忧人们会加大对他的期待，这是他们的焦虑所在。</li>\n<li><strong>承诺恐惧症</strong>：想要远离聚光灯和躲避竞争，有一个间接的方法，那就是拖着不做承诺。如果你不承诺，就无法在任何一个方向上往前迈进，也就不可能一蹴而就地获得成功。</li>\n<li><strong>我会变成一个工作狂</strong>：有些害怕成功的拖延者担心：如果他们不再整天混日子而开始认真工作的话，他们就会一直这么干下去，永远也不会再有混日子的自由。</li>\n</ul>\n<p><strong>成功是危险的：总有人会受到伤害</strong></p>\n<ul>\n<li><strong>我不能伤害别人</strong>：虽然我们担心自已的成功会伤害到其他人，但是他们或许要比我们想象的更加坚强、大方。也许这是我们自己思考方式上的问题，也许我们扭曲和误会了周围的现实，让我们以为我们的成就不可避免地会伤害到别人。</li>\n<li><strong>我会受到伤害</strong>：许多人预感到成功会给他们带来的危险之一是他们确实会得到自己想要的–但是接着就会受到攻击。有人会向他挑衅，或者批评他，但是他感到自己不够强大，无法还击。</li>\n</ul>\n<p><strong>成功是禁区：我觉得自己不对劲</strong></p>\n<ul>\n<li>我不配成功:拖延可能被用于对做了坏事的一种惩罚。</li>\n<li>我命中注定不能获得成功：有些人的自我评价是如此之差，以至于他们认为自己根本与成功无缘。他们认为自己不能胜任、没有准备好或者不受人欢迎，在任何事情上都不认为自己会获得成功，所以他们干脆放弃了尝试。</li>\n<li>可能我这个人太完美了：有人会担心如果自己不加拖延地全速前进，那么成功会来得太容易，他们将拥有一切。由于他们的成功得来不费吹灰之力，他们担心自己会成为众人妒忌的目标。</li>\n</ul>\n","categories":["阅读"],"tags":["读书笔记"]},{"title":"SX1261/2芯片学习笔记","url":"//post/18/","content":"<h3 id=\"一、简介\">一、简介</h3>\n<p>SX1261/2 是半双工收发芯片，能够低功耗地工作在$150-960MH$z ISM频段。如下图所示。其包括模拟前端、数字调制解调、数字接口与控制、电源四个主要功能部分。</p>\n<blockquote>\n<p>ISM(Industrial Scientific Medical) Band，是由ITU-R （ITU Radiocommunication Sector，国际通信联盟无线电通信局）定义的。这些频段是为电信之外的其他射频用途挪出的频段。</p>\n</blockquote>\n<img data-src=\"https://hyh1370039199-1313349927.cos.ap-chengdu.myqcloud.com/img/202210081549710.png\" style=\"zoom: 50%;\" />\n<ol>\n<li>\n<p><strong>模拟前端部分</strong>：该部分为发射和接收链路，以及数据转换接口。SX1261与SX1262的发射链路中最后的功率放大电路是不相同的。SX1261在DC-DC或者LDO模式下都能够输出最大$+14/15dBm$的功率。SX1262在电池供电模式下能够输出最大$+22dBm$的功率。</p>\n</li>\n<li>\n<p><strong>数字调制解调部分</strong>：该款芯片支持两种调制解调方式：</p>\n<p>​\t①LoRa：带宽(BW)为7.8~500kHz，扩频因子(SF)为5~12，比特速率为0.018~62.5kb/s。</p>\n<p>​    ②（G）FSK：比特速率为0.6~300kb/s。</p>\n</li>\n<li>\n<p><strong>数字接口和控制部分</strong>：该部分包括所有的有效载荷和协议处理以及通过SPI接口对芯片进行配置的功能。</p>\n</li>\n<li>\n<p><strong>电源部分</strong>：该部分包含DC-DC或者LDO两种形式的电压转换器。</p>\n</li>\n</ol>\n<h3 id=\"二、电路描述\">二、电路描述</h3>\n<h4 id=\"1-时钟参考\">1.时钟参考</h4>\n<h5 id=\"RC-时钟参考\">RC 时钟参考</h5>\n<p>有两个RC时钟源可用：64kHz、13MHz。可以使用64kHz振荡器在执行周期性或占空比操作时唤醒射频芯片。13MHz的RC振荡器可用于所有SPI通信。</p>\n<h5 id=\"高精度时钟参考\">高精度时钟参考</h5>\n<p>由于LoRa芯片大功率发射时会发出大量热量，这个热量会热传导到外围晶振上，<font color=#FF0000>当未使用温补晶振（TCXO）时，晶振由于温度升高导致频率发生变化。普通晶振的振动频率随温度升高而降低。晶振提供的振荡频率发生偏移时，会影响整个LoRa射频芯片的锁相环频率，导致 LoRa设备发射的信号频率偏移</font>，当偏移频率大于一个极限时，就会发生丢包现象。</p>\n<p><strong>在LoRa调制下应该使包传输时间内的频率偏移降至最小并且低于$Freqdriftmax$</strong>:<br>\n$$<br>\nFreqdriftmax = \\frac{BW}{3\\times{2^{SF}}}<br>\n$$<br>\n<strong>在低空速模式下LowDataRateOptimize配置为0x01，可以将包传输时间内的频率偏移要求放松至$16\\times{Freq_drift_max}$</strong>：<br>\n$$<br>\nFreqdriftmax = \\frac{BW}{3\\times{2^{SF } } }\t\\times{16}<br>\n$$</p>\n<h4 id=\"2-XTAL控制（无源晶振）\">2.XTAL控制（无源晶振）</h4>\n<p>SX1261/2芯片不需要硬件在32MHz晶振旁加入电容元件。<font color=#FF0000><strong>该芯片引脚XTA、XTB配置了可编程电容器。电容器的值以0.47pF为步长，0x00会设置电容值为11.3pF（最小值），0x2F设置电容值为33.4pF（最大值）</strong></font>.</p>\n<p><img data-src=\"https://hyh1370039199-1313349927.cos.ap-chengdu.myqcloud.com/img/202210081654895.png\" alt=\"\"></p>\n<blockquote>\n<p>补充知识：</p>\n<img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/img/20220316151735.png\"  style=\"zoom:50%;\" />\n<p>根据下列公式来设置晶振旁的两个负载电容$C_g$和$C_d$：<br>\n$$<br>\nC_l \\approx \\frac{C_g * C_d}{C_g + C_d} + C_s<br>\n$$<br>\n其中$C_l$ 为晶振的标称负载电容，$C_s$为PCB的杂散电容，$C_s$一般经验值为3-5$pF$，并且一般取$C_g$ = $C_d$。晶振的标称负载电容可以查阅晶振的数据手册。$C_g$ 和 **$C_d$**变大晶体振荡的频率变小；$C_g$ 和 $C_d$变小晶体振荡的频率变大；</p>\n</blockquote>\n<p><strong>注意</strong>：使用XTAL时，在POR上电复位或冷启动模式下从休眠唤醒时，电容寄存器将值初始化为0x05(13.6pF)。<font color=#FF0000><strong>芯片设置为STDBY_XOSC模式，两个寄存器的值会被覆盖为0x12(19.7pF)。因此用户确保设备已处于STDBY_XOSC模式，然后才能更改电容寄存器的值，以免被覆盖</strong></font>。</p>\n<h4 id=\"3-TCXO控制（有源晶振）\">3.TCXO控制（有源晶振）</h4>\n<p>使用TCXO时，<strong>应通过一个220Ω电阻和一个10pF直流截止电容将其连接到XTA引脚</strong>，XTB引脚保持未连接状态。DIO3引脚可用于为TCXO提供稳压直流电压，可编程范围1.6V至3.3V。$V_{BAT}$应始终比编程电压高200mV，以确保正常工作。</p>\n<p><code>SetDIO3AsTCXOCtrl</code>该命令用于配置DIO3控制外部TCXO参考电压。</p>\n<p><img data-src=\"https://hyh1370039199-1313349927.cos.ap-chengdu.myqcloud.com/img/202210081736102.png\" alt=\"\"></p>\n<p><strong>注意</strong>：使用TCXO时，<code>SetDIO3AsTCXOCtrl</code>该命令被设置后，控制XTA内部电容值的寄存器将自动更改为0x2F（33.4pF），来过滤传播到PLL的杂散。</p>\n<p>使用此命令后，设备会在需要时（在STDBY_XOSC、FS、TX、RX模式下），将DIO3设置为预定义的输出电压。32MHz出现并稳定所需的时间可以通过参数delay（23:0）来控制。如果在延迟周期结束时，内部未检测到来自TCXO的32MHz，则错误控制器将标记错误 XOSC_START_ERR.</p>\n<h4 id=\"4-锁相环\">4.锁相环</h4>\n<p>锁相环（PLL,Phase-Locked Loop）是一种反馈控制电路。其特点为：<strong>利用外部的参考信号控制环路内部振荡信号的频率和相位</strong>。锁相环在工作的过程中，当输出信号的频率与输入信号的频率相等时，输出电压与输入电压保持固定的相位差值，即输出电压与输入电压的相位被锁住，这就是锁相环的名称由来。</p>\n<p>锁相环通常由鉴相器（PD,Phase Detector）、环路滤波器（LF,Loop Filter）和压控振荡器（VCO，Volatge Controlled Oscillator）三部分组成，锁相环组成的原理框图所下图所示。</p>\n<img data-src=\"https://hyh1370039199-1313349927.cos.ap-chengdu.myqcloud.com/img/202210091552944.png\" style=\"zoom: 50%;\" />\n<p><strong>工作原理</strong>：压控振荡器的输出经过采集并分频；和基准信号同时输入鉴相器；鉴相器通过比较上述两个信号的频率差，然后输出一个直流脉冲电压；控制VCO，使它的频率改变；这样经过一个很短的时间，VCO的输出就会稳定于某一期望值。</p>\n<h4 id=\"5-接收链路\">5.接收链路</h4>\n<p>接收到的射频信号首先经差分低噪声放大器（LNA）放大，然后经正交配置的混频器，下转换为低中频中频信号，I和Q信号经过低通滤波，然后由一个连续时间反馈结构转换器（ADC）进行数字化。一旦进入数字域，信号就被抽取，再次下转换，再次抽取，信道滤波并最终由选定的调制解调器根据调制方案解调。</p>\n<h4 id=\"6-发射链路\">6.发射链路</h4>\n<p>射频芯片的默认最大输出功率为SX1261: +14dBm，SX1262: +22dBm，输出功率可编程，具有32dB的动态范围，1dB的步进。</p>\n<p>SX1261/2芯片的供电方式为DC-DC或LDO，<font color=#FF0000><strong>使用DC-DC供电效率会更高，系统的供电电流会更小</strong></font>。</p>\n<img data-src=\"https://hyh1370039199-1313349927.cos.ap-chengdu.myqcloud.com/img/202210081933360.png\"  style=\"zoom:50%;\" />\n<p><strong>① SX1261功率放大器特性</strong></p>\n<p>对于SX1261芯片，当采用内部DC-DC供电时，发射机的功率效率将达到最高。在DC-DC模式下，总功耗将直接受供电电压的影响。</p>\n<p><strong>② SX1262功率放大器特性</strong></p>\n<p>SX1262工作在DC-DC模式时，DC-DC只负责为内核供电。对于SX1262，功率放大器优化了最大输出功率，同时最大限度地提高了效率，这导致如果要使SX1262保持较高的输出功率，就必须为其功率放大器提供相当高的电压。当输出功率最大时，功率放大器的电流效率最高，其输出功率受限于供电电压。</p>\n<h3 id=\"三、功率分配\">三、功率分配</h3>\n<h4 id=\"1-选择DC-DC或者LDO\">1.选择DC-DC或者LDO</h4>\n<p>用户可以使用命令<code>SetRegulatorMode</code>来指定DC-DC的使用。此操作必须仅以STDBY_RC模式执行。</p>\n<p><img data-src=\"https://hyh1370039199-1313349927.cos.ap-chengdu.myqcloud.com/img/202210081951587.png\" alt=\"\"></p>\n<h4 id=\"2-过流保护配置\">2.过流保护配置</h4>\n<p>OCP可以以2.5mA的步进进行配置，默认值会在每次调用<code>SetPaConfig</code>函数时自动重新配置，如果用户希望调整OCP值，则有必要在调用<code>SetPaConfig</code>函数的第二步进行设置。</p>\n<p><img data-src=\"https://hyh1370039199-1313349927.cos.ap-chengdu.myqcloud.com/img/202210081958611.png\" alt=\"\"></p>\n<h3 id=\"四、调制解调\">四、调制解调</h3>\n<h4 id=\"1-LoRa调制\">1.LoRa调制</h4>\n<p>开发人员可以设置四个关键的设计参数，每个参数需要在链路预算、抗干扰能力、频谱占用率和标称数据速率之间权衡：</p>\n<ul>\n<li>调制带宽（BW_L）</li>\n<li>扩频因子（SF）</li>\n<li>编码率（CR）</li>\n<li>低空速优化（LDRO）</li>\n</ul>\n<p>使用<code>SetModulationParams</code>命令设置这些参数，此命令必须在<code>SetPacketType</code>之后调用。</p>\n<h5 id=\"扩频因子\">扩频因子</h5>\n<p>LoRa扩频技术通过由多个信息片表示每个有效载荷信息位来执行。标称符号速率和数据速率之间的比值是扩频因子。它表示每位信息发送的符号数。</p>\n<p><strong>注意</strong>：对于SF5和SF6两个参数，推荐用户使用12个前导符号，以确保正确检测和解调，并具有最佳性能。</p>\n<p>由于不同的扩频因子彼此正交，因此在链路的发送端和接收端都必须事先知道扩频因子，<font color=#FF0000><strong>还需注意在每个不同扩频因子参数下的最大负信噪比。（正是这种接收负信噪比信号的能力提高LoRa芯片的灵敏度以及链路预算、范围。）</strong></font></p>\n<p><img data-src=\"https://hyh1370039199-1313349927.cos.ap-chengdu.myqcloud.com/img/202210082019176.png\" alt=\"\"></p>\n<p><font color=#FF0000><strong>扩频因子越大，传输时间越短，负信噪比越大，接收灵敏度更好。</strong></font>LoRa符号速率公式为：<br>\n$$<br>\nR_{s} = \\frac{BW}{2^{SF}}<br>\n$$</p>\n<h5 id=\"调制带宽\">调制带宽</h5>\n<p>信道带宽的增加会使有效数据速率提高，从而降低了灵敏度，减少了传输时间。LoRa调制带宽总是指双边带（DSB）。</p>\n<p><img data-src=\"https://hyh1370039199-1313349927.cos.ap-chengdu.myqcloud.com/img/202210082028349.png\" alt=\"\"></p>\n<p>对于BW为250kHz时，接收端执行两次转换，第一次在RF链路中下变换到低中频，第二次在基带调制解调器以数字方式进行基带转换。当使用500kHz带宽时，在RF部分执行一次下变换到零中频。</p>\n<h5 id=\"FEC编码率\">FEC编码率</h5>\n<p><font color=#FF0000><strong>编码率越高，抗噪声能力越强，但传输时间越长</strong></font>。在强干扰存在的情况下，可以使用更高的编码速率。</p>\n<p><img data-src=\"https://hyh1370039199-1313349927.cos.ap-chengdu.myqcloud.com/img/202210082119609.png\" alt=\"\"></p>\n<h5 id=\"低空速优化\">低空速优化</h5>\n<p><font color=#FF0000><strong>根据有效载荷的大小，当LoRa符号时间大于等于16.38ms，通常建议使用低空速优化</strong></font>。</p>\n<h5 id=\"LoRa帧格式\">LoRa帧格式</h5>\n<p><img data-src=\"https://hyh1370039199-1313349927.cos.ap-chengdu.myqcloud.com/img/202210082127155.png\" alt=\"\"></p>\n<h6 id=\"前导\">前导</h6>\n<p>LoRa PHY数据包的Preamble（前导）包含三部分：</p>\n<p><strong>（variable preamble）可变前导码</strong>：用于使接收端与传入信号同步，默认情况下，数据包配置为12个符号的前导码。前导码范围为10~65535.<font color=#FF0000><strong>前导码为up-chirp符号。</strong></font></p>\n<img data-src=\"https://hyh1370039199-1313349927.cos.ap-chengdu.myqcloud.com/img/202210082222500.png\" alt=\"image-20221008222250496\" style=\"zoom:33%;\" />\n<p><img data-src=\"https://hyh1370039199-1313349927.cos.ap-chengdu.myqcloud.com/img/202210082158878.png\" alt=\"\"></p>\n<p><strong>（Sync Word）帧同步字</strong>：可变长度前导码后，是两个符号宽度的帧同步字，可以用来快速识别不同的LoRa网络，LoRa芯片会直接丢弃真同步字内容与预设值不一致的数据包。</p>\n<p><img data-src=\"https://hyh1370039199-1313349927.cos.ap-chengdu.myqcloud.com/img/202210082159872.png\" alt=\"\"></p>\n<p><strong>（SFD，Start Frame Delimiter）帧起始分隔符</strong>(<strong>可以理解为前导码结束标记</strong>)：LoRa规范中数据包SFD为占2.25个符号宽度的标准down-chirp信号，标准down-chirp信号如下图所示：</p>\n<img data-src=\"https://hyh1370039199-1313349927.cos.ap-chengdu.myqcloud.com/img/202210082202252.png\" style=\"zoom:33%;\" />\n<p>LoRa PHY前导chirp波形如图所示：</p>\n<img data-src=\"https://hyh1370039199-1313349927.cos.ap-chengdu.myqcloud.com/img/202210082204769.png\"  style=\"zoom:67%;\" />\n<p><font color=#FF0000>对比LoRa两代的核心芯片后可以发现，新一代以SX1268代表的芯片，可以通过寄存器直接设置PHY层包格式中占两个符号宽度的Sync word值。但是前一代以SX1278为代表的芯片，通过寄存器只能设置一个符号之，因此如何由该一个符号设置值，扩展成两个符号宽度的PHY波形中的Sync Word值，是一个待确定的问题。</font></p>\n<p>由于LoRa底层标准未公开，目前对此部分数据映射，目前没有明确结论，只有几个猜想：假设SX1278等Sync Word设置为X：</p>\n<ul>\n<li>PHY中的两个符号，分别为$x$和$2^{SF}-x$</li>\n<li>PHY中的两个符号，分别为$x$和$x$</li>\n<li>将x的高四位和低四位分别映射到两个符号，映射关系如下图所示：</li>\n</ul>\n<img data-src=\"https://hyh1370039199-1313349927.cos.ap-chengdu.myqcloud.com/img/202210082221939.png\"  style=\"zoom: 33%;\" />\n<p>LoRa PHY数据包分别有两种Header模式：Explicit Header mode（<strong>显式包头</strong>）和Implicit Header mode（<strong>隐式包头</strong>），区别在于显式模式会在PHT的数据包中包含Header的内容，而隐式模式的数据包不包含Header的内容，为了进一步减少无线信号传递的内容，进一步达到节约传输时间，减少数据包冲突，降低模块运行功耗等目的。</p>\n<h6 id=\"包头\">包头</h6>\n<p>Header包括的内容有：payload数据包长度，CR编码方式，payload后是否包含CRC数据以及header内容的CRC。共占2.5字节长度，也就是20个Bit。<strong>注意Header部分固定采用CR=4/8的编码方式。</strong></p>\n<p><img data-src=\"https://hyh1370039199-1313349927.cos.ap-chengdu.myqcloud.com/img/202210090918020.png\" alt=\"\"></p>\n<p>Payload数据包长度：Header中的第一个Byte用于表示整个数据包中后续Payload内容的长度，占了8个bit，因此一包LoRa数据中，后续payload内容最大为255Byte。</p>\n<p><img data-src=\"https://hyh1370039199-1313349927.cos.ap-chengdu.myqcloud.com/img/202210090923777.png\" alt=\"\"></p>\n<p>编码率选择：LoRa标准定义了四种编码方式，分别将4个bit原始数据，经过编码后变化至5，6，7，8四种长度的数据。这四种编码方式的选择。定义在LoRa Header 中数据包长度接下来的半个Byte中的3个bit。</p>\n<p><img data-src=\"https://hyh1370039199-1313349927.cos.ap-chengdu.myqcloud.com/img/202210090929165.png\" alt=\"\"></p>\n<p>CRC存在控制：LoRa数据包的CRC是可以选择传输或者不传输，该机制的控制，定义在了编码率选择后的1个bit。如果数据包中存在CRC，那么还需要数据包后额外再传输2个Byte内容，即16bit CRC。</p>\n<p><img data-src=\"https://hyh1370039199-1313349927.cos.ap-chengdu.myqcloud.com/img/202210090934972.png\" alt=\"\"></p>\n<p>Header数据校验：LoRa Header数据中的最后一个Byte内容为Header数据字段的CRC校验。</p>\n<h5 id=\"LoRa信道活动检测（CAD-Channel-Activity-Detection）\">LoRa信道活动检测（CAD,Channel Activity Detection）</h5>\n<p>在确定信道是否被低于接收机底噪的信号占用，这种情况使用RSSI显然不可行的，因此需要CAD模式。</p>\n<p>芯片设定为进入CAD模式后，SX1261/2将在用户可选择的持续时间内（以数量定义）对频带进行扫描，如果在CAD过程中检测到LoRa信号,将会触发Cad中断。<font color=#FF0000>注意：无论是否有信号到来，都会产生CADDone中断，当有匹配（相同的频率和扩频因子）的信号到来时，就会产生CADDetect中断，CADDone也会产生。</font></p>\n<h4 id=\"2-FSK调制\">2.FSK调制</h4>\n<p><strong>由于LoRa测试灵敏度环境搭建复杂，FSK调制常常作为测试灵敏度所用的调制方式，作为判断硬件设计射频性能的一个依据。</strong></p>\n<h5 id=\"调制参数\">调制参数</h5>\n<p>使用<code>SetModulationParams</code>命令设置这些参数，此命令必须在<code>SetPacketType</code>之后调用。</p>\n<h6 id=\"比特率\">比特率</h6>\n<p>寄存器中的比特率值(BR)表示为晶振频率的32倍除以设备实际的比特率，公式表示为：<br>\n$$<br>\nBR = \\frac{F_{XOSC}}{BitRate}\\times{32}<br>\n$$<br>\n<img data-src=\"https://hyh1370039199-1313349927.cos.ap-chengdu.myqcloud.com/img/202210091029524.png\" alt=\"\"></p>\n<h6 id=\"频偏\">频偏</h6>\n<p>寄存器中的Fdev值与设备实际频偏的关系表达式如下：<br>\n$$<br>\nFrequencydeviation = \\frac{F_{dev}\\times{F_{XTAL}}}{2^{25}}<br>\n$$<br>\n<img data-src=\"https://hyh1370039199-1313349927.cos.ap-chengdu.myqcloud.com/img/202210091044770.png\" alt=\"\"></p>\n<h6 id=\"接收带宽\">接收带宽</h6>\n<p>用户需要根据其条件选择最佳的接收带宽，为了确保正确的解调，在选择带宽时必须遵守以下限制：<br>\n$$<br>\n（2*Fdev + BR）&lt; BW<br>\n$$</p>\n<p>$$<br>\nBandwidth \\geqslant BR + 2*frequency deviation + frequency error<br>\n$$</p>\n<p><font color=#FF0000>注意：频率误差应是晶振误差的两倍</font>。</p>\n<h6 id=\"帧格式\">帧格式</h6>\n<p><strong>固定包长数据包</strong></p>\n<p><img data-src=\"https://hyh1370039199-1313349927.cos.ap-chengdu.myqcloud.com/img/202210091108439.png\" alt=\"\"></p>\n<p><strong>可变包长数据包</strong></p>\n<p><img data-src=\"https://hyh1370039199-1313349927.cos.ap-chengdu.myqcloud.com/img/202210091143039.png\" alt=\"\"></p>\n<h6 id=\"白化\">白化</h6>\n<img data-src=\"https://hyh1370039199-1313349927.cos.ap-chengdu.myqcloud.com/img/202210091402631.png\"  style=\"zoom:67%;\" />\n<p>线性反馈移位寄存器（LFSR）多项式为：<br>\n$$<br>\ng(x) = x^9 + x^5 + 1<br>\n$$<br>\n更新的算法如下：</p>\n<p>1.白化序列新的第9位由第0位与第5位异或产生</p>\n<p>2.整体右移一位</p>\n<p>3.重复1，2步骤8次</p>\n<p>白化序列初始值设置如下图所示：</p>\n<p><img data-src=\"https://hyh1370039199-1313349927.cos.ap-chengdu.myqcloud.com/img/202210091412623.png\" alt=\"\"></p>\n<h6 id=\"CRC\">CRC</h6>\n<p>可以使用命令<code>SetPacketParam</code>中的<code>CRCType</code>字段 启用和配置CRC。</p>\n<img data-src=\"https://hyh1370039199-1313349927.cos.ap-chengdu.myqcloud.com/img/202210091415680.png\" style=\"zoom: 50%;\" />\n<p>CRC初始值：<font color=#FF0000><strong>开发人员可以利用读取该寄存器的初始值作为判断MCU SPI功能是否正常，是否可以与射频芯片正常交互</strong></font>。</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/*!\n *  @brief   检测SX126X芯片是否存在\n *  @note    1=> 存在,  0=> 不存在或SPI交互有问题\n*/</span>\nINT8U <span class=\"token function\">SX126X_GetIsExist</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  INT8U byte<span class=\"token punctuation\">;</span>\n  byte <span class=\"token operator\">=</span> <span class=\"token function\">SX126X_ReadRegister</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x06BC</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>byte <span class=\"token operator\">==</span> <span class=\"token number\">0x1D</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//0x1D为0x06BC寄存器的复位值</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<img data-src=\"https://hyh1370039199-1313349927.cos.ap-chengdu.myqcloud.com/img/202210091423666.png\"  style=\"zoom: 50%;\" />\n<p>CRC多项式：允许用户选取任何标准CRC或使用自己的CRC</p>\n<p><img data-src=\"https://hyh1370039199-1313349927.cos.ap-chengdu.myqcloud.com/img/202210091430107.png\" alt=\"\"></p>\n<p>要使用<strong>IBM CRC</strong>配置，用户必须选择以下参数：</p>\n<ul>\n<li>CRC多项式：0x8005</li>\n<li>初始值：0xFFFF</li>\n<li>CRCType： CRC_2_BYTE</li>\n</ul>\n<p>要使用 <strong>CCIT CRC</strong>配置，用户必须选择以下参数：</p>\n<ul>\n<li>CRC多项式：0x1021</li>\n<li>初始值：0x1D0F</li>\n<li>CRCType： CRC_2_BYTE_INV</li>\n</ul>\n<h3 id=\"五、数据缓冲区\">五、数据缓冲区</h3>\n<p>射频芯片具有256字节的RAM数据缓冲区，除了休眠模式，其他模式都可以访问。</p>\n<img data-src=\"https://hyh1370039199-1313349927.cos.ap-chengdu.myqcloud.com/img/202210091435678.png\"  style=\"zoom: 50%;\" />\n<p>由于Tx，Rx模式独立互不影响，<font color=#FF0000>开发时可以调用 <code>SX126xSetBufferBaseAddress( 0x00, 0x00 );</code>函数 使得TxBufferPointer、RxStartBufferPointer均在0x00起始</font>。</p>\n<blockquote>\n<p>注意：即使CRC是无效的，所有接收到的数据将写入数据区，允许用户自行处理损坏的数据，<font color=#FF0000><strong>这亦是我们测试灵敏度和开发测试中模块可以收到乱码的原因，如果不想要乱码的数据，请在中断触发事件中开启CRC Error事件，在检测接收中断RxDone事件触发后，再检测是否触发CRC Error，进而屏蔽掉乱码的数据</strong></font>。</p>\n</blockquote>\n<h3 id=\"六、数字接口及控制\">六、数字接口及控制</h3>\n<h4 id=\"1-复位引脚\">1.复位引脚</h4>\n<p>数据手册中标称，将Reset引脚拉低100us即可复位。<strong>开发时建议软件复位加一点冗余量</strong>，源码如下：</p>\n<pre class=\"language-C\" data-language=\"C\"><code class=\"language-C\">void SX126X_Reset(void)\n&#123;\n    Gpio_SetIO(SX126X_NRST_PORT,SX126X_NRST_PIN);\n    DelayMs(1);\n    Gpio_ClrIO(SX126X_NRST_PORT,SX126X_NRST_PIN);\n    DelayMs(1);\n    Gpio_SetIO(SX126X_NRST_PORT,SX126X_NRST_PIN);\n    DelayMs(1);\n    SX126X_WaitOnBusy();\n&#125;</code></pre>\n<h4 id=\"2-SPI相关引脚\">2.SPI相关引脚</h4>\n<p><img data-src=\"https://hyh1370039199-1313349927.cos.ap-chengdu.myqcloud.com/img/202210091512061.png\" alt=\"\"></p>\n<p>对于单片机如何配置 SPI，有两个重要参数：SPI 的<strong>时钟极性 CPOL</strong> 表示时钟信号在空闲时是高电平还是低电平；<strong>时钟相位 CPHA</strong> 表示何时进行信号采样，在第一个跳变沿，还是第二个跳变沿。</p>\n<p>由数据手册得知：<strong>CPOL = 0  CPHA = 0</strong></p>\n<p>NSS引脚在帧起始位置拉低，在数据字节传输完成拉高。</p>\n<p>注意：该射频芯片SPI速率最大支持16M。</p>\n<blockquote>\n<p><font color=#FF0000><strong>为了提高代码的可移植性以及可读性，建议RF底层关于SPI接口的操作（例如片选引脚拉高拉低，SPI交换字节等），以及一些GPIO引脚操作 用宏定义函数封装一下，便于后续替换单片机时进行移植</strong></font>。</p>\n</blockquote>\n<p>源码如下：</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">//宏定义函数封装</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">SX126X_NSS_LOW</span><span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>      <span class=\"token function\">Spi_SetCS</span><span class=\"token punctuation\">(</span>M0P_SPI0<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">SX126X_NSS_HIGH</span><span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>     <span class=\"token function\">Spi_SetCS</span><span class=\"token punctuation\">(</span>M0P_SPI0<span class=\"token punctuation\">,</span> TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">SPI_Exchange_Byte</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>   <span class=\"token function\">hal_spi_exchange_byte</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></span></span>\n\n<span class=\"token comment\">//写访问寄存器</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">SX126X_WriteRegisters</span><span class=\"token punctuation\">(</span>INT16U address<span class=\"token punctuation\">,</span>INT8U <span class=\"token operator\">*</span>buffer<span class=\"token punctuation\">,</span>INT16U size<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">SX126X_CheckDeviceReady</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">SX126X_NSS_LOW</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//NSS引脚拉低</span>\n    \n    <span class=\"token function\">SPI_Exchange_Byte</span><span class=\"token punctuation\">(</span>RADIO_WRITE_REGISTER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">SPI_Exchange_Byte</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>address <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xFF00</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">SPI_Exchange_Byte</span><span class=\"token punctuation\">(</span>address <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x00FF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>size<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">SPI_Exchange_Byte</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>buffer<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">SX126X_NSS_HIGH</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//NSS引脚拉高</span>\n    <span class=\"token function\">SX126X_WaitOnBusy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h4 id=\"3-BUSY引脚\">3.BUSY引脚</h4>\n<p>Busy引脚用于指示射频芯片的状态，当BUSY引脚为低电平时，它表示射频芯片处于空闲模式，并且芯片已准备好接收来自主机的命令。</p>\n<p>下面是BUSY引脚在射频各个工作模式的电平状态：</p>\n<ul>\n<li>在Sleep模式，Busy引脚拉高；当芯片退出休眠时，Busy引脚拉低。</li>\n<li>在FS模式，当锁相环锁定时，Busy引脚拉低。</li>\n<li>在RX模式，当RX准备好接收数据，Busy引脚将会拉低。</li>\n<li>在TX模式，当功率放大器已经放大并且前导码开始传输，Busy引脚将会拉低。</li>\n<li>当射频芯片在处理IRQ时，Busy引脚会拉高。</li>\n</ul>\n<h4 id=\"4-DIO引脚\">4.DIO引脚</h4>\n<p>可以选择3个DIO中的任何一个作为输出中断源。当中断触发后，它可以通过调用<code>GetIrqStatus</code>函数来确定源，然后可以调用<code>ClearIrqStatus</code>函数清除中断。</p>\n<p><font color=#FF0000>DIO引脚初始状态为低电平，中断触发时为高电平</font>。</p>\n<p><strong>DIO1</strong> ：任何中断都可以映射到DIO1.</p>\n<p><strong>DIO2</strong> ：具有两项功能：①可作为中断映射引脚；②<font color=#FF0000>调用<code>SetDio2AsRfSwitchCtrl</code>函数配置作为驱动射频开关的引脚，此时DIO2在Tx模式下为高电平，其余时刻为低电平</font>。</p>\n<p><strong>DIO3</strong> ：具有两项功能：①可作为中断映射引脚；②<font color=#FF0000>调用<code>SetDio3AsTCXOCtrl</code>函数作为TCXO的电源</font>。</p>\n<h3 id=\"七、关键函数解析\">七、关键函数解析</h3>\n<h4 id=\"1-设置工作模式\">1.设置工作模式</h4>\n<h5 id=\"SetStandby\">SetStandby</h5>\n<p><img data-src=\"https://hyh1370039199-1313349927.cos.ap-chengdu.myqcloud.com/img/202210091648276.png\" alt=\"\"></p>\n<p>对于射频芯片使用32MHz有源晶振和无源晶振在初始化时的区别，源码实现如下：</p>\n<pre class=\"language-C\" data-language=\"C\"><code class=\"language-C\">void SX126X_Init(void)\n&#123;\n    memset(&amp;g_sx126x_param,NULL,sizeof(g_sx126x_param));\n    SX126X_IOInit(); &#x2F;&#x2F;SX1262 IO初始化\n    SX126X_Reset(); &#x2F;&#x2F;复位\n    SX126X_WakeUp(); &#x2F;&#x2F;唤醒\n    if(!SX126X_GetIsExist()) &#x2F;&#x2F;验证MCU SPI功能是否正常\n    &#123;\n      debug_printf(&quot;sx126x is not existed!\\r\\n&quot;);\n      while(1);\n    &#125;\n#ifdef USE_TCXO\n    &#x2F;&#x2F;有源晶振\n    SX126X_SetStandby(STDBY_RC);\n    SX126X_SetDio3AsTcxoCtrl(TCXO_CTRL_2_2V,DEF_TCXO_CTRL_TIME);\n    SX126X_SetStandby(STDBY_XOSC);\n#else\n    &#x2F;&#x2F;无源晶振\n    SX126X_SetStandby(STDBY_XOSC);\n#endif\n    SX126X_WriteRegister(REG_XTA_TRIM,DEF_XTA_TRIM_VALUE); &#x2F;&#x2F;负载电容\n    SX126X_WriteRegister(REG_XTB_TRIM,DEF_XTA_TRIM_VALUE);\n    \n    SX126X_SetRegulatorMode(USE_DCDC);\n    SX126X_SetBufferBaseAddress(0x00, 0x00);\n    SX126X_SetDio2AsRfSwitchCtrl(TRUE);\n\n&#125;</code></pre>\n<p><font color=#FF0000><strong>请注意：内部负载电容的设置必须在调用<code>SX126X_SetStandby(STDBY_XOSC);</code>函数后执行，否则写入负载电容寄存器的值会被覆盖</strong></font>。</p>\n<h5 id=\"SetTx\">SetTx</h5>\n<p><strong>切换至Tx模式的具体步骤：</strong></p>\n<ul>\n<li>从STDBY_RC模式开始，切换至STDBY_XOSC模式，PLL开启。PA开启，PA根据设置的斜坡时间开始放大。</li>\n<li>当放大完成后，数据包开始传输。</li>\n<li>当数据包的最后一位被发送时，触发TxDone中断，PA关闭，芯片回到STDBY_RC模式。</li>\n<li>如果TxDone中断没有在给定的超时时间内生成，则触发发送超时中断，芯片回到STDBY_RC模式。</li>\n</ul>\n<p><img data-src=\"https://hyh1370039199-1313349927.cos.ap-chengdu.myqcloud.com/img/202210091726754.png\" alt=\"\"></p>\n<p>超时持续时间使用下式计算：<br>\n$$<br>\nTimeout_{duration} = Timeout \\times {15.625us}<br>\n$$<br>\n源码实现如下：</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">SX126X_SetTx</span><span class=\"token punctuation\">(</span>INT32U timeout<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    INT8U buf<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">SX126X_SetStandby</span><span class=\"token punctuation\">(</span>STDBY_XOSC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">SX126X_WriteRegister</span><span class=\"token punctuation\">(</span>REG_XTA_TRIM<span class=\"token punctuation\">,</span>DEF_XTA_TRIM_VALUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">SX126X_WriteRegister</span><span class=\"token punctuation\">(</span>REG_XTB_TRIM<span class=\"token punctuation\">,</span>DEF_XTA_TRIM_VALUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    g_sx126x_param<span class=\"token punctuation\">.</span>OperatingMode <span class=\"token operator\">=</span> MODE_TX<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">SX126X_SetDioIrqParams</span><span class=\"token punctuation\">(</span>IRQ_TX_DONE <span class=\"token operator\">|</span> IRQ_RX_TX_TIMEOUT<span class=\"token punctuation\">,</span>\n                                    IRQ_TX_DONE <span class=\"token operator\">|</span> IRQ_RX_TX_TIMEOUT<span class=\"token punctuation\">,</span>\n                                    IRQ_RADIO_NONE<span class=\"token punctuation\">,</span> IRQ_RADIO_NONE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//将中断事件映射到DIO1上，事件包括发送完成中断、发送超时中断</span>\n    <span class=\"token function\">SX126X_ClearIrqStatus</span><span class=\"token punctuation\">(</span>IRQ_RADIO_ALL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//清除全部中断</span>\n    buf<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>INT8U<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>timeout <span class=\"token operator\">>></span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    buf<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>INT8U<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>timeout <span class=\"token operator\">>></span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    buf<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>INT8U<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>timeout <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">SX126X_WriteCommand</span><span class=\"token punctuation\">(</span>RADIO_SET_TX<span class=\"token punctuation\">,</span>buf<span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<blockquote>\n<p><font color=#FF0000>我们开发时采用的是Timeout为0的参数，对于发送超时或者发送中断未触发的异常情况，采用射频复位的方式解决</font>。</p>\n</blockquote>\n<h5 id=\"SetRx\">SetRx</h5>\n<p><img data-src=\"https://hyh1370039199-1313349927.cos.ap-chengdu.myqcloud.com/img/202210092024938.png\" alt=\"\"></p>\n<blockquote>\n<p>我们开发时采用的是Timeout为0的参数，直到一次接收发生，否则一直处于接收状态。</p>\n</blockquote>\n<p>源码实现如下：</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">SX126X_SetRx</span><span class=\"token punctuation\">(</span>INT32U timeout<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    INT8U buf<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">SX126X_SetStandby</span><span class=\"token punctuation\">(</span>STDBY_XOSC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">SX126X_WriteRegister</span><span class=\"token punctuation\">(</span>REG_XTA_TRIM<span class=\"token punctuation\">,</span>DEF_XTA_TRIM_VALUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">SX126X_WriteRegister</span><span class=\"token punctuation\">(</span>REG_XTB_TRIM<span class=\"token punctuation\">,</span>DEF_XTA_TRIM_VALUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    g_sx126x_param<span class=\"token punctuation\">.</span>OperatingMode <span class=\"token operator\">=</span> MODE_RX<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">SX126X_SetDioIrqParams</span><span class=\"token punctuation\">(</span>IRQ_RX_DONE <span class=\"token operator\">|</span> IRQ_RX_TX_TIMEOUT<span class=\"token operator\">|</span>IRQ_PREAMBLE_DETECTED<span class=\"token punctuation\">,</span>\n                           IRQ_RX_DONE <span class=\"token operator\">|</span> IRQ_RX_TX_TIMEOUT<span class=\"token operator\">|</span>IRQ_PREAMBLE_DETECTED<span class=\"token punctuation\">,</span>\n                           IRQ_RADIO_NONE<span class=\"token punctuation\">,</span>IRQ_RADIO_NONE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//将中断事件映射到DIO1上，事件包括接收完成、接收超时，前导码检测中断。</span>\n    <span class=\"token function\">SX126X_SetPacketParams</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>g_sx126x_param<span class=\"token punctuation\">.</span>PacketParams<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//设置数据包参数</span>\n    <span class=\"token function\">SX126X_ClearIrqStatus</span><span class=\"token punctuation\">(</span>IRQ_RADIO_ALL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//清除全部中断</span>\n    buf<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">;</span>\n    buf<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">;</span>\n    buf<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">SX126X_WriteCommand</span><span class=\"token punctuation\">(</span>RADIO_SET_RX<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h5 id=\"SetSleep\">SetSleep</h5>\n<p><img data-src=\"https://hyh1370039199-1313349927.cos.ap-chengdu.myqcloud.com/img/202210092030969.png\" alt=\"\"></p>\n<p>源码实现如下：</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">//常用配置，休眠唤醒后寄存器值保留</span>\nSleepParams_t sleepCfg<span class=\"token punctuation\">;</span>\nsleepCfg<span class=\"token punctuation\">.</span>Value <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\nsleepCfg<span class=\"token punctuation\">.</span>Fields<span class=\"token punctuation\">.</span>WarmStart <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">SX126X_SetSleep</span><span class=\"token punctuation\">(</span>SleepParams_t sleepCfg<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    g_sx126x_param<span class=\"token punctuation\">.</span>OperatingMode <span class=\"token operator\">=</span> MODE_SLEEP<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">SX126X_WriteCommand</span><span class=\"token punctuation\">(</span>RADIO_SET_SLEEP<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>sleepCfg<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h4 id=\"2-功率设置\">2.功率设置</h4>\n<h5 id=\"SetTxParams\">SetTxParams</h5>\n<p><img data-src=\"https://hyh1370039199-1313349927.cos.ap-chengdu.myqcloud.com/img/202210091822473.png\" alt=\"\"></p>\n<p>该函数参数power用作Tx输出功率，参数rampTime用作设置Tx斜坡时间。</p>\n<ul>\n<li>如果选择小功率PA，则输出功率为-17(0xEF)至+14(0x0E)dBm的范围内，步长为1dB。</li>\n<li>如果选择大功率PA，则输出功率为-9(0xF7)至+22(0x16)dBm的范围内，步长为1dB。</li>\n</ul>\n<p>使用<code>SetPaConfig</code>函数中的参数$deviceSel$可以选择大功率PA还是小功率PA。</p>\n<p>斜坡时间设置：</p>\n<img data-src=\"https://hyh1370039199-1313349927.cos.ap-chengdu.myqcloud.com/img/202210091937839.png\"  style=\"zoom: 50%;\" />\n<h5 id=\"SetPaConfig\">SetPaConfig</h5>\n<p>该函数用作PA配置；其设置参数有$paDutyCycle、hpMax、deviceSel、paLut$；其中$paDutyCycle$控制芯片功放的占空比，并且最大输出功率，功率消耗，谐波会随着功率周期的变化而急剧变化；hpMax则是控制芯片的输出功率上限；deviceSel是选择使用的设备类型。</p>\n<p><img data-src=\"https://hyh1370039199-1313349927.cos.ap-chengdu.myqcloud.com/img/202210091953209.png\" alt=\"\"></p>\n<h5 id=\"PA-Optimal-Settings\">PA Optimal Settings</h5>\n<p><img data-src=\"https://hyh1370039199-1313349927.cos.ap-chengdu.myqcloud.com/img/202210091956020.png\" alt=\"\"></p>\n<p><font color=#FF0000><strong>使用PA最佳设置进行功率分档，理论上会比使用SetTxParam函数进行功率分档功耗更低</strong></font>。</p>\n<p><img data-src=\"https://hyh1370039199-1313349927.cos.ap-chengdu.myqcloud.com/img/202210091959515.png\" alt=\"\"></p>\n<p><font color=#FF0000><strong>注意：必须遵守以下限制避免PA过压，超过最大额定值可能会对设备造成不可逆的损坏!</strong></font></p>\n<ul>\n<li>SX1261：对于频率在400MHz以上，$paDutyCycle$不应高于0x07。</li>\n<li>SX1261：对于频率低于400MHz，$paDutyCycle$不应高于0x04。</li>\n<li>SX1262：$paDutyCycle$不应高于0x04。</li>\n</ul>\n<h4 id=\"3-频率设置\">3.频率设置</h4>\n<h5 id=\"SetRfFrequency\">SetRfFrequency</h5>\n<img data-src=\"https://hyh1370039199-1313349927.cos.ap-chengdu.myqcloud.com/img/202210092106654.png\"  style=\"zoom:50%;\" />\n<p>源码实现如下：</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/*!\n * \\brief Provides the frequency of the chip running on the radio and the frequency step\n *\n * \\remark These defines are used for computing the frequency divider to set the RF frequency\n */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">XTAL_FREQ</span>                                   <span class=\"token expression\"><span class=\"token punctuation\">(</span> <span class=\"token keyword\">double</span> <span class=\"token punctuation\">)</span><span class=\"token number\">32000000</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FREQ_DIV</span>                                    <span class=\"token expression\"><span class=\"token punctuation\">(</span> <span class=\"token keyword\">double</span> <span class=\"token punctuation\">)</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25.0</span> <span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FREQ_STEP</span>                                   <span class=\"token expression\"><span class=\"token punctuation\">(</span> <span class=\"token keyword\">double</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span> XTAL_FREQ <span class=\"token operator\">/</span> FREQ_DIV <span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">DEF_XTA_TRIM_VALUE</span>                          <span class=\"token expression\"><span class=\"token number\">0x1C</span></span></span>\n   \n<span class=\"token keyword\">void</span> <span class=\"token function\">SX126X_SetRfFrequency</span><span class=\"token punctuation\">(</span>INT32U frequency<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    INT8U buf<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    INT32U freq <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    CalibrationParams_t calibParams<span class=\"token punctuation\">;</span>\n    calibParams<span class=\"token punctuation\">.</span>Value <span class=\"token operator\">=</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">SX126X_Calibrate</span><span class=\"token punctuation\">(</span>calibParams<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">SX126X_CalibrateImage</span><span class=\"token punctuation\">(</span>frequency<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token function\">SX126X_SetStandby</span><span class=\"token punctuation\">(</span>STDBY_XOSC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">SX126X_WriteRegister</span><span class=\"token punctuation\">(</span>REG_XTA_TRIM<span class=\"token punctuation\">,</span>DEF_XTA_TRIM_VALUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">SX126X_WriteRegister</span><span class=\"token punctuation\">(</span>REG_XTB_TRIM<span class=\"token punctuation\">,</span>DEF_XTA_TRIM_VALUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    freq <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>INT32U<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span>frequency<span class=\"token operator\">/</span>FREQ_STEP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    buf<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>INT8U<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>freq <span class=\"token operator\">>></span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    buf<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>INT8U<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>freq <span class=\"token operator\">>></span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    buf<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>INT8U<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>freq <span class=\"token operator\">>></span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    buf<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>INT8U<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>freq <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">SX126X_WriteCommand</span><span class=\"token punctuation\">(</span>RADIO_SET_RFFREQUENCY<span class=\"token punctuation\">,</span>buf<span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">/*!</span></code></pre>\n<p>寄存器设置的Freq值与设备实际频率的关系表达式如下：<br>\n$$<br>\nFreq = \\frac{ RF_{Freq} \\times { F_{XTAL} } } { 2^{ 25 } }<br>\n$$</p>\n<h5 id=\"CalibrateImage\">CalibrateImage</h5>\n<p>校准是由参数freq1和freq2定义的频率范围进行的。设置不同的频率时，对于处于不同频率范围的情况，需要重新校准。</p>\n<p><img data-src=\"https://hyh1370039199-1313349927.cos.ap-chengdu.myqcloud.com/img/202210092112970.png\" alt=\"\"></p>\n<h4 id=\"4-调制参数设置\">4.调制参数设置</h4>\n<h5 id=\"SetModulationParams\">SetModulationParams</h5>\n<p><img data-src=\"https://hyh1370039199-1313349927.cos.ap-chengdu.myqcloud.com/img/202210092122212.png\" alt=\"\"></p>\n<p>LoRa调制参数设置：①扩频因子SF；②调制带宽BW；③编码率CR；④低空速优化ldro。</p>\n<p>GFSK调制参数设置：①比特率br；②脉冲整形PulseShape；③接受带宽Bandwidth；④Fdev频偏。</p>\n<p>源码实现如下：</p>\n<pre class=\"language-C\" data-language=\"C\"><code class=\"language-C\">void SX126X_SetModulationParams( ModulationParams_t *modulationParams )\n&#123;\n    uint8_t n;\n    uint32_t tempVal &#x3D; 0;\n    uint8_t buf[8] &#x3D; &#123; 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 &#125;;\n\n    &#x2F;&#x2F; Check if required configuration corresponds to the stored packet type\n    &#x2F;&#x2F; If not, silently update radio packet type\n    if( PacketType !&#x3D; modulationParams-&gt;PacketType )\n    &#123;\n        SX126xSetPacketType( modulationParams-&gt;PacketType );\n    &#125;\n\n    switch( modulationParams-&gt;PacketType )\n    &#123;\n    case PACKET_TYPE_GFSK:\n        n &#x3D; 8;\n        tempVal &#x3D; ( uint32_t )( 32 * ( ( double )XTAL_FREQ &#x2F; ( double )modulationParams-&gt;Params.Gfsk.BitRate ) );\n        buf[0] &#x3D; ( tempVal &gt;&gt; 16 ) &amp; 0xFF;\n        buf[1] &#x3D; ( tempVal &gt;&gt; 8 ) &amp; 0xFF;\n        buf[2] &#x3D; tempVal &amp; 0xFF;\n        buf[3] &#x3D; modulationParams-&gt;Params.Gfsk.ModulationShaping;\n        buf[4] &#x3D; modulationParams-&gt;Params.Gfsk.Bandwidth;\n        tempVal &#x3D; ( uint32_t )( ( double )modulationParams-&gt;Params.Gfsk.Fdev &#x2F; ( double )FREQ_STEP );\n        buf[5] &#x3D; ( tempVal &gt;&gt; 16 ) &amp; 0xFF;\n        buf[6] &#x3D; ( tempVal &gt;&gt; 8 ) &amp; 0xFF;\n        buf[7] &#x3D; ( tempVal&amp; 0xFF );\n        SX126xWriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );\n        break;\n    case PACKET_TYPE_LORA:\n        n &#x3D; 4;\n        buf[0] &#x3D; modulationParams-&gt;Params.LoRa.SpreadingFactor;\n        buf[1] &#x3D; modulationParams-&gt;Params.LoRa.Bandwidth;\n        buf[2] &#x3D; modulationParams-&gt;Params.LoRa.CodingRate;\n        buf[3] &#x3D; modulationParams-&gt;Params.LoRa.LowDatarateOptimize;\n\n        SX126xWriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );\n\n        break;\n    default:\n    case PACKET_TYPE_NONE:\n        return;\n    &#125;\n&#125;</code></pre>\n<h4 id=\"5-获取芯片状态以及设备错误状态\">5.获取芯片状态以及设备错误状态</h4>\n<p><font color=#FF0000><strong>在开发调试时遇到芯片异常不工作时，可以采用以下这两个函数进行排查问题原因</strong></font>。</p>\n<h5 id=\"GetStatus\">GetStatus</h5>\n<p>直接检测芯片当前状态，<font color=#FF0000>芯片出现异常，可以在每次切换模式后调用该函数，检查是否真正地切换到期望状态？</font></p>\n<p>源码实现如下：</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\">RadioStatus_t <span class=\"token function\">SX126X_GetStatus</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    INT8U stat <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    RadioStatus_t status<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">SX126X_ReadCommand</span><span class=\"token punctuation\">(</span>RADIO_GET_STATUS<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>INT8U<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>stat<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    status<span class=\"token punctuation\">.</span>Value <span class=\"token operator\">=</span> stat<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> status<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p><img data-src=\"https://hyh1370039199-1313349927.cos.ap-chengdu.myqcloud.com/img/202210092101706.png\" alt=\"\"></p>\n<h5 id=\"GetDeviceErrors\">GetDeviceErrors</h5>\n<p>使用该命令检测设备当前是否进入某种错误状态？</p>\n<p>源码实现如下：</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\">RadioError_t <span class=\"token function\">SX126X_GetDeviceErrors</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    RadioError_t error<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">SX126X_ReadCommand</span><span class=\"token punctuation\">(</span>RADIO_GET_ERROR<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>INT8U<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>error<span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> error<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<img data-src=\"https://hyh1370039199-1313349927.cos.ap-chengdu.myqcloud.com/img/202210092118108.png\" style=\"zoom:50%;\" />\n<img data-src=\"https://hyh1370039199-1313349927.cos.ap-chengdu.myqcloud.com/img/202210092118580.png\" style=\"zoom:50%;\" />\n<h4 id=\"6-获取RSSI\">6.获取RSSI</h4>\n<h5 id=\"GetRssiInst\">GetRssiInst</h5>\n<p><img data-src=\"https://hyh1370039199-1313349927.cos.ap-chengdu.myqcloud.com/img/202210092045923.png\" alt=\"\"></p>\n<p><img data-src=\"https://hyh1370039199-1313349927.cos.ap-chengdu.myqcloud.com/img/202210092046557.png\" alt=\"\"></p>\n<p>该函数获取的值为一个有符号整型，而串口输出的value是无符号整型。所以当前的信道噪声 = -（256 - value）；单位为dBm。</p>\n<h5 id=\"GetPacketStatus\">GetPacketStatus</h5>\n<p><img data-src=\"https://hyh1370039199-1313349927.cos.ap-chengdu.myqcloud.com/img/202210092046689.png\" alt=\"\"></p>\n<p><img data-src=\"https://hyh1370039199-1313349927.cos.ap-chengdu.myqcloud.com/img/202210092046502.png\" alt=\"\"></p>\n<p>几个参数：</p>\n<p>① RssiPkt:上一包接收数据的平均RSSI信号强度，实际信号强度值为-RssiPkt/2.单位为dBm。</p>\n<p>② SnrPkt:以二进制补码格式，接收的上一包数据的SNR估计值乘以4.实际值为 SnrPkt /4. 单位为dB。</p>\n<p>③ SignalRssiPkt：接收的上一包数据解扩频后RSSI的估计值，实际值为-  SignalRssiPkt /2.单位为dBm.</p>\n<p><strong>SX1262官方例程中有该函数的实现：</strong></p>\n<p><img data-src=\"https://hyh1370039199-1313349927.cos.ap-chengdu.myqcloud.com/img/202210092048034.png\" alt=\"\"></p>\n<blockquote>\n<p><strong>Semtech FAE给出的说明</strong></p>\n<p><font color=#FF0000><strong>在不考虑Cable Loss的情况下，</strong></font></p>\n<p><font color=#FF0000><strong>当SNR &gt; 0时，RssiPkt即为Packet RSSI；</strong></font></p>\n<p><font color=#FF0000><strong>当SNR &lt; 0时，信号是在噪声以下传输，所以Packet RSSI = SignalRssiPkt（即Current_RSSI） + SNR</strong></font>；</p>\n</blockquote>\n<p>不同的带宽BW有不同的底噪，如下表：（LLCC68）</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">带宽（KHz）</th>\n<th style=\"text-align:center\">RSSI(dBm)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">125</td>\n<td style=\"text-align:center\">-114~-115</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">250</td>\n<td style=\"text-align:center\">-111~-112</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">500</td>\n<td style=\"text-align:center\">-107~-108</td>\n</tr>\n</tbody>\n</table>\n<p>接收端所需的最小信噪比阈值见下表，小于该值后，芯片不能有效的解调出信号。</p>\n<p><img data-src=\"https://hyh1370039199-1313349927.cos.ap-chengdu.myqcloud.com/img/202210092054205.png\" alt=\"\"></p>\n<h4 id=\"7-发送单载波\">7.发送单载波</h4>\n<h5 id=\"SetTxContinuousWave\">SetTxContinuousWave</h5>\n<p>该条命令一般在CE、FEC等认证或者生产测试时使用，作为发送单载波或功率的一种手段。</p>\n<img data-src=\"https://hyh1370039199-1313349927.cos.ap-chengdu.myqcloud.com/img/202210092116441.png\"  style=\"zoom: 50%;\" />\n<p>源码实现如下：</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">SX126X_SetTxContinuousWave</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">SX126X_WriteCommand</span><span class=\"token punctuation\">(</span>RADIO_SET_TXCONTINUOUSWAVE<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h4 id=\"8-中断状态相关操作\">8.中断状态相关操作</h4>\n<h5 id=\"SetDioIrqParams\">SetDioIrqParams</h5>\n<p>将中断事件绑定至DIOx引脚，作为输出中断源。</p>\n<p><img data-src=\"https://hyh1370039199-1313349927.cos.ap-chengdu.myqcloud.com/img/202210092135929.png\" alt=\"\">源码实现如下：</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">SX126X_SetDioIrqParams</span><span class=\"token punctuation\">(</span>INT16U irqMask<span class=\"token punctuation\">,</span>INT16U dio1Mask<span class=\"token punctuation\">,</span>INT16U dio2Mask<span class=\"token punctuation\">,</span>INT16U dio3Mask<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    INT8U buf<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    buf<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>INT8U<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>irqMask <span class=\"token operator\">>></span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x00FF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    buf<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>INT8U<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>irqMask <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x00FF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    buf<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>INT8U<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>dio1Mask <span class=\"token operator\">>></span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x00FF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    buf<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>INT8U<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>dio1Mask <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x00FF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    buf<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>INT8U<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>dio2Mask <span class=\"token operator\">>></span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x00FF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    buf<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>INT8U<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>dio2Mask <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x00FF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    buf<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>INT8U<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>dio3Mask <span class=\"token operator\">>></span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x00FF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    buf<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>INT8U<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>dio3Mask <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x00FF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">SX126X_WriteCommand</span><span class=\"token punctuation\">(</span>RADIO_CFG_DIOIRQ<span class=\"token punctuation\">,</span>buf<span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>相关中断事件：</p>\n<img data-src=\"https://hyh1370039199-1313349927.cos.ap-chengdu.myqcloud.com/img/202210092138347.png\"  style=\"zoom:50%;\" />\n<h5 id=\"GetIrqStatus\">GetIrqStatus</h5>\n<p>获取当前设备中断状态。</p>\n<img data-src=\"https://hyh1370039199-1313349927.cos.ap-chengdu.myqcloud.com/img/202210092132496.png\"  style=\"zoom:50%;\" />\n<p>源码实现如下：</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\">INT16U <span class=\"token function\">SX126X_GetIrqStatus</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    INT8U irqStatus<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">SX126X_ReadCommand</span><span class=\"token punctuation\">(</span>RADIO_GET_IRQSTATUS<span class=\"token punctuation\">,</span> irqStatus<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>irqStatus<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> irqStatus<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h5 id=\"ClearIrqStatus\">ClearIrqStatus</h5>\n<p>清除指定中断标志</p>\n<img data-src=\"https://hyh1370039199-1313349927.cos.ap-chengdu.myqcloud.com/img/202210092134284.png\"  style=\"zoom:50%;\" />\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">SX126X_ClearIrqStatus</span><span class=\"token punctuation\">(</span>INT16U irq<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    INT8U buf<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    buf<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>INT8U<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>INT16U<span class=\"token punctuation\">)</span>irq <span class=\"token operator\">>></span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x00FF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    buf<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>INT8U<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>INT16U<span class=\"token punctuation\">)</span>irq <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x00FF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">SX126X_WriteCommand</span><span class=\"token punctuation\">(</span>RADIO_CLR_IRQSTATUS<span class=\"token punctuation\">,</span>buf<span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h3 id=\"八、总结\">八、总结</h3>\n<p>以上就是结合SX1262数据手册以及在开发时遇到的一些问题及调试时的一些经验，对自己学习的记录，虽然主要叙述的是SX1261/2，但LoRa芯片基本框架还是一致的，使用其他LoRa芯片时也可以参考一下，若文中有出错之处，望指正！</p>\n","categories":["技术"],"tags":["射频开发"]}]