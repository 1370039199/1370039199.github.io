[{"title":"CC1101研发笔记","url":"//post/1/","content":"<h3 id=\"一、研发流程及注意事项\">一、研发流程及注意事项</h3>\n<p>开发人员可在TI官网下载CC1101芯片相关手册及配置软件：</p>\n<ul>\n<li><a href=\"https://www.ti.com.cn/cn/lit/ds/symlink/cc1101.pdf?ts=1644562100340&amp;ref_url=https%253A%252F%252Fwww.ti.com.cn%252Fproduct%252Fzh-cn%252FCC1101%253FkeyMatch%253DCC1101%2526tisearch%253Dsearch-everything%2526usecase%253DGPN\">CC1101芯片数据手册</a></li>\n<li><a href=\"https://www.ti.com/tool/download/SMARTRFTM-STUDIO?_ticdt=MTY0NDU2MTk3NHwwMTc5Nzk5OTE3OGYwMDFmOTc0N2E5ZjE5MjNiMDMwODMwMDI3MDdiMDA5Nzh8R0ExLjMuMjEyNjkwNTg5MS4xNjIxMjQyNzQ4\">芯片配置软件SmartRF Studio 7</a></li>\n</ul>\n<img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/img/20220216155945.png\"  style=\"zoom:80%;\" />\n<p>开发人员可以利用SmartRF Studio 7软件对各射频参数进行设定，软件右边会显示相关寄存器的值、各射频参数的具体设置如下：</p>\n<h4 id=\"1-频率设置\">1.频率设置</h4>\n<p><strong>起始频率</strong>由<strong>FREQ2,FREQ1,FREQ0寄存器</strong>来设置。<strong>信道间隔</strong>由<strong>MDMCFG0寄存器中的CHANSPC_M[7:0]</strong>：尾数以及<strong>MDMCFG1寄存器中的CHANSPC_E[1:0]</strong>：指数来设置。<strong>信道号</strong>由**CHANNR寄存器中的CHAN[7:0]**来设置。<strong>载波频率</strong>的公式如下：<br>\n$$<br>\nf_{carrier}=\\frac{ f_{XOSC} }{ 2^{16} }\\cdot(FREQ+CHAN\\cdot((256+CHANSPC_M)\\cdot2^{ {CHANSPC_E}-2 } ))<br>\n$$<br>\n<strong>中频频率</strong>由  <strong>FSCTRL1寄存器中的FREQ_IF[4:0]</strong>  设置。中频频率的公式如下：<br>\n$$<br>\nf_{IF}=\\frac{ f_{XOSC} }{ 2^{10} }\\cdot{FREQ_{IF} }<br>\n$$<br>\n<strong>注意事项：</strong></p>\n<ul>\n<li>使用26M晶振时，最大可设置信道间隔为405KHz。如果想得到1MHz的信道间隔，解决办法是设置333KHz的信道间隔，每隔三个间隔选择一个实际信道。</li>\n<li>频率方面的设置只能在芯片处于空闲状态时更改。</li>\n</ul>\n<h4 id=\"2-输出功率设置\">2.输出功率设置</h4>\n<p><strong>PATABLE</strong>寄存器可以存储8个用户选择的输出功率配置，<strong>FREND0寄存器中的PA_POWER[2:0]</strong>  设置了当前PATABLE中有效的功率值的个数。PA_POWER[2:0] = 0表示关闭了在数据包传输开始和结束时的功率斜坡变化，只使用PATABLE的索引0作为输出功率。</p>\n<ul>\n<li>\n<p>使用OOK调制时，逻辑0和逻辑1的功率电平分别由PATABLE的索引0和索引1来配置.</p>\n</li>\n<li>\n<p>使用ASK调制时，从<strong>索引0到FREND0.PA_POWER值</strong>的输出功率将被用于PA功率斜坡递增和递减整形。</p>\n</li>\n</ul>\n<p><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/img/image-20210602103723540.png\" alt=\"\"></p>\n<p>使用ASK调制时，调制器内部有一个计数器，其计数速率是发送信号速率的FREND0.PA_POWER倍，每递增或递减一次，则改变一次功率值，计数器计数到FREND0.PA_POWER又回复到0.</p>\n<p><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/img/image-20210602103755934.png\" alt=\"\"></p>\n<p><strong>注意事项：</strong></p>\n<ul>\n<li>如果想写入PATABLE[0]以外的条目，必须采用<strong>突发访问模式</strong>。</li>\n<li>进入SLEEP模式后，PATABLE除了索引0其余的信息都会丢失。</li>\n</ul>\n<h4 id=\"3-数据速率设置\">3.数据速率设置</h4>\n<p>数据速率通过  <strong>MDMCFG3寄存器中的DRATE_M[7:0]以及MDMCFG4寄存器的DRATE_E[3:0]</strong>  来配置.公式如下：<br>\n$$<br>\nR_{DATA}=\\frac{(256+DRATE_M)\\cdot{2<sup>{DRATE_E}}}{2</sup>{28}}\\cdot{f_{XOSC}}<br>\n$$<br>\n对于给定的速率值可以通过以下公式来得到相应的寄存器值。（当DRATE_M接近256时，可置DRATE_M = 0,DRATE_E加一，可理解成  <strong>进位操作</strong>  ）<br>\n$$<br>\nDRATE_E=log_{2}(\\frac{R_{DATA}\\cdot{2^{20}}}{f_{XOSC}})<br>\n$$</p>\n<p>$$<br>\nDRATE_{M}=\\frac{R_{DATA}\\cdot{2<sup>{28}}}{f_{XOSC}\\cdot{2</sup>{DRATE_E}}}-256<br>\n$$</p>\n<h4 id=\"4-接收滤波器带宽设置\">4.接收滤波器带宽设置</h4>\n<p>接收滤波带宽通过  <strong>MDMCFG4.CHANBW_E[7:6]和MDMCFG4.CHANBW_M[5:4]</strong>  来设置，以下为寄存器配置与滤波带宽的关系：<br>\n$$<br>\nBW_{channel}=\\frac{f_{XOSC}}{8\\cdot(4+CHANBW_M)\\cdot2^{CHANBW_E}}<br>\n$$<br>\n下图是CC1101支持的接收滤波器带宽：</p>\n<p><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/img/image-20210602131750821.png\" alt=\"\"></p>\n<h4 id=\"5-调制类型设置\">5.调制类型设置</h4>\n<p>调制类型由  <strong>MDMCFG2寄存器的MOD_FORMAT[6:4]</strong>  来设置，如下图不同的寄存器值对应不同的调制类型。</p>\n<p><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/img/image-20210602132924458.png\" alt=\"\"></p>\n<p><strong>注意事项：</strong></p>\n<ul>\n<li>MSK支持26Kbps以上的数据速率</li>\n<li>射频数据可选择曼彻斯特编码和解码来进行调制和解调。设置  <strong>MDMCFG2寄存器中的MANCHESTER[3]</strong>  值为1即可。</li>\n<li>曼彻斯特编码不支持与FEC前向纠错/Interleaver交织器或者MSK、4-FSK调制格式同时使用。</li>\n</ul>\n<h4 id=\"6-频偏设置\">6.频偏设置</h4>\n<p>CC1101支持2-FSK和4-FSK调制，2-FSK可以选择由BT=0.5的高斯滤波器整形、产生GFSK调制信号。这种频谱整形的调制方式改善了ACP（相邻信道功率）和占用带宽。</p>\n<p>当使用2-FSK/4-FSK/GFSK调制格式时，使用<strong>DEVIATN</strong>寄存器来设置<strong>频率偏移</strong>。要保证TX频偏与RX预期频偏一致，以便可以稳定解调。频率偏移由<strong>DEVIATN寄存器中的DEVIATION_M和DEVIATION_E</strong>来设置。公式如下：<br>\n$$<br>\nf_{dev}=\\frac{f_{XOSC}}{2<sup>{17}}\\cdot{(8+DEVIATION_M)}\\cdot{2</sup>{DEVIATION_E}}<br>\n$$<br>\n关于2-FSK/GFSK/4-FSK调制格式的符号编码如下图所示：</p>\n<p><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/img/image-20210602135909703.png\" alt=\"\"></p>\n<p>注意事项：</p>\n<ul>\n<li>\n<p>使用4-FSK调制时，前导码和同步字是使用2-FSK调制格式来发送的，如下图所示。</p>\n<p><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/img/image-20210602134312812.png\" alt=\"\"></p>\n</li>\n<li>\n<p>MSK最小频移键控，前导码、同步字、有效数据载荷均由MSK调制。相移以恒定的过渡时间执行，可以使用<strong>DEVIATN寄存器中的DEVIATION_M</strong>设置<strong>相位的符号周期</strong>。</p>\n</li>\n<li>\n<p>OOK开关键控使用PA功率的开关分别来调制逻辑1和逻辑0，<strong>DEVIATN</strong>寄存器在使用OOK/ASK时无作用。</p>\n</li>\n</ul>\n<h4 id=\"7-数据包格式\">7.数据包格式</h4>\n<p><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/img/image-20210602154628051.png\" alt=\"\"></p>\n<p><strong>数据包格式：前导码+同步字+长度+地址+数据段+CRC16</strong></p>\n<h5 id=\"①前导码\">①前导码</h5>\n<p>在时域下， 一般由 1010 或者 0101 二进制码构成。</p>\n<p><strong>MDMCFG寄存器中的NUM_PREABLE[2:0]</strong>  设置了传输时前导码的最小字节数。</p>\n<p><strong>PKTCTRL1寄存器中的PQT[7:5]</strong>  设置了前导质量阈值，只有RX接收了超过该前导质量阈值的前导码，这个数据才可被接收。</p>\n<h5 id=\"②同步字\">②同步字</h5>\n<p><strong>MDMCFG2寄存器中的SYNC_MODE[2:0]</strong>  设置了同步字传输和检测模式。例如：值3（011）和值7（111）启用了TX的重复同步字传输和RX的32位同步字检测，需要32位中的30位匹配上。</p>\n<p><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/img/image-20210602145108992.png\" alt=\"\"></p>\n<p><strong>SYNC1[7:0],SYNC0[7:0]<strong>设置了</strong>同步字的16位字段</strong>，该字段可以被重复调用为32位，解调器可以通过该字段来找到数据流的字节边界。</p>\n<h5 id=\"③CRC校验\">③CRC校验</h5>\n<p><strong>PKTCTRL0寄存器中的CRC_EN[2]</strong>  值设置为1代表CRC校验使能。</p>\n<p><strong>PKTCTRL1寄存器中的APPEND_STATUS[2]</strong>  值设置为1代表两个状态字节会添加到数据包的有效数据之后。</p>\n<p>第一个字节表示<strong>RSSI[7:0]</strong>.</p>\n<p>第二个字节包含<strong>CRC_OK[7]和LQI[6:0]</strong>,CRC_OK这个标志位在收到数据包CRC校验成功或者CRC校验未使能时为1；在收到数据包后CRC校验失败为0。LQI代表链路质量。</p>\n<p><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/img/image-20210602152334186.png\" alt=\"\"></p>\n<h5 id=\"④地址校验\">④地址校验</h5>\n<p>接收数据包的地址校验配置由  <strong>PKTCTRL1寄存器中的ADR_CHK[1:0]</strong>  来配置。</p>\n<p><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/img/image-20210602152906767.png\" alt=\"\"></p>\n<p>如果地址校验位配置为01/10/11,则在发送的数据包中需添加一个设备地址字节，并在接收时校验该设备地址。</p>\n<h5 id=\"⑤数据包长度校验\">⑤数据包长度校验</h5>\n<p><strong>PKTCTRL0寄存器中的LENGTH_CONFIG[1:0]</strong>  设置数据包长度。</p>\n<p><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/img/image-20210602153129320.png\" alt=\"\"></p>\n<p>00代表固定包长模式，数据包长度由PKTLEN寄存器来配置。（支持数据包长度到255字节）</p>\n<p>01代表可变包长模式，数据包长度配置在数据包中同步字之后的第一个字节。（支持数据包长度到255字节）。</p>\n<p>10代表无限包长模式，更长的数据包必须采用该模式。</p>\n<p>**对于大于255个字节数的数据发送：**因为在发送和接收时，PKTCTRL寄存器都是可编程的。所以允许芯片接收大于255个字节的数据。实现方式为，先将数据包发送接收模式设置为无限数据包格式，当剩余数据包个数小于256个字节时，将数据包格式切换为固定数据包长度格式.把剩余的字节数写入PKTLEN寄存器。</p>\n<p><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/img/image-20210602155207963.png\" alt=\"\"></p>\n<h5 id=\"⑥白化\">⑥白化</h5>\n<p>通过加白噪声来提高数据的抗干扰能力。通过<strong>PKTCTRL0寄存器的WHITE_DATA[6] 设置为1</strong>来使能<strong>数据白化</strong>功能，将数据包中从数据包长度部分到CRC校验部分的所有数据通过和一个9位的虚拟随机数相异或。在接收方通过相同的序列将数据异或恢复成原来数据。数据白化要在FEC或者交织编码前完成。</p>\n<p>PN9序列初始值均为1.（111111111）</p>\n<p>这一方法的提出起源于时钟同步，为了同步发射信号和接收信号的时钟，可以利用数据来对两者的时钟进行微调，而数据中0和1的交替出现频率越大，微调的效率就越高，如果出现长串的0或者1，微调就很困难，出现连续的0或者1，就可以通过白化算法生成0和1尽可能均匀出现的序列。</p>\n<p><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/img/image-20210602162005996.png\" alt=\"\"></p>\n<p>Data ：发送端的原始数据      Whitening Key：白化序列    Whiten Data：Whitening Key与Data 做XOR运算 异或：值相同输出为0，值不同输出为1.下图是数据白化和反白化的例子：</p>\n<p><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/img/image-20210602162715892.png\" alt=\"\"></p>\n<p>**Whitening的更新：**9位白化序列，最高位MSB不参与XOR运算。如上图生成多项式为：<br>\n$$<br>\ng(x) = x<sup>9+x</sup>5+1<br>\n$$<br>\n更新算法如下：</p>\n<p>1.新的第9位由第0位和第五位XOR产生</p>\n<p>2.整体右移一位</p>\n<p>3.重复1，2步骤8次</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">MSB（X<sup>8</sup>）</th>\n<th style=\"text-align:center\">X<sup>7</sup></th>\n<th style=\"text-align:center\">X<sup>6</sup></th>\n<th style=\"text-align:center\"><strong>X<sup>5</sup></strong></th>\n<th style=\"text-align:center\">X<sup>4</sup></th>\n<th style=\"text-align:center\">X<sup>3</sup></th>\n<th style=\"text-align:center\">X<sup>2</sup></th>\n<th style=\"text-align:center\">X<sup>1</sup></th>\n<th style=\"text-align:center\">X<sup>0</sup></th>\n<th style=\"text-align:center\">Counter</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">---------</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">3</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">4</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">5</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">6</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">7</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">8</td>\n</tr>\n</tbody>\n</table>\n<p>如上图Whiten Key：11111111更新后得到11100001</p>\n<p>参考资料：<a href=\"https://www.silabs.com/documents/public/application-notes/AN592.pdf\">AN592.pdf (silabs.com)</a></p>\n<h5 id=\"⑦FEC-交织编码\">⑦FEC/交织编码</h5>\n<p><strong>MDMCFG1寄存器中的FEC_EN[7] 值置为1</strong>代表使能FEC并与交织搭配使用（仅支持固定包长模式）。</p>\n<p><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/img/20220217171230.png\" alt=\"\"></p>\n<p>交织编码的目的是把一个较长的突发差错离散成随机差错，再用纠正随机差错的编码（FEC）技术消除随机差错。交织深度越大，则离散度越大，抗突发差错能力也就越强。但交织深度越大，交织编码处理越长，从而造成数据传输时延增大，交织编码是以时间为代价的。</p>\n<p><strong>交织编码器工作原理：</strong></p>\n<p>信道编码采用交织技术，可打乱码、字、比特之间的相关性，将信道中传输过程中的成群突发错误转换为随机错误，从而提高整个通信系统的可靠性。交织器有两种结构类型：分组结构和卷积结构。分组结构是把待编码的m×n个数据位放入一个m行n列的矩阵，即每次对m×n个数据位进行交织，由下图可知，数据位按行填入，而在发送时按列读出，这样就产生了对原始数据位以m个比特为周期进行分隔的效果。在接受端的解交织操作则与此相反。</p>\n<p><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/img/image-20210603130124787.png\" alt=\"\"></p>\n<p>对于FEC算法是如何实现纠错的，有兴趣的可以看下这篇文章<a href=\"https://zhuanlan.zhihu.com/p/103888948\">理解FEC（Reed-Solomon）编码</a></p>\n<h4 id=\"8-Data-FIFO\">8.Data FIFO</h4>\n<p>CC1101包含两个64字节的FIFO，一个用于发送数据，一个用于接收数据。RX FIFO,TX FIFO内的字节数可通过读<strong>RXBYTES寄存器中的NUM_RXBYTES[6:0]值和TXBYTES寄存器中的NUM_TXBYTES[6:0]值</strong>来获取。</p>\n<p>当数据包长小于64字节时，推荐等待完整的数据包被接收到后再从RX FIFO读出来。</p>\n<p>当数据包长大于64字节时，MCU必须要判断可以从RX FIFO读多少个字节。</p>\n<p>可以使用下列软件流程参考：</p>\n<p>①以至少两倍的接收 RF 字节的速率重复读取 RXBYTES.NUM_RXBYTES，直到返回相同的值两次； 并且把值存储在n中。</p>\n<p>②如果n&lt;数据包剩余的字节数，则从RX FIFO读取n-1个字节。</p>\n<p>③重复①②过程，直到n=数据包剩余的字节数。</p>\n<p>④从RX FIFO读取剩余的字节数。</p>\n<p><strong>FIFOTHR寄存器中的FIFO_THR[3:0]</strong>  用于设置TX FIFO和RX FIFO的阈值。当达到阈值时，这为FIFO上溢和下溢留下了相同的余量。如下图所示。</p>\n<p><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/img/image-20210602183226222.png\" alt=\"\"></p>\n<p>可以选择GDOx_CFG[5:0]为RX FIFO 上溢，TX FIFO 下溢事件，触发相应的GDO引脚电平变化。</p>\n<h4 id=\"9-WOR-Wake-On-Radio-模式\">9.WOR(Wake On Radio)模式</h4>\n<p><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/img/image-20210602184952243.png\" alt=\"\"></p>\n<p>如上图所示，表示WOR的过程，Event0，Event1代表两个定时器，Event0控制WOR的周期长度，Event1表示芯片从唤醒到空闲状态的时间即等待晶振起振到稳定的时间。</p>\n<p>在休眠模式中（WOR使能），到达Event0将会开启数字稳压器和晶振。WOR周期由  <strong>WOREVT1寄存器中的EVENT0[7:0]和WOREVT2寄存器中的EVENT0[7:0]</strong>,<strong>WORCTRL寄存器中的WOR_RES[1:0]</strong>  来设置。公式如下：<br>\n$$<br>\nt_{Event0}=\\frac{750}{f_{XOSC}}\\cdot{EVENT_0}\\cdot{2^{5\\cdot{WOR_{RES}}}}<br>\n$$<br>\n对于26M晶振，芯片进入休眠模式到到达下一个Event0的时间应不小于11.08ms。计算公式如下：<br>\n$$<br>\nt_{SLEEP_{min}} = \\frac{750}{f_{xosc}}\\cdot384<br>\n$$<br>\nWOR周期的最小值应为：</p>\n<p><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/img/image-20210602190555165.png\" alt=\"\"></p>\n<p><strong>Event1的周期时间可由WORCTRL寄存器的EVENT1[6:4]</strong>  来设置。公式为：<br>\n$$<br>\nt_{Event1}=x\\cdot{\\frac{750}{f_{xosc}}}<br>\n$$<br>\n<strong>WOR设置步骤：</strong></p>\n<p><strong>1.首先要确定接收时间：</strong></p>\n<p>一般WOR设计中的接收方是由发送方决定的，若要成功唤醒或在其醒来过程中可靠地接收数据必须使接收时间&gt;=发送周期时间的两倍。例如：发射周期为7.5ms，则在一个WOR周期内唤醒设备，WOR接收时间需要&gt;=15ms，这里取15ms。</p>\n<p><strong>发射周期应该与空速相关，可配置MDMCFG4,MDMCFG3寄存器来验证。</strong></p>\n<p><strong>2.确定接收时间</strong></p>\n<p>占空比的大小决定了WOR过程的功耗，占空比越小对应的功耗就越小。</p>\n<p><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/img/image-20210602192337874.png\" alt=\"\"></p>\n<p><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/img/image-20210602192423301.png\" alt=\"\"></p>\n<p>接收时间为15ms，</p>\n<p><strong>3.根据占空比和接收时间确定Tevent0值</strong><br>\n$$<br>\nt_{RXtimeout}=t_{Event0}\\cdot{DutyCycle}<br>\n$$<br>\n所以假如选择默认的EVENT0 = 0x876B，WOR_RES = 0时，应选择1.563%的占空比，即MCSM2.RX_TIME = 3,此时$t_{Event0}=1s$,$t_{RXtimeout}=15.93ms$</p>\n<p><strong>4.确定Tevent1时间</strong></p>\n<p>t<sub>Event1</sub>时间取决于晶振起振并稳定的时间，其对寄存器设置公式如下图：</p>\n<p><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/img/image-20210603091927869.png\" alt=\"\"></p>\n<p><strong>5.确定与WOR周期有关寄存器的值</strong></p>\n<p>WOREVT1:0x87</p>\n<p>WOREVT0:0x6B</p>\n<p>WORCTRL:0x78</p>\n<p>MCSM0:0x38 （MCSM0.FS_AUTOCAL[5:4] = 11 见CC1101数据手册P82，可以降低功耗）</p>\n<p><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/img/20220218110518.png\" alt=\"\"></p>\n<p>MCSM2:0x13（MCSM2.RX_TIME_RSSI[4] = 1,见CC1101数据手册P9，可以降低功耗，见下图）<strong>重要！！！</strong></p>\n<p><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/img/image-20210603094247653.png\" alt=\"\"></p>\n<p>该WOR模式配置实现仅提供参考，基于CC1101来做WOR模式采用硬件实现还是软件实现还需实际调试来衡量优缺点！</p>\n<h4 id=\"10-RSSI模式\">10.RSSI模式</h4>\n<p>RSSI值是当前信道的信号强度的估计值。其以 dBm 为单位。<strong>RSSI 更新率 $f_{RSSI}$ 取决于接收器滤波器带宽$BW_{channel}$和 AGCCTRL0寄存器的FILTER_LENGTH值</strong>。公式如下：<br>\n$$<br>\nf_{RSSI} = \\frac{ 2\\cdot{ BW_{channel} } }{8\\cdot{ 2^{FILTER_{LENGTH} }}}<br>\n$$<br>\nPKTCTRL1寄存器中的APPEND_STATUS值使能后， RSSI 值自动添加到数据包后附加的第一个字节。</p>\n<p>从RSSI寄存器读取的RSSI值为二进制补码。需要经过以下程序转换为实际信号强度（$RSSI_{dBm}$）。</p>\n<p>①读取RSSI状态寄存器。</p>\n<p>②将读数从十六进制转换为十进制数（$RSSI_{dec}$）</p>\n<p>③如果$RSSI_{dec}$ &gt;= 128 则 $RSSI_{dBm} = (RSSI_{dec}- 256)/ 2 - RSSI_{offset}$。</p>\n<p>④如果$RSSI_{dec}$&lt; 128 则 $RSSI_{dBm}  = RSSI_{dec}/ 2 - RSSI_{offset}$。</p>\n<h3 id=\"二、代码实现\">二、代码实现</h3>\n<h4 id=\"1-SPI配置\">1.SPI配置</h4>\n<p>CC1101通过SPI进行配置。数据发送时先发<strong>高位</strong>，所有在SPI传输的数据包含<strong>读写位（R:1/W:0）+突发访问位+六位地址的头字节。</strong></p>\n<p><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/img/image-20210602110936806.png\" alt=\"\"></p>\n<p>对于单片机如何配置SPI，有两个重要参数：SPI的<strong>时钟极性CPOL</strong>表示时钟信号在空闲时是高电平还是低电平；<strong>时钟相位CPHA</strong>表示何时进行信号采样，在第一个跳变沿，还是第二个跳变沿。由上图可判断时钟信号在空闲时为低电平，并在第一个跳变沿进行采样。</p>\n<p><strong>注意事项：</strong></p>\n<p>当片选CSn拉低后，发送起始头字节前一定要判断<strong>SO引脚的电平是否为低电平</strong>，为低则说明CC1101晶振已经起振，为高则说明CC1101处于SLEEP模式或晶振关闭模式。</p>\n<h4 id=\"2-射频底层基本操作实现\">2.射频底层基本操作实现</h4>\n<p>SPI功能准备好了，接下来我们就可以实现射频芯片的基本操作：读写寄存器、读写状态/命令，由于SPI传输数据时的头字节格式为<strong>读写位（R:1/W:0）+突发访问位+六位地址</strong>的形式。所以读写寄存器时头字节可以写为如下形式：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><strong>写</strong>（W：0,突发访问位：0）</th>\n<th style=\"text-align:center\"><strong>0x00|六位地址</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><strong>连续写（W：0,突发访问位：1）</strong></td>\n<td style=\"text-align:center\"><strong>0x40|六位地址</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>读（R：1,突发访问位：1）</strong></td>\n<td style=\"text-align:center\"><strong>0x80|六位地址</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>连续读（R：1,突发访问位：1）</strong></td>\n<td style=\"text-align:center\"><strong>0xC0|六位地址</strong></td>\n</tr>\n</tbody>\n</table>\n<p>那么CC1101读写寄存器的操作便可实现为如下伪代码形式：</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/*!\n *  @brief   读寄存器\n *  @param   addr：寄存器地址\n *  @return  对应寄存器的值\n*/</span>\nINT8U <span class=\"token function\">CC1101_ReadRegister</span><span class=\"token punctuation\">(</span>INT8U addr<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    INT8U value<span class=\"token punctuation\">;</span>\n    CSN_LOW<span class=\"token punctuation\">;</span><span class=\"token comment\">//片选拉低</span>\n    value <span class=\"token operator\">=</span> <span class=\"token function\">SPI_ExchangeByte</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x80</span><span class=\"token operator\">|</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//SPI写入0x80|addr字节，把读取到的值存储在value中。</span>\n    CSN_HIGH<span class=\"token punctuation\">;</span><span class=\"token comment\">//片选拉高</span>\n    <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">/*!\n *  @brief   读多个寄存器\n *  @param   addr：寄存器地址;buffer:将读取到的值存储到该buffer中;\n*/</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">CC1101_ReadRegisters</span><span class=\"token punctuation\">(</span>INT8U addr<span class=\"token punctuation\">,</span>INT8U <span class=\"token operator\">*</span>buffer<span class=\"token punctuation\">,</span>INT8U size<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    INT8U i<span class=\"token punctuation\">;</span>\n    CSN_LOW<span class=\"token punctuation\">;</span><span class=\"token comment\">//片选拉低</span>\n    <span class=\"token function\">SPI_ExchangeByte</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xC0</span><span class=\"token operator\">|</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//SPI写入0xC0|addr字节->连续读取</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>size<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>buffer<span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">SPI_ExchangeByte</span><span class=\"token punctuation\">(</span>SPI_NOP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//写入无操作指令，将读取的值存储在buffer中。</span>\n\t<span class=\"token punctuation\">&#125;</span>\n    CSN_HIGH<span class=\"token punctuation\">;</span><span class=\"token comment\">//片选拉高</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">/*!\n *  @brief   写寄存器\n *  @param   addr：寄存器地址;value：将写入寄存器的值\n*/</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">CC1101_WriteRegister</span><span class=\"token punctuation\">(</span>INT8U addr<span class=\"token punctuation\">,</span>INT8U value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    CSN_LOW<span class=\"token punctuation\">;</span><span class=\"token comment\">//片选拉低</span>\n    <span class=\"token function\">SPI_ExchangeByte</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x00</span><span class=\"token operator\">|</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//SPI写入0x00|地址</span>\n    <span class=\"token function\">SPI_ExchangeByte</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//SPI写入寄存器的值</span>\n    CSN_HIGH<span class=\"token punctuation\">;</span><span class=\"token comment\">//片选拉高</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">/*!\n *  @brief   写多个寄存器\n *  @param   addr：寄存器地址;buffer：存储将要写入值的buffer;size：将要写入的大小\n*/</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">CC1101_WriteRegisters</span><span class=\"token punctuation\">(</span>INT8U addr<span class=\"token punctuation\">,</span>INT8U <span class=\"token operator\">*</span>buffer<span class=\"token punctuation\">,</span>INT8U size<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    CSN_LOW<span class=\"token punctuation\">;</span><span class=\"token comment\">//片选拉低</span>\n    <span class=\"token function\">SPI_ExchangeByte</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x40</span><span class=\"token operator\">|</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//SPI写入0x40|地址</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>size<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">SPI_ExchangeByte</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>buffer<span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//SPI写入寄存器的值</span>\n\t<span class=\"token punctuation\">&#125;</span>\n    CSN_HIGH<span class=\"token punctuation\">;</span><span class=\"token comment\">//片选拉高</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p><strong>写入命令</strong>：命令选通寄存器通过传输单个头字节来访问（没有数据正在传输）。即只有 R/W位、突发访问位（设置为 0）和六位地址(范围为0x30-0x3D)。</p>\n<p><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/img/20220218174423.png\" alt=\"\"></p>\n<p>CC1101写入命令的操作便可实现为如下伪代码形式：</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/*!\n *  @brief   写命令到命令选通寄存器\n *  @param   addr：寄存器地址\n*/</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">CC1101_WriteCommand</span><span class=\"token punctuation\">(</span>INT8U cmd<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    CSN_LOW<span class=\"token punctuation\">;</span><span class=\"token comment\">//片选拉低</span>\n    <span class=\"token function\">SPI_ExchangeByte</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x00</span><span class=\"token operator\">|</span>cmd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    CSN_HIGH<span class=\"token punctuation\">;</span><span class=\"token comment\">//片选拉高</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p><strong>读取状态</strong>：对于0x30-0x3D的寄存器地址，当突发位为1时，会访问状态寄存器。</p>\n<p><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/img/20220218174524.png\" alt=\"\"></p>\n<p>CC1101读取状态的操作便可实现为如下伪代码形式：</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/*!\n *  @brief   读状态寄存器\n *  @param   addr：状态寄存器地址\n *  @return  对应寄存器的值\n*/</span>\nINT8U <span class=\"token function\">CC1101_ReadStatus</span><span class=\"token punctuation\">(</span>INT8U addr<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    INT8U status<span class=\"token punctuation\">;</span>\n    CSN_LOW<span class=\"token punctuation\">;</span><span class=\"token comment\">//片选拉低</span>\n    <span class=\"token function\">SPI_ExchangeByte</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xC0</span><span class=\"token operator\">|</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    status <span class=\"token operator\">=</span> <span class=\"token function\">SPI_ExchangeByte</span><span class=\"token punctuation\">(</span>SPI_NOP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    CSN_HIGH<span class=\"token punctuation\">;</span><span class=\"token comment\">//片选拉高</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h4 id=\"3-根据基本操作实现简单收发功能\">3.根据基本操作实现简单收发功能</h4>\n<h5 id=\"①初始化部分\">①初始化部分</h5>\n<p>包括频率、空速、功率、数据包格式、及 中断触发事件等参数设置。下面以设置空速为例，其余参数设置与其相似，具体可参考CC1101底层函数库。设置空速的代码如下：</p>\n<pre class=\"language-C\" data-language=\"C\"><code class=\"language-C\">&#x2F;*!\n *  @brief   空速设置 \n *  @param   value:需要写入MDMCFG3、MDMCFG4寄存器的值,可封装为查表形式来传入索引值\n *&#x2F;\nvoid CC1101_SetDataRate(INT16U value)\n&#123;\n    INT8U mask;\n    mask &#x3D; CC1101_ReadRegister(CC1101_MDMCFG4);&#x2F;&#x2F;读取MDMCFG4寄存器的值\n    mask &amp;&#x3D; 0xF0;\n    mask |&#x3D; 0x0F &amp; (value &gt;&gt; 8);\n    CC1101_WriteRegister(CC1101_MDMCFG4,mask);\n    CC1101_WriteRegister(CC1101_MDMCFG3,value &amp; 0xFF);\n&#125;</code></pre>\n<p>如下图，这是将空速设置为1.2kbps，接收滤波器带宽设置为58KHz时，MDMCFG4、MDMCFG3寄存器的值的显示情况（红框部分）。</p>\n<p><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/img/20220221140556.png\" alt=\"\"></p>\n<h5 id=\"②发送部分\">②发送部分</h5>\n<p>实现射频发送功能的流程图如下：</p>\n<p><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/img/20220221141806.png\" alt=\"CC1101_Tx流程\"></p>\n<h5 id=\"③接收部分\">③接收部分</h5>\n<p>实现射频接收功能的流程图如下：</p>\n<p><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/img/20220221143645.png\" alt=\"CC1101_Rx流程\"></p>\n<p>开发人员可根据产品需求，对简单收发通信进行扩展，以及利用芯片的特性去实现一些复杂的应用，例如LBT，WOR等。</p>\n<h3 id=\"三、总结\">三、总结</h3>\n<p>以上就是我结合CC1101的数据手册以及使用CC1101开发的研发笔记，文中若有出错之处，望大家指正出来，一起共同交流！</p>\n","categories":["技术"],"tags":["射频开发"]},{"title":"Hexo-Fluid主题美化-添加网站运行时长","url":"//post/2/","content":"<p>Fluid 1.8.4版本以上支持自定义页脚内容。</p>\n<p>需要在主题配置中的<code>footer：content</code>添加：</p>\n<pre class=\"language-markup\" data-language=\"markup\"><code class=\"language-markup\">footer:\n  content: '\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://hexo.io<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">target</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>_blank<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>nofollow noopener<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>Hexo<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>iconfont icon-love<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>i</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://github.com/fluid-dev/hexo-theme-fluid<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">target</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>_blank<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>nofollow noopener<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>Fluid<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 0.85rem</span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>timeDate<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>载入天数...<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>times<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>载入时分秒...<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/js/duration.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  '</code></pre>\n<p><code>content</code> 前三行是fluid原有的页脚内容，建议不要删除，用于向更多的人推广主题。</p>\n<p>在博客目录下创建<code>source/js/duration.js</code></p>\n<pre class=\"language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">/** 计时起始时间，自行修改 **/</span>\n  <span class=\"token keyword\">var</span> start <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2020/01/01 00:00:00\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> now <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    now<span class=\"token punctuation\">.</span><span class=\"token function\">setTime</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">250</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    days <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>now <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000</span> <span class=\"token operator\">/</span> <span class=\"token number\">60</span> <span class=\"token operator\">/</span> <span class=\"token number\">60</span> <span class=\"token operator\">/</span> <span class=\"token number\">24</span><span class=\"token punctuation\">;</span>\n    dnum <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>days<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    hours <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>now <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000</span> <span class=\"token operator\">/</span> <span class=\"token number\">60</span> <span class=\"token operator\">/</span> <span class=\"token number\">60</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token number\">24</span> <span class=\"token operator\">*</span> dnum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    hnum <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>hours<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>hnum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      hnum <span class=\"token operator\">=</span> <span class=\"token string\">\"0\"</span> <span class=\"token operator\">+</span> hnum<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    minutes <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>now <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000</span> <span class=\"token operator\">/</span><span class=\"token number\">60</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token number\">24</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> dnum<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token number\">60</span> <span class=\"token operator\">*</span> hnum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mnum <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>minutes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>mnum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      mnum <span class=\"token operator\">=</span> <span class=\"token string\">\"0\"</span> <span class=\"token operator\">+</span> mnum<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    seconds <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>now <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token number\">24</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> dnum<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> hnum<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token number\">60</span> <span class=\"token operator\">*</span> mnum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    snum <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span>seconds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>snum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      snum <span class=\"token operator\">=</span> <span class=\"token string\">\"0\"</span> <span class=\"token operator\">+</span> snum<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"timeDate\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">\"本站安全运行&amp;nbsp\"</span><span class=\"token operator\">+</span>dnum<span class=\"token operator\">+</span><span class=\"token string\">\"&amp;nbsp天\"</span><span class=\"token punctuation\">;</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"times\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> hnum <span class=\"token operator\">+</span> <span class=\"token string\">\"&amp;nbsp小时&amp;nbsp\"</span> <span class=\"token operator\">+</span> mnum <span class=\"token operator\">+</span> <span class=\"token string\">\"&amp;nbsp分&amp;nbsp\"</span> <span class=\"token operator\">+</span> snum <span class=\"token operator\">+</span> <span class=\"token string\">\"&amp;nbsp秒\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span>update<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>**注意：**需要将计时起始时间改为自己的时间。</p>\n<h4 id=\"（从2022-8-15起）本网站现已从Fluid主题更换为Next主题。\">（从2022.8.15起）本网站现已从Fluid主题更换为Next主题。</h4>\n","categories":["技术"],"tags":["Hexo主题美化"]},{"title":"To do List","url":"//post/7/","content":"<h3 id=\"To-Do-List（8-15-8-21）\">To Do List（8.15~8.21）</h3>\n<p><strong>博客搭建：</strong></p>\n<ul>\n<li>完善相册功能。（已完成）</li>\n<li>添加本地搜索功能。（已完成）</li>\n<li>添加utterances评论系统。（已完成）</li>\n</ul>\n","categories":["生活"],"tags":["TODO"]},{"title":"Hexo-Next主题-搭建二级分类相册","url":"//post/9/","content":"<p>本文搭建环境基于hexo 6.2.0、Next主题8.2.0版本。相册的图床是在腾讯云上。</p>\n<h3 id=\"新增文件结构\">新增文件结构</h3>\n<p>首先要创建的文件有:</p>\n<pre class=\"language-txt\" data-language=\"txt\"><code class=\"language-txt\">- /blog/source/_data/galleries.yaml  存放所有图片数据json格式的\n- /blog/source/photos/index.md        相册一级目录对应的index.md\n- /blog/source/photos/九寨沟之旅        相册二级目录的文件夹\n- /blog/source/photos/重庆之行          相册二级目录的文件夹\n- /blog/themes/next/layout/photos.njk    一级相册模板\n- /blog/themes/next/layout/photo.njk    二级相册模板\n- /blog/source/_data/styles.styl        末尾添加相册CSS风格</code></pre>\n<blockquote>\n<p>腾讯云图床的相册存储结构为两级结构，一级文件夹名为galleries，二级文件夹名为相册分类命名的文件夹：九寨沟之旅，重庆之行。</p>\n</blockquote>\n<p><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/202208171447201.png\" alt=\"\"></p>\n<p>galleries.yaml文件内请参照以下格式：</p>\n<pre class=\"language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">[</span>\n <span class=\"token punctuation\">&#123;</span><span class=\"token key atrule\">'photos'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'1.jpg'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2.jpg'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'3.jpg'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'4.jpg'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token key atrule\">'cover'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'1.jpg'</span><span class=\"token punctuation\">,</span> <span class=\"token key atrule\">'description'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token key atrule\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'九寨沟之旅'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">&#123;</span><span class=\"token key atrule\">'photos'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'x.jpg'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'x.jpg'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'x.jpg'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token key atrule\">'cover'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'x.jpg'</span><span class=\"token punctuation\">,</span> <span class=\"token key atrule\">'description'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token key atrule\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'xxxxxxxx'</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">]</span></code></pre>\n<h3 id=\"相册风格\">相册风格</h3>\n<details>\n  <summary>相册风格源码</summary>\n<pre class=\"language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">//相册风格\n.gallery-wrapper</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">padding-top</span><span class=\"token punctuation\">:</span> 20px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding-left</span><span class=\"token punctuation\">:</span> 5%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> 20px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.gallery-wrapper .gallery-box</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 5px <span class=\"token important\">!important</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin-bottom</span><span class=\"token punctuation\">:</span> 20px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.gallery-box</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 30%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span> auto<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> auto<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">right</span><span class=\"token punctuation\">:</span> auto<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">float</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token selector\">.gallery-wrapper .gallery-item</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> block<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #fff<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 5px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding-bottom</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">-moz-box-shadow</span><span class=\"token punctuation\">:</span> 0 1px 3px 0 <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>0<span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">,</span> 0.22<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">-webkit-box-shadow</span><span class=\"token punctuation\">:</span> 0 1px 3px 0 <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>0<span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">,</span> 0.22<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">box-shadow</span><span class=\"token punctuation\">:</span> 0 1px 3px 0 <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>0<span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">,</span> 0.22<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token selector\">.gallery-cover-box</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding-top</span><span class=\"token punctuation\">:</span> 60%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> center center no-repeat<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">-webkit-background-size</span><span class=\"token punctuation\">:</span> cover<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-size</span><span class=\"token punctuation\">:</span> cover<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token selector\">.gallery-cover-box .gallery-cover-img</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> inline-block<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translate</span><span class=\"token punctuation\">(</span>-50%<span class=\"token punctuation\">,</span>-50%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.gallery-item .gallery-name</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 14px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">line-height</span><span class=\"token punctuation\">:</span> 24px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #666<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 5px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token selector\">.waterfall</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">column-count</span><span class=\"token punctuation\">:</span> 4<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">column-gap</span><span class=\"token punctuation\">:</span> 1em<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.photo-wrapper</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">padding-top</span><span class=\"token punctuation\">:</span> 20px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.photo-item</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> block<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding-bottom</span><span class=\"token punctuation\">:</span> 0px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin-bottom</span><span class=\"token punctuation\">:</span> 14px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">-moz-page-break-inside</span><span class=\"token punctuation\">:</span> avoid<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">-webkit-column-break-inside</span><span class=\"token punctuation\">:</span> avoid<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">break-inside</span><span class=\"token punctuation\">:</span> avoid<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> white<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">-moz-box-shadow</span><span class=\"token punctuation\">:</span> 0 1px 3px 0 <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>0<span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">,</span> 0.22<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">-webkit-box-shadow</span><span class=\"token punctuation\">:</span> 0 1px 3px 0 <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>0<span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">,</span> 0.22<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">box-shadow</span><span class=\"token punctuation\">:</span> 0 1px 3px 0 <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>0<span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">,</span> 0.22<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.photo-item img</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.photo-item .photo-name</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 14px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">line-height</span><span class=\"token punctuation\">:</span> 30px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin-bottom</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-top</span><span class=\"token punctuation\">:</span> 1px solid #dddddd<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token selector\">.gallery-header</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 25px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin-bottom</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding-top</span><span class=\"token punctuation\">:</span> 35px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #fff<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding-bottom</span><span class=\"token punctuation\">:</span> 20px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 0.95<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">&#125;</span>\n</code></pre>\n</details>\n<h3 id=\"建立相册目录及模板\">建立相册目录及模板</h3>\n<p>创建相册目录<code>/blog/source/photos</code></p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo new page photos</code></pre>\n<p>photos文件夹内的index.md参照下面</p>\n<pre class=\"language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\"><span class=\"token front-matter-block\"><span class=\"token punctuation\">---</span>\n<span class=\"token front-matter yaml language-yaml\"><span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> 相册\n<span class=\"token key atrule\">date</span><span class=\"token punctuation\">:</span> xxxx<span class=\"token punctuation\">-</span>xx<span class=\"token punctuation\">-</span>xx xx<span class=\"token punctuation\">:</span>xx<span class=\"token punctuation\">:</span>xx\n<span class=\"token key atrule\">layout</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"photos\"</span>\n<span class=\"token key atrule\">comments</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></span>\n<span class=\"token punctuation\">---</span></span></code></pre>\n<p>相册二级目录<code>/blog/source/photos/九寨沟之旅</code> 文件夹内的index.md参照下面：</p>\n<pre class=\"language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\"><span class=\"token front-matter-block\"><span class=\"token punctuation\">---</span>\n<span class=\"token front-matter yaml language-yaml\"><span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> 九寨沟之旅\n<span class=\"token key atrule\">date</span><span class=\"token punctuation\">:</span> xxxx<span class=\"token punctuation\">-</span>xx<span class=\"token punctuation\">-</span>xx xx<span class=\"token punctuation\">:</span>xx<span class=\"token punctuation\">:</span>xx\n<span class=\"token key atrule\">layout</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"photo\"</span>\n<span class=\"token key atrule\">comments</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></span>\n<span class=\"token punctuation\">---</span></span></code></pre>\n<p>创建一级相册模板  <code>/blog/themes/next/layout/photos.njk</code></p>\n<details>\n  <summary>一级相册模板源码</summary>\n<pre class=\"language-njk\" data-language=\"njk\"><code class=\"language-njk\">&#123;% extends &#39;_layout.njk&#39; %&#125;\n&#123;% import &#39;_macro&#x2F;post-collapse.njk&#39; as post_template with context %&#125;\n&#123;% import &#39;_macro&#x2F;sidebar.njk&#39; as sidebar_template with context %&#125;\n\n&#123;% block content %&#125;\n    &lt;div class&#x3D;&quot;posts-expand&quot;&gt;\n        &lt;div class&#x3D;&quot;gallery-header&quot; lang&#x3D;&quot;&#123;&#123; page.lang or page.language or config.language &#125;&#125;&quot;&gt;\n            &#123;% include &#39;_partials&#x2F;page&#x2F;page-header.njk&#39; %&#125;\n\t\t&lt;&#x2F;div&gt;\t\t \n\t\t&lt;div class&#x3D;&quot;gallery-wrapper&quot;&gt;\n\t\t\t&#123;% for galleries in site.data.galleries %&#125;\n\t\t\t&lt;div class&#x3D;&quot;gallery-box&quot;&gt;\t\t\n\t\t\t\t&lt;a href&#x3D;&quot;.&#x2F;&#123;&#123; galleries.name &#125;&#125;&quot; class&#x3D;&quot;gallery-item&quot; data-aos&#x3D;&quot;zoom-in-up&quot;&gt;\n\t\t\t\t\t&lt;div class&#x3D;&quot;gallery-cover-box&quot; style&#x3D;&quot;background-image: url(&#123;&#123;theme.photos_info.cos_url&#125;&#125;&#x2F;&#123;&#123; galleries.name &#125;&#125;&#x2F;&#123;&#123; galleries.cover &#125;&#125;)&quot;&gt;\n\t\t\t\t\t&lt;&#x2F;div&gt;\n\t\t\t\t\t&lt;p class&#x3D;&quot;gallery-name&quot;&gt;\n\t\t\t\t\t\t&#123;&#123; galleries.name &#125;&#125;\n\t\t\t\t\t&lt;&#x2F;p&gt;\n\t\t\t\t&lt;&#x2F;a&gt;\n\t\t\t&lt;&#x2F;div&gt;\n\t\t\t&#123;% endfor %&#125;\n\t\t&lt;&#x2F;div&gt;\n\t&lt;&#x2F;div&gt;\n&#123;% endblock %&#125;\n\n&#123;% block sidebar %&#125;\n  &#123;&#123; sidebar_template.render(true) &#125;&#125;\n&#123;% endblock %&#125;\n</code></pre>\n</details>\n<p>创建二级相册模板  <code>/blog/themes/next/layout/photo.njk</code></p>\n<details>\n  <summary>二级相册模板源码</summary>\n<pre class=\"language-njk\" data-language=\"njk\"><code class=\"language-njk\">&lt;meta charset&#x3D;&#39;utf-8&#39;&gt;\n&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;&#x2F;css&#x2F;gallery.css&quot;&gt;\n&lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;fancybox@3.0.1&#x2F;dist&#x2F;css&#x2F;jquery.fancybox.css&quot;&gt;\n&lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;justifiedGallery@3.7.0&#x2F;dist&#x2F;css&#x2F;justifiedGallery.min.css&quot;&gt;\n\n&#123;% extends &#39;_layout.njk&#39; %&#125;\n&#123;% import &#39;_macro&#x2F;post-collapse.njk&#39; as post_template with context %&#125;\n&#123;% import &#39;_macro&#x2F;sidebar.njk&#39; as sidebar_template with context %&#125;\n\n&#123;% block content %&#125;\n    &lt;div class&#x3D;&quot;posts-expand&quot;&gt;\n        &lt;div class&#x3D;&quot;post-block&quot; lang&#x3D;&quot;&#123;&#123; page.lang or page.language or config.language &#125;&#125;&quot;&gt;\n            &#123;% include &#39;_partials&#x2F;page&#x2F;page-header.njk&#39; %&#125;\n\t\t\t&lt;div class&#x3D;&quot;container&quot;&gt;\n\t\t\t\t&lt;div class&#x3D;&quot;photo-wrapper&quot;&gt;\n\t\t\t\t\t&lt;div class&#x3D;&quot;waterfall&quot; id&#x3D;&quot;mygallery&quot;&gt;\n\t\t\t\t\t\t&#123;% for i in range(site.data.galleries.length) %&#125;\t\n\t\t\t\t\t\t\t&#123;% if site.data.galleries[i].name &#x3D;&#x3D; page.title %&#125;\n\t\t\t\t\t\t\t\t&#123;% for photo in site.data.galleries[i].photos  %&#125;\n\t\t\t\t\t\t\t\t\t&lt;a class&#x3D;&quot;photo-item&quot; rel&#x3D;&quot;example_group&quot; data-fancybox&#x3D;&quot;images&quot; href&#x3D;&quot;&#123;&#123;theme.photos_info.cos_url&#125;&#125;&#x2F;&#123;&#123;page.title&#125;&#125;&#x2F;&#123;&#123;photo&#125;&#125;&quot; &gt;&lt;img alt&#x3D;&quot;&#123;&#123;photo&#125;&#125;&quot; src&#x3D;&quot;&#123;&#123;theme.photos_info.cos_url&#125;&#125;&#x2F;&#123;&#123;page.title&#125;&#125;&#x2F;&#123;&#123;photo&#125;&#125;&quot; &#x2F;&gt; &lt;&#x2F;a&gt;\t\t\n\t\t\t\t\t\t\t\t&#123;%- endfor %&#125;\t\t\n\t\t\t\t\t\t\t&#123;% endif %&#125;\n\t\t\t\t\t\t&#123;%- endfor %&#125;\n\n\t\t\t\t\t&lt;&#x2F;div&gt;\t\n\t\t\t\t&lt;&#x2F;div&gt;\n\t\t\t&lt;&#x2F;div&gt;\n\t\t&lt;&#x2F;div&gt;\t\n\t&lt;&#x2F;div&gt;\n&#123;% endblock %&#125;\n\n&#123;% block sidebar %&#125;\n  &#123;&#123; sidebar_template.render(true) &#125;&#125;\n&#123;% endblock %&#125;\n\n\n&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;fancybox@3.0.1&#x2F;dist&#x2F;js&#x2F;jquery.fancybox.js&quot;&gt;&lt;&#x2F;script&gt;\n&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;justifiedGallery@3.7.0&#x2F;dist&#x2F;js&#x2F;jquery.justifiedGallery.min.js&quot;&gt;&lt;&#x2F;script&gt;\n&lt;script&gt;\n\n  $(&quot;a[rel&#x3D;example_group]&quot;).fancybox();\n  $(&quot;#mygallery&quot;).justifiedGallery(&#123;margins: 5, rowHeight: 100&#125;);\n\n&lt;&#x2F;script&gt;</code></pre>\n</details>\n<p>最后在主题配置文件 <code>/blog/themes/next/config.yaml</code>添加相册链接</p>\n<pre class=\"language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># 腾讯COS相册链接</span>\n<span class=\"token key atrule\">photos_info</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">cos_url</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//hyh1370039199<span class=\"token punctuation\">-</span>1313349927.cos.ap<span class=\"token punctuation\">-</span>chengdu.myqcloud.com/galleries</code></pre>\n<div class=\"tabs\" id=\"\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#-1\">1.打开cors设置</a></li><li class=\"tab\"><a href=\"#-2\">2.修改cors规则</a></li><li class=\"tab\"><a href=\"#-3\">3.设置访问权限</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"-1\"><p><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/202208171548272.png\" alt=\"\"></p></div><div class=\"tab-pane\" id=\"-2\"><p>*<em>操作选择与下图一致，其他默认都填成 <em>，如下图：</em></em></p>\n<p><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/202208171625301.png\" alt=\"\"></p></div><div class=\"tab-pane\" id=\"-3\"><p><strong>进入权限管理界面，将存储桶的访问权限设置为公有读私有写</strong></p>\n<p><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/202208171627879.png\" alt=\"\"></p></div></div></div>\n","categories":["技术"],"tags":["Hexo主题美化"]},{"title":"《别让坏情绪，赶走好运气》的读书笔记","url":"//post/8/","content":"<h3 id=\"控制情绪的秘诀\">控制情绪的秘诀</h3>\n<ul>\n<li>\n<p>认识到“自己比别人性子急”，承认自己性格的不足，就可以制怒。</p>\n</li>\n<li>\n<p>不认为自己的想法就是绝对真理，承认其他的可能性，不过分执拗于对错就不会有精神压力。</p>\n</li>\n<li>\n<p>重视结果，只要最后对自己有益即可。这样考虑的话，就不会抗拒偶尔向人低头服输。</p>\n</li>\n</ul>\n","categories":["阅读"],"tags":["读书笔记"]},{"title":"硬件设计学习笔记 - MOS管","url":"//post/11/","content":"<h3 id=\"三极管和MOS管\">三极管和MOS管</h3>\n<img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/202208201305529.jpeg\"  style=\"zoom:67%;\" />\n","categories":["技术"],"tags":["硬件设计"]},{"title":"硬件设计学习笔记 ----（元器件系列）","url":"//post/5/","content":"<h3 id=\"元器件选型通则\">元器件选型通则</h3>\n<p>选型原则：</p>\n<ul>\n<li>复用性：尽量复用以前验证过的项目物料，减少风险，同时不用管理额外零件，还可以处理库存。</li>\n<li>成熟性：要是被广泛使用验证过的成熟方案，且生命周期良好，无EOL(停产)。最好有丰富的参考设计资料。</li>\n<li>适配性：在设计中电气参数/环境参数满足设计需求，降额等，性能满足，空间无干涉。</li>\n<li>替代性：价格成本，交付周期，无EOL，合适的供应商。成本很重要，料也得能买到，买到还能用的久~</li>\n<li>归一性：在出货量大的产品中，尽量减少物料种类。</li>\n</ul>\n<h3 id=\"替代料评估\">替代料评估</h3>\n<ol>\n<li>通过采购、元件工程师或是自己找到相关的替代厂商。</li>\n<li>了解此物料涉及到的参数</li>\n<li>此料导入系统后涉及到的验证范围（信号、功能？）</li>\n<li>时间精力上能否让原厂进行验证，给出报告，EE负责评审。</li>\n</ol>\n<h3 id=\"电阻\">电阻</h3>\n<h4 id=\"基本原理及分类\">基本原理及分类</h4>\n<ol>\n<li>定义式：欧姆定律$R = U/I$。（$U$表示电压，$I$表示电流）。</li>\n<li>$R=ρL/S$（$ρ$表示电阻的电阻率，是由其本身性质决定，$L$代表电阻的长度，$S$表示电阻的横截面积）</li>\n<li>电阻串联：$R=R1+R2+R3+…+Rn$。($R1…Rn$表示$n$个电阻，电阻值是由其本身性质决定)。</li>\n<li>电阻并联：$1/R = 1/R1+1/R2+1/R3+…+1/Rn$。($R1…Rn$表示$n$个电阻，电阻值是由其本身性质决定)。</li>\n<li>与电功率相关公式：$R=U<sup>2/P$;$R=P/I</sup>2$。（$U$表示电压，$I$表示电流，$P$表示电功率）。</li>\n<li>与电能（电热）相关公式：$R=U<sup>2t/W$;$R=W/I</sup>2t$。（$U$表示电压，$I$表示电流，$t$表示时间，$W$表示电热）。</li>\n</ol>\n<p>特点：</p>\n<div align=center><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/202208082145821.png\"  style=\"zoom: 50%;\" /></div>\n<h4 id=\"参数\">参数</h4>\n<p>阻值：</p>\n<div align=center><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/202208082137615.png\"  style=\"zoom: 50%;\" /></div>\n<p>封装：</p>\n<p>inch notation : 0402 、0603、0805、0201</p>\n<p>功率：</p>\n<div align=center><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/202208082139764.png\"  style=\"zoom:50%;\" /></div>\n<div align=center><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/202208082143472.png\"  style=\"zoom:33%;\" /></div>\n<p>精度：</p>\n<div align=center><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/202208082147011.png\"  style=\"zoom:50%;\" /></div>\n<p>温漂：</p>\n<p>$1PPM/°C$是指电阻温度每变化一摄氏度，电阻阻值变化一百万之一。</p>\n<div align=center><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/202208082158501.png\"  style=\"zoom:50%;\" /></div>\n<h4 id=\"应用与选型\">应用与选型</h4>\n<p>应用：分压、限流、上拉、下拉电阻、匹配电阻、0欧电阻</p>\n<p><strong>上拉（Pull Up）或下拉（Pull Down）电阻的作用：</strong></p>\n<p>将状态不确定的信号线通过一个电阻将其箝位至高电平（上拉）或低电平（下拉）</p>\n<p>高有效的使能控制信号（EN），希望电路系统在上电后应处于无效状态，则会使用下拉电阻。</p>\n<p>低有效的复位控制信号（RST），希望上电复位后处于无效状态，则应使用上拉电阻。</p>\n<h5 id=\"上下拉电阻之补充：开漏、开集、推挽\">上下拉电阻之补充：开漏、开集、推挽</h5>\n<p><a href=\"https://www.zhihu.com/question/28512432/answer/41217074\">如何正确的理解漏极开路输出跟推挽输出？ - 知乎 (zhihu.com)</a></p>\n<h4 id=\"0欧电阻\">0欧电阻</h4>\n<p>零欧姆电阻又称为跨接电阻器，是一种特殊用途的电阻（JUMPER）。零欧电阻并非真的阻值为0，<strong>特指阻值&lt;50mΩ的贴片电阻</strong>，其在电路中的作用等同于阻值小于50mΩ的一截导线，代替跨接线英文全称为THICK FILM CHIP JUMPER RESISTOR.</p>\n<p>0欧电阻作用：跳线 （COLAY用法）、预留，视回板后测试情况调整、增加测试点、PCB的跨接、不同GND的区分</p>\n<h3 id=\"电容\">电容</h3>\n<h4 id=\"基本原理及公式\">基本原理及公式</h4>\n<div align=center><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/202208182010085.png\" style=\"zoom:50%;\" /></div>\n<ol>\n<li>定义式：$C=Q/U$。（一个电容器，如果带1库伦的电量时，两级间的电势差为1V,那么这个电容器的电容为1F。）</li>\n<li>决定式：$C=\\epsilon S/d$ (对平行板电容器，$\\epsilon$为极板间介质的介电常数，S为极板面积，d为极板间的距离)</li>\n<li>电容串联：$1/C = 1/C1+1/C2+…+1/C_n$</li>\n<li>电容并联：$C = C1+C2+C3+…+C_n$</li>\n</ol>\n<p><strong>基本特性：</strong></p>\n<ol>\n<li>\n<p>储能</p>\n</li>\n<li>\n<p>隔直通交：直流电，<strong>当直流电源的电势与电容电势相等才起到隔直的作用</strong>，在充电过程中并不起到隔直作用。</p>\n</li>\n<li>\n<p>频率特性：</p>\n</li>\n</ol>\n<div align=center><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/202208182036289.png\" /></div>\n<h4 id=\"分类及特点\">分类及特点</h4>\n<div align=center><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/202208182042978.png\"  /></div>\n<h4 id=\"参数-2\">参数</h4>\n<ul>\n<li>\n<p><strong>容量：</strong> 贴片电容规格一般常见封装尺寸为0201、0402、0603、0805、1206.容量范围一般在0.5pF~1uF。</p>\n<p>1210、1812、1825、2225、3012、3035为大规格贴片电容，容量范围在1uF~100uF。</p>\n<p>电容的基本单位是$F$, $1F=10^{-6}uF= 10^{-9}nF =10^{-12}pF$</p>\n</li>\n<li>\n<p><strong>封装：</strong> 与贴片电阻封装一致。</p>\n</li>\n<li>\n<p><strong>额定电压：</strong> 考虑降额：一般至少留出30%余量。钽电容至少留50%。（GJB/Z 35-93 元器件降额准则）</p>\n</li>\n<li>\n<p><strong>ESR：</strong> 影响纹波大小</p>\n</li>\n</ul>\n<div align=center><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/202208182102616.png\"  /></div>\n<div align=center><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/202208182107125.png\"  /></div>\n<ul>\n<li><strong>精度与温度特性：</strong></li>\n</ul>\n  <div align=center><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/202208182059537.png\"  /></div>\n<h4 id=\"应用与选型-2\">应用与选型</h4>\n<ul>\n<li>去耦：去耦电容用于将频率高的噪声等交流成分接地释放（旁路作用），还能起到向IC瞬间供应电流，抑制电源电压变动的作用。<strong>去耦电容应靠近管脚摆放。</strong> 不同电容的搭配可以延伸到电源完整性PI和电源分配网络PDN的概念。</li>\n<li>耦合：阻断直流电流仅让信号成分（交流电流）通过。例如AC耦合电容（改善噪声容限作用）。</li>\n</ul>\n<blockquote>\n<p>​\t\tTYPE-C协议要求在SSTXP/N线上增加100nF交流耦合电容，AC耦合电容建议使用0201封装，更低的ESR和ESL，也可减少线路上的阻抗变化。</p>\n<p>​\t\tSATA接口的TXP/N,RXP/N差分信号上串接的10nF交流耦合电容，AC耦合电容建议使用0201封装，更低的ESR和ESL，也可减少线路上的阻抗变化。</p>\n<p>​\t\tPCIe2.0接口的TXP/N差分信号上串接的100nF交流耦合电容，AC耦合电容建议使用0201封装，更低的ESR和ESL，也可减少线路上的阻抗变化。</p>\n<p>​        对于AC耦合电容的放置位置建议遵循design guideline（规范）</p>\n<p>​\t\t没有参照规范，如IC到IC，请靠近接收端放置；如IC到连接器，请靠近连接器放置</p>\n<p>​\t\t尽可能选择小的封装尺寸，减小阻抗不连续。</p>\n<p>​        核心：AC耦合电容一般是高速信号阻抗不连续的点。</p>\n<p>​        可以用ADS等高速信号设计仿真软件来仿真</p>\n</blockquote>\n<ul>\n<li>平滑：使电压变化变得平滑</li>\n<li>储能：蓄电，利用储存的电荷。例如一次性照相机的闪光灯电路。</li>\n<li>滤波：RC无源一阶、二阶滤波；运放有源滤波</li>\n</ul>\n<h3 id=\"电感\">电感</h3>\n<p><strong>两个现象、一个定律</strong>：电生磁、动磁生电、楞次定律（来拒去留，增反减同）：感应电流的磁场总要阻碍引起感应电流的磁通量的变化。</p>\n<p><strong>电感对电流的作用可以看成一种惯性。</strong></p>\n<h4 id=\"基本原理及分类-2\">基本原理及分类</h4>\n<p>电感是线圈的别名。电感性即线圈内流过的电流产生磁场，穿过线圈的磁场产生电流的性质。</p>\n<p>定义式：$\\varphi = Li$   根据法拉第电磁感应定律，当通过线圈的磁通发生变化，在线圈两端就要产生感应电动势，感应电动势的大小正比于磁通的变化率，即有下面公式：<br>\n$$<br>\n\\epsilon = -L\\frac{di}{dt}<br>\n$$<br>\n公式中负号表示感应电动势是要阻止电流变化。并且能得出两个结论：</p>\n<ol>\n<li>电感上的电流不能突变。</li>\n<li>对于直流电，电感两端相当于短路。</li>\n</ol>\n<p>电感的单位为H（亨利），符号是L。L=1H的定义是：电流以1A/s的速率变化，如果在电感上产生的感应的电动势的电压是1V，这种电感就是1H。</p>\n<blockquote>\n<p>在无线电和通信设备中，常见的电感单位是nH,应对MHz级别的电流变化；</p>\n<p>在电源和供电设备中，常见的电感单位是uH，应对KHz级别的电流变化；</p>\n<p>在音频设备中，常见的电感单位是mH，应对数百Hz~2KHz的电流变化。</p>\n</blockquote>\n<p>电感与电阻的串并联公式一致。</p>\n<h5 id=\"电感的等效模型\">电感的等效模型</h5>\n<div align=center><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/202208191822014.png\" style=\"zoom:50%;\" /></div>\n<h5 id=\"电感VS电容\">电感VS电容</h5>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\">电感（L）</th>\n<th style=\"text-align:center\">电容（C）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">电压电流关系</td>\n<td style=\"text-align:center\">$V_L(t) = -L\\frac{di}{dt}$</td>\n<td style=\"text-align:center\">$i(t)=C\\frac{dv}{dt}$</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">不能突变</td>\n<td style=\"text-align:center\">电流不能突变</td>\n<td style=\"text-align:center\">电压不能突变</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">时间常数</td>\n<td style=\"text-align:center\">$\\tau  = L/R$</td>\n<td style=\"text-align:center\">$\\tau  = RC$</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">电压电流延迟</td>\n<td style=\"text-align:center\">电流落后电压90°相位</td>\n<td style=\"text-align:center\">电压落后电流90°相位</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">阻抗</td>\n<td style=\"text-align:center\">$X_L = 2\\pi fL$</td>\n<td style=\"text-align:center\">$X_L = \\frac{1}{2 \\pi fC}$</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">直流电流</td>\n<td style=\"text-align:center\">通过</td>\n<td style=\"text-align:center\">不让通过</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">交流电流</td>\n<td style=\"text-align:center\">越是高频越不易通过</td>\n<td style=\"text-align:center\">越是高频越易于通过</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"电感的分类\">电感的分类</h5>\n<img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/202208191835081.png\"  style=\"zoom: 67%;\" />\n<h4 id=\"参数-3\">参数</h4>\n<ul>\n<li>\n<p><strong>电感值及精度：</strong> 电感的标称值通常是在没有外加直流偏置的条件下，以一定频率测得的。一般DC用电感标称值精度在±20%或±30%。</p>\n</li>\n<li>\n<p><strong>额定电流：</strong> 电感额定电流，是饱和电流和温升电流的小者。选择时留出20%裕量。</p>\n</li>\n<li>\n<p><strong>直流电阻（DCR）：</strong> 电感的直流电阻值，由<strong>绕线圈数</strong>和<strong>线的直径</strong>决定。导线的匝数越多，线长越长，因此DCR越大。<strong>同等电感量，额定电流越大，导线会越粗，DCR越小</strong>。</p>\n</li>\n<li>\n<p><strong>品质因数：</strong> Q是Quality Factor（品质因数）的简称。线圈会顺利流过直流电流，但会对交流电流产生电阻。这称为感抗，交流频率越高则感抗越大。绕组虽是导体，但有一定的电阻成分R。这个电阻成分与对应频率的电感之比称为损耗系数。其倒数就是Q值。<br>\n$$<br>\nQ = \\frac{2\\pi fL}R<br>\n$$<br>\nQ值越高，损耗越低，对于高频电感器而言，其具有十分优异的特性。</p>\n</li>\n<li>\n<p><strong>自谐振频率（SRF）：</strong> 由于电感中的寄生电容，电感和自身的寄生电容有谐振频率，这个频率处电感阻抗最大，超过谐振频点阻抗开始下降。</p>\n</li>\n</ul>\n<div align = \"center\"><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/202208191857723.png\" style=\"zoom:50%;\" /></div>\n<p>​\t\t如上图，在5MHz之前的电感值的曲线较为平坦，电感值几乎可视为常数。在高频段因寄生电容与电感所产生的谐振，电感值会上升，此谐振频率称为自我谐振频率(self-resonant \t\t\t     frequency)，通常需远高于工作频率。</p>\n<h4 id=\"应用\">应用</h4>\n<ul>\n<li>储能：线圈积蓄能量，稳定电压。计算机或嵌入式产品设计中，对于功率较大的电源，通常会采用降压的开关电源设计方案。</li>\n<li>滤波：线圈整理信号，除去干扰信号，只让需要的信号通过。<strong>滤波器就是特定频率范围呈现低阻抗，在该范围以外呈现高阻。</strong></li>\n</ul>\n<blockquote>\n<p>滤波分有源、无源，其设计计算需要结合传递函数。这里推荐滤波器设计网页以及书籍。</p>\n<p>《新概念模拟电路》、《基于运算放大器和模拟集成电路的电路设计》</p>\n<p>http:/sim.okawa-denshi.jp/en/Fkeisan.htm<br>\nhttps:/webench.ti.com/filter-design-tool/filter-type</p>\n</blockquote>\n<p>注意电感有DCR，注意其直流电阻引起的压降，需要利用IR drop analysis on a PCB仿真确认电压。</p>\n","categories":["技术"],"tags":["硬件设计"]},{"title":"硬件设计学习笔记（记录平时学习到的知识点）","url":"//post/6/","content":"<h2 id=\"（记录平时学习到的知识点，一直更新-）\">（记录平时学习到的知识点，一直更新~）</h2>\n<h3 id=\"系统框图\">系统框图</h3>\n<p>系统框图是展示硬件设计思路的一张图，复杂的系统必须有系统框图。</p>\n<p>其包含以下几个方面：</p>\n<ol>\n<li>**整机接口：**接口名称、数量、接口信号</li>\n<li>**芯片方案：**CPU、各外设芯片。应绘制出各模块最小系统框图。</li>\n<li><strong>电源树</strong>：各级电源转换关系，电流流向及路径。</li>\n</ol>\n<h3 id=\"datasheet阅读\">datasheet阅读</h3>\n<p>阅读数据手册更应该是搜索，是带着目的去读。<strong>需求—位置—提取目标内容</strong></p>\n<p>技巧：</p>\n<ol>\n<li>尽量知道datasheet的内容排布，大多数手册都是有目录的，可以从目录跳转，提高搜索效率。</li>\n<li>搜索，CTRL+F</li>\n<li>要注意一些note的标注，有可能有特殊的设计用法，要格外注意。</li>\n<li>选用最新的手册，避免漏掉一些勘误。</li>\n</ol>\n<h3 id=\"SOC最小系统\">SOC最小系统</h3>\n<p>单片机最小系统是指单片机可以正常执行程序的最简工作环境。</p>\n<p><strong>最小系统的组成：</strong></p>\n<ul>\n<li>\n<p>电源：注意去耦电容的选择、电压供电范围、电流大小、时序</p>\n</li>\n<li>\n<p>复位：<img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/202208072219451.png\" alt=\"image-20220807213434574\" style=\"zoom:33%;\" /></p>\n<p>在上电瞬间，电容充电，RESET会出现短暂的低电平，该低电平持续时间由电阻和电容共同决定，计算方式：$t = 1.1RC$</p>\n</li>\n<li>\n<p>时钟：$32.768KHz$，$32768 = 2^{15}$  芯片分频设置寄存器通常为2的次幂形式。</p>\n</li>\n<li>\n<p>调试接口</p>\n</li>\n<li>\n<p>启动</p>\n</li>\n</ul>\n<h3 id=\"逻辑电平\">逻辑电平</h3>\n<p><img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/202208072114711.png\" alt=\"\"></p>\n<h3 id=\"建立时间和保持时间\">建立时间和保持时间</h3>\n<img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/202208072121091.png\" alt=\"image-20220807212121640\" style=\"zoom: 50%;\" />\n<ul>\n<li>建立时间：在时钟沿到来之前，输入数据需要提前准备好的时间。</li>\n<li>保持时间：在时钟沿触发之后，输入数据需要保持不变的时间。</li>\n</ul>\n","categories":["技术"],"tags":["硬件设计"]},{"title":"芯片数据手册快捷入口","url":"//post/10/","content":"<p>记录工作中的涉及的到芯片数据手册 &gt;&gt;  <a href=\"/docs\">快捷入口</a></p>\n","categories":["技术"],"tags":["手册查询"]},{"title":"链表学习笔记----单链表","url":"//post/3/","content":"<h3 id=\"一、单链表\">一、单链表</h3>\n<p>单链表中的每个节点不仅包含<strong>值</strong>，还包含链接到下一个节点的<strong>引用字段</strong>。通过这种方式，单链表将所有节点按顺序组织起来。</p>\n<img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/202208051436235.png\" alt=\"image-20220805143649613\" style=\"zoom: 25%;\" />\n<h4 id=\"节点结构\">节点结构</h4>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// Definition for singly-linked list.</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">List</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">List</span> <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>List<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>pList<span class=\"token punctuation\">;</span></code></pre>\n<h4 id=\"操作\">操作</h4>\n<ol>\n<li>\n<p><strong>访问操作</strong></p>\n<p>与数组不同，我们无法在常量时间内访问单链表中的随机元素。如果我们想要获得第$i$个元素，我们必须从头节点逐个遍历。我们按<strong>索引</strong>来访问元素平均要花费$O(N)$时间，其中N为链表长度。</p>\n</li>\n<li>\n<p><strong>添加操作</strong></p>\n<p>如果我们想在<strong>给定</strong>的节点$prev$之后添加新值：</p>\n<p>① 使用给定值初始化新节点$cur$。</p>\n<img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/202208051439971.png\" alt=\"image-20220805143816062\" style=\"zoom: 25%;\" />\n<p>② 将$cur$的$next$字段链接到$prev$的下一个节点$next$。</p>\n<img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/202208051439936.png\" alt=\"image-20220805143917288\" style=\"zoom: 25%;\" />\n<p>③ 将$prev$中的$next$字段链接到$cur$。</p>\n<img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/202208051440808.png\" alt=\"image-20220805144017321\" style=\"zoom: 25%;\" />\n<p>$与数组不同$，我们不需要将所有元素移动到插入元素之后。因此可以在$O(1)$时间复杂度中将新节点插入到链表中。</p>\n</li>\n<li>\n<p><strong>删除操作</strong></p>\n<p>从单链表中删除现有节点$cur$：</p>\n<p>①找到$cur$的上一个节点$prev$及其下一个节点$next$。</p>\n<img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/202208081705065.png\" alt=\"image-20220808170543320\" style=\"zoom:25%;\" />\n<p>②接下来链接$prev$到$cur$的下一个节点$next$。</p>\n<img data-src=\"https://hyh1370039199.oss-cn-chengdu.aliyuncs.com/img/202208081707953.png\" alt=\"image-20220808170734707\" style=\"zoom:25%;\" />\n<p>第一步中，需要找出$prev$和$next$。使用$cur$的引用字段很容易找出$next$，但是我们必须从头节点遍历链表，以找出$prev$，它的平均时间是$O(N)$,其中N是链表的长度。因此，删除节点的时间复杂度是$O(N)$。空间复杂度为$O(1)$，只需常量空间来存储指针。</p>\n</li>\n</ol>\n<h4 id=\"设计链表\">设计链表</h4>\n<p>单链表中的节点应该具有两个属性：$val$ 和 $next$。$val$ 是当前节点的值，$next$ 是指向下一个节点的指针/引用。如果要使用双向链表，则还需要一个属性 $prev$ 以指示链表中的上一个节点。假设链表中的所有节点都是 $0-index$ 的。</p>\n<p>在链表类中实现这些功能：</p>\n<p>$get(index)$：获取链表中第 $index$ 个节点的值。如果索引无效，则返回$-1$。<br>\n$addAtHead(val)$：在链表的第一个元素之前添加一个值为 $val$ 的节点。插入后，新节点将成为链表的第一个节点。<br>\n$addAtTail(val)$：将值为 $val$ 的节点追加到链表的最后一个元素。<br>\n$addAtIndex(index,val)$：在链表中的第 $index$ 个节点之前添加值为 $val$  的节点。如果 $index$ 等于链表的长度，则该节点将附加到链表的末尾。如果 $index$ 大于链表长度，则不会插入节点。如果$index$小于$0$，则在头部插入节点。<br>\n$deleteAtIndex(index)$：如果索引 $index$ 有效，则删除链表中的第 $index$ 个节点。</p>\n<h5 id=\"定义链表结构体\">定义链表结构体</h5>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">//定义链表结构体</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">MyLinkedList_t</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> val<span class=\"token punctuation\">;</span><span class=\"token comment\">//值</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">MyLinkedList_t</span> <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span><span class=\"token comment\">//指向下一个节点的指针</span>\n<span class=\"token punctuation\">&#125;</span>MyLinkedList<span class=\"token punctuation\">;</span></code></pre>\n<p><strong>注意：如果在这个struct定义里，直接把next指针定义为<code>MyLinkedList *next</code>就会报错，因为别名<code>MyLinkedList</code>是在结构体定义结束后才可以识别的一个别名；</strong></p>\n<h5 id=\"创建链表\">创建链表</h5>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">//创建链表</span>\nMyLinkedList<span class=\"token operator\">*</span> <span class=\"token function\">myLinkedListCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//使用虚拟头节点作为访问、管理链表的入口</span>\n    MyLinkedList <span class=\"token operator\">*</span>obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>MyLinkedList <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>MyLinkedList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//对虚拟链表头进行初始化，此时真实的链表为空</span>\n    obj<span class=\"token operator\">-></span>val <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    obj<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//返回链表入口</span>\n    <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h5 id=\"在链表头部增加节点\">在链表头部增加节点</h5>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">//在链表头部增加节点</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">myLinkedListAddAtHead</span><span class=\"token punctuation\">(</span>MyLinkedList <span class=\"token operator\">*</span>obj<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    MyLinkedList <span class=\"token operator\">*</span>node <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>MyLinkedList <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>MyLinkedList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    node<span class=\"token operator\">-></span>val <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//将新节点插入至虚拟头节点和原来虚拟头节点下一个节点之间的位置，亦考虑了真实链表为空的情况</span>\n    node<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> obj<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    obj<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h5 id=\"在链表尾部增加节点\">在链表尾部增加节点</h5>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">//在链表尾部增加节点</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">myLinkedListAddAtTail</span><span class=\"token punctuation\">(</span>MyLinkedList <span class=\"token operator\">*</span>obj<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    MyLinkedList <span class=\"token operator\">*</span>node <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>MyLinkedList <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>MyLinkedList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//由于真实链表可能为空，所以标记位置从obj开始</span>\n    MyLinkedList <span class=\"token operator\">*</span>nowList <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">;</span>\n    node<span class=\"token operator\">-></span>val <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n    node<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//一直遍历，直到当前节点的下一个节点为空，当前节点即为尾部节点</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>nowList<span class=\"token operator\">-></span>next <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        nowList <span class=\"token operator\">=</span> nowList<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//将原来的尾部节点的下一个节点指向新节点</span>\n    nowList<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h5 id=\"获取链表中第-index-个节点的值，从0开始\">获取链表中第 $index$ 个节点的值，从0开始</h5>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">myLinkedListGet</span><span class=\"token punctuation\">(</span>MyLinkedList <span class=\"token operator\">*</span>obj<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    MyLinkedList <span class=\"token operator\">*</span>nowList <span class=\"token operator\">=</span> obj<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//处理异常情况，index小于0，真实链表为空</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> nowList <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//进行链表遍历，循环终止条件：cnt位置达到index位置</span>\n    <span class=\"token comment\">//break条件:当前位置节点为空，返回-1</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cnt <span class=\"token operator\">&lt;</span> index<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nowList <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n        nowList <span class=\"token operator\">=</span> nowList<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n        cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//循环结束后，取到了当前位置为index的节点，需判断该点为不为空</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nowList <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> nowList<span class=\"token operator\">-></span>val<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h5 id=\"在链表中的第-index-个节点之前添加值为-val-的节点\">在链表中的第 $index$ 个节点之前添加值为 $val$  的节点</h5>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">myLinkedListAddAtIndex</span><span class=\"token punctuation\">(</span>MyLinkedList <span class=\"token operator\">*</span>obj<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    MyLinkedList <span class=\"token operator\">*</span>nowList <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//如果为负索引或者0，直接头插</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">myLinkedListAddAtHead</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//遍历链表，break条件：cnt位置到达index位置,此时nowList节点位置到达index-1位置</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>nowList<span class=\"token operator\">-></span>next <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cnt <span class=\"token operator\">==</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n\t\tnowList <span class=\"token operator\">=</span> nowList<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\t\tcnt<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//如果不满足该条件，一定是通过nowList->next == NULL跳出循环的，index无效</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cnt <span class=\"token operator\">!=</span> index<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//初始化新节点，将新结点的next节点指向index节点，将index-1位置节点的next节点指向新节点</span>\n\tMyLinkedList <span class=\"token operator\">*</span>node <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>MyLinkedList <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>MyLinkedList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tnode<span class=\"token operator\">-></span>val <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n\tnode<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> nowList<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\tnowList<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h5 id=\"删除链表中的第-index-个节点\">删除链表中的第 $index$ 个节点</h5>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">myLinkedListDeleteAtIndex</span><span class=\"token punctuation\">(</span>MyLinkedList <span class=\"token operator\">*</span>obj<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    MyLinkedList <span class=\"token operator\">*</span>nowList <span class=\"token operator\">=</span> obj<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//处理异常情况 负索引或者真实链表为空，直接退出</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> obj<span class=\"token operator\">-></span>next <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//此时真实链表至少有一个节点，所以可以直接删除第一个</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        obj<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> obj<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//遍历链表，循环终止条件：当前节点为最后一个节点；break条件:当前节点为index位置的前一个节点</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>nowList<span class=\"token operator\">-></span>next <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cnt <span class=\"token operator\">==</span> index <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n        nowList <span class=\"token operator\">=</span> nowList<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n        cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//需满足index位置有节点，且当前节点为index-1位置上的节点，才能进行删除操作</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cnt <span class=\"token operator\">==</span> index <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> nowList<span class=\"token operator\">-></span>next <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        nowList<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> nowList<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h5 id=\"实现free接口，释放已经申请的内存\">实现free接口，释放已经申请的内存</h5>\n<p>一个链表，每一个节点都需要释放。但是如果我们直接从第一个节点释放，那么后面的next就无法取到了，链断掉以后，剩下的内存就再也无法访问。所以链表释放内存必须从最后一个开始释放，在释放倒数第二个…依次释放。但是我们遍历链表，从最后一个节点释放，但是链表是单向的，我们无法通过链表取到它上一个节点。所以需要<strong>递归</strong>。</p>\n<p>每次只要检查到当前节点还有下一个节点，就先去释放下一个节点，直至找到最后一个节点，然后逐层往回走，最后释放整个链表。</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">//递归函数</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">myNodeFree</span><span class=\"token punctuation\">(</span>MyLinkedList <span class=\"token operator\">*</span>node<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-></span>next <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">myNodeFree</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-></span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        node<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">myLinkedListFree</span><span class=\"token punctuation\">(</span>MyLinkedList <span class=\"token operator\">*</span>obj<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">myNodeFree</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n","categories":["技术"],"tags":["LeetCode","链表"]},{"title":"链表学习笔记----双指针技巧","url":"//post/4/","content":"<h3 id=\"双指针技巧\">双指针技巧</h3>\n<h4 id=\"一个经典问题\">一个经典问题</h4>\n<blockquote>\n<p>给定一个链表，判断链表中是否有环</p>\n</blockquote>\n<p>我们在链表中使用两个速度不同的指针时会遇到的情况：</p>\n<ol>\n<li>如果没有环，快指针将停在链表末尾。</li>\n<li>如果有环，快指针最终将与慢指针相遇。</li>\n</ol>\n<p>一个安全的选择是每次移动慢指针一步，而移动快指针两步，每一次迭代，快指针将额外移动一步，如果环的长度为M，经过M次迭代后，快指针会多绕环一周，并赶上慢指针。</p>\n<h4 id=\"环形链表\">环形链表</h4>\n","categories":["技术"],"tags":["LeetCode","链表"]}]